// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package localgen

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// AddressMetaData contains all meta data concerning the Address contract.
var AddressMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212201cab5b82f8e67f91ced2f17a7411993edaea88764c6abf89a6b014fb783ae5b564736f6c63430008110033",
}

// AddressABI is the input ABI used to generate the binding from.
// Deprecated: Use AddressMetaData.ABI instead.
var AddressABI = AddressMetaData.ABI

// AddressBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use AddressMetaData.Bin instead.
var AddressBin = AddressMetaData.Bin

// DeployAddress deploys a new Ethereum contract, binding an instance of Address to it.
func DeployAddress(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Address, error) {
	parsed, err := AddressMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(AddressBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Address{AddressCaller: AddressCaller{contract: contract}, AddressTransactor: AddressTransactor{contract: contract}, AddressFilterer: AddressFilterer{contract: contract}}, nil
}

// Address is an auto generated Go binding around an Ethereum contract.
type Address struct {
	AddressCaller     // Read-only binding to the contract
	AddressTransactor // Write-only binding to the contract
	AddressFilterer   // Log filterer for contract events
}

// AddressCaller is an auto generated read-only Go binding around an Ethereum contract.
type AddressCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AddressTransactor is an auto generated write-only Go binding around an Ethereum contract.
type AddressTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AddressFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type AddressFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AddressSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type AddressSession struct {
	Contract     *Address          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// AddressCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type AddressCallerSession struct {
	Contract *AddressCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// AddressTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type AddressTransactorSession struct {
	Contract     *AddressTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// AddressRaw is an auto generated low-level Go binding around an Ethereum contract.
type AddressRaw struct {
	Contract *Address // Generic contract binding to access the raw methods on
}

// AddressCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type AddressCallerRaw struct {
	Contract *AddressCaller // Generic read-only contract binding to access the raw methods on
}

// AddressTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type AddressTransactorRaw struct {
	Contract *AddressTransactor // Generic write-only contract binding to access the raw methods on
}

// NewAddress creates a new instance of Address, bound to a specific deployed contract.
func NewAddress(address common.Address, backend bind.ContractBackend) (*Address, error) {
	contract, err := bindAddress(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Address{AddressCaller: AddressCaller{contract: contract}, AddressTransactor: AddressTransactor{contract: contract}, AddressFilterer: AddressFilterer{contract: contract}}, nil
}

// NewAddressCaller creates a new read-only instance of Address, bound to a specific deployed contract.
func NewAddressCaller(address common.Address, caller bind.ContractCaller) (*AddressCaller, error) {
	contract, err := bindAddress(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AddressCaller{contract: contract}, nil
}

// NewAddressTransactor creates a new write-only instance of Address, bound to a specific deployed contract.
func NewAddressTransactor(address common.Address, transactor bind.ContractTransactor) (*AddressTransactor, error) {
	contract, err := bindAddress(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AddressTransactor{contract: contract}, nil
}

// NewAddressFilterer creates a new log filterer instance of Address, bound to a specific deployed contract.
func NewAddressFilterer(address common.Address, filterer bind.ContractFilterer) (*AddressFilterer, error) {
	contract, err := bindAddress(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AddressFilterer{contract: contract}, nil
}

// bindAddress binds a generic wrapper to an already deployed contract.
func bindAddress(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := AddressMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Address *AddressRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Address.Contract.AddressCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Address *AddressRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Address.Contract.AddressTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Address *AddressRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Address.Contract.AddressTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Address *AddressCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Address.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Address *AddressTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Address.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Address *AddressTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Address.Contract.contract.Transact(opts, method, params...)
}

// ArbAddressTableMetaData contains all meta data concerning the ArbAddressTable contract.
var ArbAddressTableMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addressExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"compress\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"buf\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"}],\"name\":\"decompress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"lookup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"lookupIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"register\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"size\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
}

// ArbAddressTableABI is the input ABI used to generate the binding from.
// Deprecated: Use ArbAddressTableMetaData.ABI instead.
var ArbAddressTableABI = ArbAddressTableMetaData.ABI

// ArbAddressTable is an auto generated Go binding around an Ethereum contract.
type ArbAddressTable struct {
	ArbAddressTableCaller     // Read-only binding to the contract
	ArbAddressTableTransactor // Write-only binding to the contract
	ArbAddressTableFilterer   // Log filterer for contract events
}

// ArbAddressTableCaller is an auto generated read-only Go binding around an Ethereum contract.
type ArbAddressTableCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ArbAddressTableTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ArbAddressTableTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ArbAddressTableFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ArbAddressTableFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ArbAddressTableSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ArbAddressTableSession struct {
	Contract     *ArbAddressTable  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ArbAddressTableCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ArbAddressTableCallerSession struct {
	Contract *ArbAddressTableCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// ArbAddressTableTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ArbAddressTableTransactorSession struct {
	Contract     *ArbAddressTableTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// ArbAddressTableRaw is an auto generated low-level Go binding around an Ethereum contract.
type ArbAddressTableRaw struct {
	Contract *ArbAddressTable // Generic contract binding to access the raw methods on
}

// ArbAddressTableCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ArbAddressTableCallerRaw struct {
	Contract *ArbAddressTableCaller // Generic read-only contract binding to access the raw methods on
}

// ArbAddressTableTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ArbAddressTableTransactorRaw struct {
	Contract *ArbAddressTableTransactor // Generic write-only contract binding to access the raw methods on
}

// NewArbAddressTable creates a new instance of ArbAddressTable, bound to a specific deployed contract.
func NewArbAddressTable(address common.Address, backend bind.ContractBackend) (*ArbAddressTable, error) {
	contract, err := bindArbAddressTable(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ArbAddressTable{ArbAddressTableCaller: ArbAddressTableCaller{contract: contract}, ArbAddressTableTransactor: ArbAddressTableTransactor{contract: contract}, ArbAddressTableFilterer: ArbAddressTableFilterer{contract: contract}}, nil
}

// NewArbAddressTableCaller creates a new read-only instance of ArbAddressTable, bound to a specific deployed contract.
func NewArbAddressTableCaller(address common.Address, caller bind.ContractCaller) (*ArbAddressTableCaller, error) {
	contract, err := bindArbAddressTable(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ArbAddressTableCaller{contract: contract}, nil
}

// NewArbAddressTableTransactor creates a new write-only instance of ArbAddressTable, bound to a specific deployed contract.
func NewArbAddressTableTransactor(address common.Address, transactor bind.ContractTransactor) (*ArbAddressTableTransactor, error) {
	contract, err := bindArbAddressTable(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ArbAddressTableTransactor{contract: contract}, nil
}

// NewArbAddressTableFilterer creates a new log filterer instance of ArbAddressTable, bound to a specific deployed contract.
func NewArbAddressTableFilterer(address common.Address, filterer bind.ContractFilterer) (*ArbAddressTableFilterer, error) {
	contract, err := bindArbAddressTable(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ArbAddressTableFilterer{contract: contract}, nil
}

// bindArbAddressTable binds a generic wrapper to an already deployed contract.
func bindArbAddressTable(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ArbAddressTableMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ArbAddressTable *ArbAddressTableRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ArbAddressTable.Contract.ArbAddressTableCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ArbAddressTable *ArbAddressTableRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ArbAddressTable.Contract.ArbAddressTableTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ArbAddressTable *ArbAddressTableRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ArbAddressTable.Contract.ArbAddressTableTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ArbAddressTable *ArbAddressTableCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ArbAddressTable.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ArbAddressTable *ArbAddressTableTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ArbAddressTable.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ArbAddressTable *ArbAddressTableTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ArbAddressTable.Contract.contract.Transact(opts, method, params...)
}

// AddressExists is a free data retrieval call binding the contract method 0xa5025222.
//
// Solidity: function addressExists(address addr) view returns(bool)
func (_ArbAddressTable *ArbAddressTableCaller) AddressExists(opts *bind.CallOpts, addr common.Address) (bool, error) {
	var out []interface{}
	err := _ArbAddressTable.contract.Call(opts, &out, "addressExists", addr)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// AddressExists is a free data retrieval call binding the contract method 0xa5025222.
//
// Solidity: function addressExists(address addr) view returns(bool)
func (_ArbAddressTable *ArbAddressTableSession) AddressExists(addr common.Address) (bool, error) {
	return _ArbAddressTable.Contract.AddressExists(&_ArbAddressTable.CallOpts, addr)
}

// AddressExists is a free data retrieval call binding the contract method 0xa5025222.
//
// Solidity: function addressExists(address addr) view returns(bool)
func (_ArbAddressTable *ArbAddressTableCallerSession) AddressExists(addr common.Address) (bool, error) {
	return _ArbAddressTable.Contract.AddressExists(&_ArbAddressTable.CallOpts, addr)
}

// Decompress is a free data retrieval call binding the contract method 0x31862ada.
//
// Solidity: function decompress(bytes buf, uint256 offset) view returns(address, uint256)
func (_ArbAddressTable *ArbAddressTableCaller) Decompress(opts *bind.CallOpts, buf []byte, offset *big.Int) (common.Address, *big.Int, error) {
	var out []interface{}
	err := _ArbAddressTable.contract.Call(opts, &out, "decompress", buf, offset)

	if err != nil {
		return *new(common.Address), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return out0, out1, err

}

// Decompress is a free data retrieval call binding the contract method 0x31862ada.
//
// Solidity: function decompress(bytes buf, uint256 offset) view returns(address, uint256)
func (_ArbAddressTable *ArbAddressTableSession) Decompress(buf []byte, offset *big.Int) (common.Address, *big.Int, error) {
	return _ArbAddressTable.Contract.Decompress(&_ArbAddressTable.CallOpts, buf, offset)
}

// Decompress is a free data retrieval call binding the contract method 0x31862ada.
//
// Solidity: function decompress(bytes buf, uint256 offset) view returns(address, uint256)
func (_ArbAddressTable *ArbAddressTableCallerSession) Decompress(buf []byte, offset *big.Int) (common.Address, *big.Int, error) {
	return _ArbAddressTable.Contract.Decompress(&_ArbAddressTable.CallOpts, buf, offset)
}

// Lookup is a free data retrieval call binding the contract method 0xd4b6b5da.
//
// Solidity: function lookup(address addr) view returns(uint256)
func (_ArbAddressTable *ArbAddressTableCaller) Lookup(opts *bind.CallOpts, addr common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ArbAddressTable.contract.Call(opts, &out, "lookup", addr)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Lookup is a free data retrieval call binding the contract method 0xd4b6b5da.
//
// Solidity: function lookup(address addr) view returns(uint256)
func (_ArbAddressTable *ArbAddressTableSession) Lookup(addr common.Address) (*big.Int, error) {
	return _ArbAddressTable.Contract.Lookup(&_ArbAddressTable.CallOpts, addr)
}

// Lookup is a free data retrieval call binding the contract method 0xd4b6b5da.
//
// Solidity: function lookup(address addr) view returns(uint256)
func (_ArbAddressTable *ArbAddressTableCallerSession) Lookup(addr common.Address) (*big.Int, error) {
	return _ArbAddressTable.Contract.Lookup(&_ArbAddressTable.CallOpts, addr)
}

// LookupIndex is a free data retrieval call binding the contract method 0x8a186788.
//
// Solidity: function lookupIndex(uint256 index) view returns(address)
func (_ArbAddressTable *ArbAddressTableCaller) LookupIndex(opts *bind.CallOpts, index *big.Int) (common.Address, error) {
	var out []interface{}
	err := _ArbAddressTable.contract.Call(opts, &out, "lookupIndex", index)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// LookupIndex is a free data retrieval call binding the contract method 0x8a186788.
//
// Solidity: function lookupIndex(uint256 index) view returns(address)
func (_ArbAddressTable *ArbAddressTableSession) LookupIndex(index *big.Int) (common.Address, error) {
	return _ArbAddressTable.Contract.LookupIndex(&_ArbAddressTable.CallOpts, index)
}

// LookupIndex is a free data retrieval call binding the contract method 0x8a186788.
//
// Solidity: function lookupIndex(uint256 index) view returns(address)
func (_ArbAddressTable *ArbAddressTableCallerSession) LookupIndex(index *big.Int) (common.Address, error) {
	return _ArbAddressTable.Contract.LookupIndex(&_ArbAddressTable.CallOpts, index)
}

// Size is a free data retrieval call binding the contract method 0x949d225d.
//
// Solidity: function size() view returns(uint256)
func (_ArbAddressTable *ArbAddressTableCaller) Size(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ArbAddressTable.contract.Call(opts, &out, "size")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Size is a free data retrieval call binding the contract method 0x949d225d.
//
// Solidity: function size() view returns(uint256)
func (_ArbAddressTable *ArbAddressTableSession) Size() (*big.Int, error) {
	return _ArbAddressTable.Contract.Size(&_ArbAddressTable.CallOpts)
}

// Size is a free data retrieval call binding the contract method 0x949d225d.
//
// Solidity: function size() view returns(uint256)
func (_ArbAddressTable *ArbAddressTableCallerSession) Size() (*big.Int, error) {
	return _ArbAddressTable.Contract.Size(&_ArbAddressTable.CallOpts)
}

// Compress is a paid mutator transaction binding the contract method 0xf6a455a2.
//
// Solidity: function compress(address addr) returns(bytes)
func (_ArbAddressTable *ArbAddressTableTransactor) Compress(opts *bind.TransactOpts, addr common.Address) (*types.Transaction, error) {
	return _ArbAddressTable.contract.Transact(opts, "compress", addr)
}

// Compress is a paid mutator transaction binding the contract method 0xf6a455a2.
//
// Solidity: function compress(address addr) returns(bytes)
func (_ArbAddressTable *ArbAddressTableSession) Compress(addr common.Address) (*types.Transaction, error) {
	return _ArbAddressTable.Contract.Compress(&_ArbAddressTable.TransactOpts, addr)
}

// Compress is a paid mutator transaction binding the contract method 0xf6a455a2.
//
// Solidity: function compress(address addr) returns(bytes)
func (_ArbAddressTable *ArbAddressTableTransactorSession) Compress(addr common.Address) (*types.Transaction, error) {
	return _ArbAddressTable.Contract.Compress(&_ArbAddressTable.TransactOpts, addr)
}

// Register is a paid mutator transaction binding the contract method 0x4420e486.
//
// Solidity: function register(address addr) returns(uint256)
func (_ArbAddressTable *ArbAddressTableTransactor) Register(opts *bind.TransactOpts, addr common.Address) (*types.Transaction, error) {
	return _ArbAddressTable.contract.Transact(opts, "register", addr)
}

// Register is a paid mutator transaction binding the contract method 0x4420e486.
//
// Solidity: function register(address addr) returns(uint256)
func (_ArbAddressTable *ArbAddressTableSession) Register(addr common.Address) (*types.Transaction, error) {
	return _ArbAddressTable.Contract.Register(&_ArbAddressTable.TransactOpts, addr)
}

// Register is a paid mutator transaction binding the contract method 0x4420e486.
//
// Solidity: function register(address addr) returns(uint256)
func (_ArbAddressTable *ArbAddressTableTransactorSession) Register(addr common.Address) (*types.Transaction, error) {
	return _ArbAddressTable.Contract.Register(&_ArbAddressTable.TransactOpts, addr)
}

// ArbAggregatorMetaData contains all meta data concerning the ArbAggregator contract.
var ArbAggregatorMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newBatchPoster\",\"type\":\"address\"}],\"name\":\"addBatchPoster\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBatchPosters\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDefaultAggregator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"batchPoster\",\"type\":\"address\"}],\"name\":\"getFeeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getPreferredAggregator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"aggregator\",\"type\":\"address\"}],\"name\":\"getTxBaseFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"batchPoster\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newFeeCollector\",\"type\":\"address\"}],\"name\":\"setFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"aggregator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeInL1Gas\",\"type\":\"uint256\"}],\"name\":\"setTxBaseFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// ArbAggregatorABI is the input ABI used to generate the binding from.
// Deprecated: Use ArbAggregatorMetaData.ABI instead.
var ArbAggregatorABI = ArbAggregatorMetaData.ABI

// ArbAggregator is an auto generated Go binding around an Ethereum contract.
type ArbAggregator struct {
	ArbAggregatorCaller     // Read-only binding to the contract
	ArbAggregatorTransactor // Write-only binding to the contract
	ArbAggregatorFilterer   // Log filterer for contract events
}

// ArbAggregatorCaller is an auto generated read-only Go binding around an Ethereum contract.
type ArbAggregatorCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ArbAggregatorTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ArbAggregatorTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ArbAggregatorFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ArbAggregatorFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ArbAggregatorSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ArbAggregatorSession struct {
	Contract     *ArbAggregator    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ArbAggregatorCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ArbAggregatorCallerSession struct {
	Contract *ArbAggregatorCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// ArbAggregatorTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ArbAggregatorTransactorSession struct {
	Contract     *ArbAggregatorTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// ArbAggregatorRaw is an auto generated low-level Go binding around an Ethereum contract.
type ArbAggregatorRaw struct {
	Contract *ArbAggregator // Generic contract binding to access the raw methods on
}

// ArbAggregatorCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ArbAggregatorCallerRaw struct {
	Contract *ArbAggregatorCaller // Generic read-only contract binding to access the raw methods on
}

// ArbAggregatorTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ArbAggregatorTransactorRaw struct {
	Contract *ArbAggregatorTransactor // Generic write-only contract binding to access the raw methods on
}

// NewArbAggregator creates a new instance of ArbAggregator, bound to a specific deployed contract.
func NewArbAggregator(address common.Address, backend bind.ContractBackend) (*ArbAggregator, error) {
	contract, err := bindArbAggregator(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ArbAggregator{ArbAggregatorCaller: ArbAggregatorCaller{contract: contract}, ArbAggregatorTransactor: ArbAggregatorTransactor{contract: contract}, ArbAggregatorFilterer: ArbAggregatorFilterer{contract: contract}}, nil
}

// NewArbAggregatorCaller creates a new read-only instance of ArbAggregator, bound to a specific deployed contract.
func NewArbAggregatorCaller(address common.Address, caller bind.ContractCaller) (*ArbAggregatorCaller, error) {
	contract, err := bindArbAggregator(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ArbAggregatorCaller{contract: contract}, nil
}

// NewArbAggregatorTransactor creates a new write-only instance of ArbAggregator, bound to a specific deployed contract.
func NewArbAggregatorTransactor(address common.Address, transactor bind.ContractTransactor) (*ArbAggregatorTransactor, error) {
	contract, err := bindArbAggregator(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ArbAggregatorTransactor{contract: contract}, nil
}

// NewArbAggregatorFilterer creates a new log filterer instance of ArbAggregator, bound to a specific deployed contract.
func NewArbAggregatorFilterer(address common.Address, filterer bind.ContractFilterer) (*ArbAggregatorFilterer, error) {
	contract, err := bindArbAggregator(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ArbAggregatorFilterer{contract: contract}, nil
}

// bindArbAggregator binds a generic wrapper to an already deployed contract.
func bindArbAggregator(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ArbAggregatorMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ArbAggregator *ArbAggregatorRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ArbAggregator.Contract.ArbAggregatorCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ArbAggregator *ArbAggregatorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ArbAggregator.Contract.ArbAggregatorTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ArbAggregator *ArbAggregatorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ArbAggregator.Contract.ArbAggregatorTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ArbAggregator *ArbAggregatorCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ArbAggregator.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ArbAggregator *ArbAggregatorTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ArbAggregator.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ArbAggregator *ArbAggregatorTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ArbAggregator.Contract.contract.Transact(opts, method, params...)
}

// GetBatchPosters is a free data retrieval call binding the contract method 0xe10573a3.
//
// Solidity: function getBatchPosters() view returns(address[])
func (_ArbAggregator *ArbAggregatorCaller) GetBatchPosters(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _ArbAggregator.contract.Call(opts, &out, "getBatchPosters")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetBatchPosters is a free data retrieval call binding the contract method 0xe10573a3.
//
// Solidity: function getBatchPosters() view returns(address[])
func (_ArbAggregator *ArbAggregatorSession) GetBatchPosters() ([]common.Address, error) {
	return _ArbAggregator.Contract.GetBatchPosters(&_ArbAggregator.CallOpts)
}

// GetBatchPosters is a free data retrieval call binding the contract method 0xe10573a3.
//
// Solidity: function getBatchPosters() view returns(address[])
func (_ArbAggregator *ArbAggregatorCallerSession) GetBatchPosters() ([]common.Address, error) {
	return _ArbAggregator.Contract.GetBatchPosters(&_ArbAggregator.CallOpts)
}

// GetDefaultAggregator is a free data retrieval call binding the contract method 0x875883f2.
//
// Solidity: function getDefaultAggregator() view returns(address)
func (_ArbAggregator *ArbAggregatorCaller) GetDefaultAggregator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ArbAggregator.contract.Call(opts, &out, "getDefaultAggregator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetDefaultAggregator is a free data retrieval call binding the contract method 0x875883f2.
//
// Solidity: function getDefaultAggregator() view returns(address)
func (_ArbAggregator *ArbAggregatorSession) GetDefaultAggregator() (common.Address, error) {
	return _ArbAggregator.Contract.GetDefaultAggregator(&_ArbAggregator.CallOpts)
}

// GetDefaultAggregator is a free data retrieval call binding the contract method 0x875883f2.
//
// Solidity: function getDefaultAggregator() view returns(address)
func (_ArbAggregator *ArbAggregatorCallerSession) GetDefaultAggregator() (common.Address, error) {
	return _ArbAggregator.Contract.GetDefaultAggregator(&_ArbAggregator.CallOpts)
}

// GetFeeCollector is a free data retrieval call binding the contract method 0x9c2c5bb5.
//
// Solidity: function getFeeCollector(address batchPoster) view returns(address)
func (_ArbAggregator *ArbAggregatorCaller) GetFeeCollector(opts *bind.CallOpts, batchPoster common.Address) (common.Address, error) {
	var out []interface{}
	err := _ArbAggregator.contract.Call(opts, &out, "getFeeCollector", batchPoster)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetFeeCollector is a free data retrieval call binding the contract method 0x9c2c5bb5.
//
// Solidity: function getFeeCollector(address batchPoster) view returns(address)
func (_ArbAggregator *ArbAggregatorSession) GetFeeCollector(batchPoster common.Address) (common.Address, error) {
	return _ArbAggregator.Contract.GetFeeCollector(&_ArbAggregator.CallOpts, batchPoster)
}

// GetFeeCollector is a free data retrieval call binding the contract method 0x9c2c5bb5.
//
// Solidity: function getFeeCollector(address batchPoster) view returns(address)
func (_ArbAggregator *ArbAggregatorCallerSession) GetFeeCollector(batchPoster common.Address) (common.Address, error) {
	return _ArbAggregator.Contract.GetFeeCollector(&_ArbAggregator.CallOpts, batchPoster)
}

// GetPreferredAggregator is a free data retrieval call binding the contract method 0x52f10740.
//
// Solidity: function getPreferredAggregator(address addr) view returns(address, bool)
func (_ArbAggregator *ArbAggregatorCaller) GetPreferredAggregator(opts *bind.CallOpts, addr common.Address) (common.Address, bool, error) {
	var out []interface{}
	err := _ArbAggregator.contract.Call(opts, &out, "getPreferredAggregator", addr)

	if err != nil {
		return *new(common.Address), *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	out1 := *abi.ConvertType(out[1], new(bool)).(*bool)

	return out0, out1, err

}

// GetPreferredAggregator is a free data retrieval call binding the contract method 0x52f10740.
//
// Solidity: function getPreferredAggregator(address addr) view returns(address, bool)
func (_ArbAggregator *ArbAggregatorSession) GetPreferredAggregator(addr common.Address) (common.Address, bool, error) {
	return _ArbAggregator.Contract.GetPreferredAggregator(&_ArbAggregator.CallOpts, addr)
}

// GetPreferredAggregator is a free data retrieval call binding the contract method 0x52f10740.
//
// Solidity: function getPreferredAggregator(address addr) view returns(address, bool)
func (_ArbAggregator *ArbAggregatorCallerSession) GetPreferredAggregator(addr common.Address) (common.Address, bool, error) {
	return _ArbAggregator.Contract.GetPreferredAggregator(&_ArbAggregator.CallOpts, addr)
}

// GetTxBaseFee is a free data retrieval call binding the contract method 0x049764af.
//
// Solidity: function getTxBaseFee(address aggregator) view returns(uint256)
func (_ArbAggregator *ArbAggregatorCaller) GetTxBaseFee(opts *bind.CallOpts, aggregator common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ArbAggregator.contract.Call(opts, &out, "getTxBaseFee", aggregator)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTxBaseFee is a free data retrieval call binding the contract method 0x049764af.
//
// Solidity: function getTxBaseFee(address aggregator) view returns(uint256)
func (_ArbAggregator *ArbAggregatorSession) GetTxBaseFee(aggregator common.Address) (*big.Int, error) {
	return _ArbAggregator.Contract.GetTxBaseFee(&_ArbAggregator.CallOpts, aggregator)
}

// GetTxBaseFee is a free data retrieval call binding the contract method 0x049764af.
//
// Solidity: function getTxBaseFee(address aggregator) view returns(uint256)
func (_ArbAggregator *ArbAggregatorCallerSession) GetTxBaseFee(aggregator common.Address) (*big.Int, error) {
	return _ArbAggregator.Contract.GetTxBaseFee(&_ArbAggregator.CallOpts, aggregator)
}

// AddBatchPoster is a paid mutator transaction binding the contract method 0xdf41e1e2.
//
// Solidity: function addBatchPoster(address newBatchPoster) returns()
func (_ArbAggregator *ArbAggregatorTransactor) AddBatchPoster(opts *bind.TransactOpts, newBatchPoster common.Address) (*types.Transaction, error) {
	return _ArbAggregator.contract.Transact(opts, "addBatchPoster", newBatchPoster)
}

// AddBatchPoster is a paid mutator transaction binding the contract method 0xdf41e1e2.
//
// Solidity: function addBatchPoster(address newBatchPoster) returns()
func (_ArbAggregator *ArbAggregatorSession) AddBatchPoster(newBatchPoster common.Address) (*types.Transaction, error) {
	return _ArbAggregator.Contract.AddBatchPoster(&_ArbAggregator.TransactOpts, newBatchPoster)
}

// AddBatchPoster is a paid mutator transaction binding the contract method 0xdf41e1e2.
//
// Solidity: function addBatchPoster(address newBatchPoster) returns()
func (_ArbAggregator *ArbAggregatorTransactorSession) AddBatchPoster(newBatchPoster common.Address) (*types.Transaction, error) {
	return _ArbAggregator.Contract.AddBatchPoster(&_ArbAggregator.TransactOpts, newBatchPoster)
}

// SetFeeCollector is a paid mutator transaction binding the contract method 0x29149799.
//
// Solidity: function setFeeCollector(address batchPoster, address newFeeCollector) returns()
func (_ArbAggregator *ArbAggregatorTransactor) SetFeeCollector(opts *bind.TransactOpts, batchPoster common.Address, newFeeCollector common.Address) (*types.Transaction, error) {
	return _ArbAggregator.contract.Transact(opts, "setFeeCollector", batchPoster, newFeeCollector)
}

// SetFeeCollector is a paid mutator transaction binding the contract method 0x29149799.
//
// Solidity: function setFeeCollector(address batchPoster, address newFeeCollector) returns()
func (_ArbAggregator *ArbAggregatorSession) SetFeeCollector(batchPoster common.Address, newFeeCollector common.Address) (*types.Transaction, error) {
	return _ArbAggregator.Contract.SetFeeCollector(&_ArbAggregator.TransactOpts, batchPoster, newFeeCollector)
}

// SetFeeCollector is a paid mutator transaction binding the contract method 0x29149799.
//
// Solidity: function setFeeCollector(address batchPoster, address newFeeCollector) returns()
func (_ArbAggregator *ArbAggregatorTransactorSession) SetFeeCollector(batchPoster common.Address, newFeeCollector common.Address) (*types.Transaction, error) {
	return _ArbAggregator.Contract.SetFeeCollector(&_ArbAggregator.TransactOpts, batchPoster, newFeeCollector)
}

// SetTxBaseFee is a paid mutator transaction binding the contract method 0x5be6888b.
//
// Solidity: function setTxBaseFee(address aggregator, uint256 feeInL1Gas) returns()
func (_ArbAggregator *ArbAggregatorTransactor) SetTxBaseFee(opts *bind.TransactOpts, aggregator common.Address, feeInL1Gas *big.Int) (*types.Transaction, error) {
	return _ArbAggregator.contract.Transact(opts, "setTxBaseFee", aggregator, feeInL1Gas)
}

// SetTxBaseFee is a paid mutator transaction binding the contract method 0x5be6888b.
//
// Solidity: function setTxBaseFee(address aggregator, uint256 feeInL1Gas) returns()
func (_ArbAggregator *ArbAggregatorSession) SetTxBaseFee(aggregator common.Address, feeInL1Gas *big.Int) (*types.Transaction, error) {
	return _ArbAggregator.Contract.SetTxBaseFee(&_ArbAggregator.TransactOpts, aggregator, feeInL1Gas)
}

// SetTxBaseFee is a paid mutator transaction binding the contract method 0x5be6888b.
//
// Solidity: function setTxBaseFee(address aggregator, uint256 feeInL1Gas) returns()
func (_ArbAggregator *ArbAggregatorTransactorSession) SetTxBaseFee(aggregator common.Address, feeInL1Gas *big.Int) (*types.Transaction, error) {
	return _ArbAggregator.Contract.SetTxBaseFee(&_ArbAggregator.TransactOpts, aggregator, feeInL1Gas)
}

// ArbBLSMetaData contains all meta data concerning the ArbBLS contract.
var ArbBLSMetaData = &bind.MetaData{
	ABI: "[]",
}

// ArbBLSABI is the input ABI used to generate the binding from.
// Deprecated: Use ArbBLSMetaData.ABI instead.
var ArbBLSABI = ArbBLSMetaData.ABI

// ArbBLS is an auto generated Go binding around an Ethereum contract.
type ArbBLS struct {
	ArbBLSCaller     // Read-only binding to the contract
	ArbBLSTransactor // Write-only binding to the contract
	ArbBLSFilterer   // Log filterer for contract events
}

// ArbBLSCaller is an auto generated read-only Go binding around an Ethereum contract.
type ArbBLSCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ArbBLSTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ArbBLSTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ArbBLSFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ArbBLSFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ArbBLSSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ArbBLSSession struct {
	Contract     *ArbBLS           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ArbBLSCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ArbBLSCallerSession struct {
	Contract *ArbBLSCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// ArbBLSTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ArbBLSTransactorSession struct {
	Contract     *ArbBLSTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ArbBLSRaw is an auto generated low-level Go binding around an Ethereum contract.
type ArbBLSRaw struct {
	Contract *ArbBLS // Generic contract binding to access the raw methods on
}

// ArbBLSCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ArbBLSCallerRaw struct {
	Contract *ArbBLSCaller // Generic read-only contract binding to access the raw methods on
}

// ArbBLSTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ArbBLSTransactorRaw struct {
	Contract *ArbBLSTransactor // Generic write-only contract binding to access the raw methods on
}

// NewArbBLS creates a new instance of ArbBLS, bound to a specific deployed contract.
func NewArbBLS(address common.Address, backend bind.ContractBackend) (*ArbBLS, error) {
	contract, err := bindArbBLS(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ArbBLS{ArbBLSCaller: ArbBLSCaller{contract: contract}, ArbBLSTransactor: ArbBLSTransactor{contract: contract}, ArbBLSFilterer: ArbBLSFilterer{contract: contract}}, nil
}

// NewArbBLSCaller creates a new read-only instance of ArbBLS, bound to a specific deployed contract.
func NewArbBLSCaller(address common.Address, caller bind.ContractCaller) (*ArbBLSCaller, error) {
	contract, err := bindArbBLS(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ArbBLSCaller{contract: contract}, nil
}

// NewArbBLSTransactor creates a new write-only instance of ArbBLS, bound to a specific deployed contract.
func NewArbBLSTransactor(address common.Address, transactor bind.ContractTransactor) (*ArbBLSTransactor, error) {
	contract, err := bindArbBLS(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ArbBLSTransactor{contract: contract}, nil
}

// NewArbBLSFilterer creates a new log filterer instance of ArbBLS, bound to a specific deployed contract.
func NewArbBLSFilterer(address common.Address, filterer bind.ContractFilterer) (*ArbBLSFilterer, error) {
	contract, err := bindArbBLS(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ArbBLSFilterer{contract: contract}, nil
}

// bindArbBLS binds a generic wrapper to an already deployed contract.
func bindArbBLS(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ArbBLSMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ArbBLS *ArbBLSRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ArbBLS.Contract.ArbBLSCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ArbBLS *ArbBLSRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ArbBLS.Contract.ArbBLSTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ArbBLS *ArbBLSRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ArbBLS.Contract.ArbBLSTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ArbBLS *ArbBLSCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ArbBLS.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ArbBLS *ArbBLSTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ArbBLS.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ArbBLS *ArbBLSTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ArbBLS.Contract.contract.Transact(opts, method, params...)
}

// ArbDebugMetaData contains all meta data concerning the ArbDebug contract.
var ArbDebugMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"becomeChainOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"number\",\"type\":\"uint64\"}],\"name\":\"customRevert\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"value\",\"type\":\"bytes32\"}],\"name\":\"events\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eventsView\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"legacyError\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"panic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"value\",\"type\":\"bytes32\"}],\"name\":\"Basic\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"not\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"value\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"conn\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Mixed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"field\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"number\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"value\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"store\",\"type\":\"bytes\"}],\"name\":\"Store\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"Custom\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unused\",\"type\":\"error\"}]",
}

// ArbDebugABI is the input ABI used to generate the binding from.
// Deprecated: Use ArbDebugMetaData.ABI instead.
var ArbDebugABI = ArbDebugMetaData.ABI

// ArbDebug is an auto generated Go binding around an Ethereum contract.
type ArbDebug struct {
	ArbDebugCaller     // Read-only binding to the contract
	ArbDebugTransactor // Write-only binding to the contract
	ArbDebugFilterer   // Log filterer for contract events
}

// ArbDebugCaller is an auto generated read-only Go binding around an Ethereum contract.
type ArbDebugCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ArbDebugTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ArbDebugTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ArbDebugFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ArbDebugFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ArbDebugSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ArbDebugSession struct {
	Contract     *ArbDebug         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ArbDebugCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ArbDebugCallerSession struct {
	Contract *ArbDebugCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// ArbDebugTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ArbDebugTransactorSession struct {
	Contract     *ArbDebugTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// ArbDebugRaw is an auto generated low-level Go binding around an Ethereum contract.
type ArbDebugRaw struct {
	Contract *ArbDebug // Generic contract binding to access the raw methods on
}

// ArbDebugCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ArbDebugCallerRaw struct {
	Contract *ArbDebugCaller // Generic read-only contract binding to access the raw methods on
}

// ArbDebugTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ArbDebugTransactorRaw struct {
	Contract *ArbDebugTransactor // Generic write-only contract binding to access the raw methods on
}

// NewArbDebug creates a new instance of ArbDebug, bound to a specific deployed contract.
func NewArbDebug(address common.Address, backend bind.ContractBackend) (*ArbDebug, error) {
	contract, err := bindArbDebug(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ArbDebug{ArbDebugCaller: ArbDebugCaller{contract: contract}, ArbDebugTransactor: ArbDebugTransactor{contract: contract}, ArbDebugFilterer: ArbDebugFilterer{contract: contract}}, nil
}

// NewArbDebugCaller creates a new read-only instance of ArbDebug, bound to a specific deployed contract.
func NewArbDebugCaller(address common.Address, caller bind.ContractCaller) (*ArbDebugCaller, error) {
	contract, err := bindArbDebug(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ArbDebugCaller{contract: contract}, nil
}

// NewArbDebugTransactor creates a new write-only instance of ArbDebug, bound to a specific deployed contract.
func NewArbDebugTransactor(address common.Address, transactor bind.ContractTransactor) (*ArbDebugTransactor, error) {
	contract, err := bindArbDebug(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ArbDebugTransactor{contract: contract}, nil
}

// NewArbDebugFilterer creates a new log filterer instance of ArbDebug, bound to a specific deployed contract.
func NewArbDebugFilterer(address common.Address, filterer bind.ContractFilterer) (*ArbDebugFilterer, error) {
	contract, err := bindArbDebug(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ArbDebugFilterer{contract: contract}, nil
}

// bindArbDebug binds a generic wrapper to an already deployed contract.
func bindArbDebug(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ArbDebugMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ArbDebug *ArbDebugRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ArbDebug.Contract.ArbDebugCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ArbDebug *ArbDebugRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ArbDebug.Contract.ArbDebugTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ArbDebug *ArbDebugRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ArbDebug.Contract.ArbDebugTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ArbDebug *ArbDebugCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ArbDebug.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ArbDebug *ArbDebugTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ArbDebug.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ArbDebug *ArbDebugTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ArbDebug.Contract.contract.Transact(opts, method, params...)
}

// CustomRevert is a free data retrieval call binding the contract method 0x7ea89f8b.
//
// Solidity: function customRevert(uint64 number) pure returns()
func (_ArbDebug *ArbDebugCaller) CustomRevert(opts *bind.CallOpts, number uint64) error {
	var out []interface{}
	err := _ArbDebug.contract.Call(opts, &out, "customRevert", number)

	if err != nil {
		return err
	}

	return err

}

// CustomRevert is a free data retrieval call binding the contract method 0x7ea89f8b.
//
// Solidity: function customRevert(uint64 number) pure returns()
func (_ArbDebug *ArbDebugSession) CustomRevert(number uint64) error {
	return _ArbDebug.Contract.CustomRevert(&_ArbDebug.CallOpts, number)
}

// CustomRevert is a free data retrieval call binding the contract method 0x7ea89f8b.
//
// Solidity: function customRevert(uint64 number) pure returns()
func (_ArbDebug *ArbDebugCallerSession) CustomRevert(number uint64) error {
	return _ArbDebug.Contract.CustomRevert(&_ArbDebug.CallOpts, number)
}

// EventsView is a free data retrieval call binding the contract method 0x8e5f30ab.
//
// Solidity: function eventsView() view returns()
func (_ArbDebug *ArbDebugCaller) EventsView(opts *bind.CallOpts) error {
	var out []interface{}
	err := _ArbDebug.contract.Call(opts, &out, "eventsView")

	if err != nil {
		return err
	}

	return err

}

// EventsView is a free data retrieval call binding the contract method 0x8e5f30ab.
//
// Solidity: function eventsView() view returns()
func (_ArbDebug *ArbDebugSession) EventsView() error {
	return _ArbDebug.Contract.EventsView(&_ArbDebug.CallOpts)
}

// EventsView is a free data retrieval call binding the contract method 0x8e5f30ab.
//
// Solidity: function eventsView() view returns()
func (_ArbDebug *ArbDebugCallerSession) EventsView() error {
	return _ArbDebug.Contract.EventsView(&_ArbDebug.CallOpts)
}

// LegacyError is a free data retrieval call binding the contract method 0x1e48fe82.
//
// Solidity: function legacyError() pure returns()
func (_ArbDebug *ArbDebugCaller) LegacyError(opts *bind.CallOpts) error {
	var out []interface{}
	err := _ArbDebug.contract.Call(opts, &out, "legacyError")

	if err != nil {
		return err
	}

	return err

}

// LegacyError is a free data retrieval call binding the contract method 0x1e48fe82.
//
// Solidity: function legacyError() pure returns()
func (_ArbDebug *ArbDebugSession) LegacyError() error {
	return _ArbDebug.Contract.LegacyError(&_ArbDebug.CallOpts)
}

// LegacyError is a free data retrieval call binding the contract method 0x1e48fe82.
//
// Solidity: function legacyError() pure returns()
func (_ArbDebug *ArbDebugCallerSession) LegacyError() error {
	return _ArbDebug.Contract.LegacyError(&_ArbDebug.CallOpts)
}

// BecomeChainOwner is a paid mutator transaction binding the contract method 0x0e5bbc11.
//
// Solidity: function becomeChainOwner() returns()
func (_ArbDebug *ArbDebugTransactor) BecomeChainOwner(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ArbDebug.contract.Transact(opts, "becomeChainOwner")
}

// BecomeChainOwner is a paid mutator transaction binding the contract method 0x0e5bbc11.
//
// Solidity: function becomeChainOwner() returns()
func (_ArbDebug *ArbDebugSession) BecomeChainOwner() (*types.Transaction, error) {
	return _ArbDebug.Contract.BecomeChainOwner(&_ArbDebug.TransactOpts)
}

// BecomeChainOwner is a paid mutator transaction binding the contract method 0x0e5bbc11.
//
// Solidity: function becomeChainOwner() returns()
func (_ArbDebug *ArbDebugTransactorSession) BecomeChainOwner() (*types.Transaction, error) {
	return _ArbDebug.Contract.BecomeChainOwner(&_ArbDebug.TransactOpts)
}

// Events is a paid mutator transaction binding the contract method 0x7b9963ef.
//
// Solidity: function events(bool flag, bytes32 value) payable returns(address, uint256)
func (_ArbDebug *ArbDebugTransactor) Events(opts *bind.TransactOpts, flag bool, value [32]byte) (*types.Transaction, error) {
	return _ArbDebug.contract.Transact(opts, "events", flag, value)
}

// Events is a paid mutator transaction binding the contract method 0x7b9963ef.
//
// Solidity: function events(bool flag, bytes32 value) payable returns(address, uint256)
func (_ArbDebug *ArbDebugSession) Events(flag bool, value [32]byte) (*types.Transaction, error) {
	return _ArbDebug.Contract.Events(&_ArbDebug.TransactOpts, flag, value)
}

// Events is a paid mutator transaction binding the contract method 0x7b9963ef.
//
// Solidity: function events(bool flag, bytes32 value) payable returns(address, uint256)
func (_ArbDebug *ArbDebugTransactorSession) Events(flag bool, value [32]byte) (*types.Transaction, error) {
	return _ArbDebug.Contract.Events(&_ArbDebug.TransactOpts, flag, value)
}

// Panic is a paid mutator transaction binding the contract method 0x4700d305.
//
// Solidity: function panic() returns()
func (_ArbDebug *ArbDebugTransactor) Panic(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ArbDebug.contract.Transact(opts, "panic")
}

// Panic is a paid mutator transaction binding the contract method 0x4700d305.
//
// Solidity: function panic() returns()
func (_ArbDebug *ArbDebugSession) Panic() (*types.Transaction, error) {
	return _ArbDebug.Contract.Panic(&_ArbDebug.TransactOpts)
}

// Panic is a paid mutator transaction binding the contract method 0x4700d305.
//
// Solidity: function panic() returns()
func (_ArbDebug *ArbDebugTransactorSession) Panic() (*types.Transaction, error) {
	return _ArbDebug.Contract.Panic(&_ArbDebug.TransactOpts)
}

// ArbDebugBasicIterator is returned from FilterBasic and is used to iterate over the raw logs and unpacked data for Basic events raised by the ArbDebug contract.
type ArbDebugBasicIterator struct {
	Event *ArbDebugBasic // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ArbDebugBasicIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ArbDebugBasic)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ArbDebugBasic)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ArbDebugBasicIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ArbDebugBasicIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ArbDebugBasic represents a Basic event raised by the ArbDebug contract.
type ArbDebugBasic struct {
	Flag  bool
	Value [32]byte
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterBasic is a free log retrieval operation binding the contract event 0x93c1309077578d0b9ed1398956be51f0c6e1fcc0b91d899836148550215acfe2.
//
// Solidity: event Basic(bool flag, bytes32 indexed value)
func (_ArbDebug *ArbDebugFilterer) FilterBasic(opts *bind.FilterOpts, value [][32]byte) (*ArbDebugBasicIterator, error) {

	var valueRule []interface{}
	for _, valueItem := range value {
		valueRule = append(valueRule, valueItem)
	}

	logs, sub, err := _ArbDebug.contract.FilterLogs(opts, "Basic", valueRule)
	if err != nil {
		return nil, err
	}
	return &ArbDebugBasicIterator{contract: _ArbDebug.contract, event: "Basic", logs: logs, sub: sub}, nil
}

// WatchBasic is a free log subscription operation binding the contract event 0x93c1309077578d0b9ed1398956be51f0c6e1fcc0b91d899836148550215acfe2.
//
// Solidity: event Basic(bool flag, bytes32 indexed value)
func (_ArbDebug *ArbDebugFilterer) WatchBasic(opts *bind.WatchOpts, sink chan<- *ArbDebugBasic, value [][32]byte) (event.Subscription, error) {

	var valueRule []interface{}
	for _, valueItem := range value {
		valueRule = append(valueRule, valueItem)
	}

	logs, sub, err := _ArbDebug.contract.WatchLogs(opts, "Basic", valueRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ArbDebugBasic)
				if err := _ArbDebug.contract.UnpackLog(event, "Basic", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBasic is a log parse operation binding the contract event 0x93c1309077578d0b9ed1398956be51f0c6e1fcc0b91d899836148550215acfe2.
//
// Solidity: event Basic(bool flag, bytes32 indexed value)
func (_ArbDebug *ArbDebugFilterer) ParseBasic(log types.Log) (*ArbDebugBasic, error) {
	event := new(ArbDebugBasic)
	if err := _ArbDebug.contract.UnpackLog(event, "Basic", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ArbDebugMixedIterator is returned from FilterMixed and is used to iterate over the raw logs and unpacked data for Mixed events raised by the ArbDebug contract.
type ArbDebugMixedIterator struct {
	Event *ArbDebugMixed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ArbDebugMixedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ArbDebugMixed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ArbDebugMixed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ArbDebugMixedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ArbDebugMixedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ArbDebugMixed represents a Mixed event raised by the ArbDebug contract.
type ArbDebugMixed struct {
	Flag   bool
	Not    bool
	Value  [32]byte
	Conn   common.Address
	Caller common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterMixed is a free log retrieval operation binding the contract event 0xa6059246508753631072a6a59c1127af99d3f4cc0f8d6370d4fae122b1dd4eaf.
//
// Solidity: event Mixed(bool indexed flag, bool not, bytes32 indexed value, address conn, address indexed caller)
func (_ArbDebug *ArbDebugFilterer) FilterMixed(opts *bind.FilterOpts, flag []bool, value [][32]byte, caller []common.Address) (*ArbDebugMixedIterator, error) {

	var flagRule []interface{}
	for _, flagItem := range flag {
		flagRule = append(flagRule, flagItem)
	}

	var valueRule []interface{}
	for _, valueItem := range value {
		valueRule = append(valueRule, valueItem)
	}

	var callerRule []interface{}
	for _, callerItem := range caller {
		callerRule = append(callerRule, callerItem)
	}

	logs, sub, err := _ArbDebug.contract.FilterLogs(opts, "Mixed", flagRule, valueRule, callerRule)
	if err != nil {
		return nil, err
	}
	return &ArbDebugMixedIterator{contract: _ArbDebug.contract, event: "Mixed", logs: logs, sub: sub}, nil
}

// WatchMixed is a free log subscription operation binding the contract event 0xa6059246508753631072a6a59c1127af99d3f4cc0f8d6370d4fae122b1dd4eaf.
//
// Solidity: event Mixed(bool indexed flag, bool not, bytes32 indexed value, address conn, address indexed caller)
func (_ArbDebug *ArbDebugFilterer) WatchMixed(opts *bind.WatchOpts, sink chan<- *ArbDebugMixed, flag []bool, value [][32]byte, caller []common.Address) (event.Subscription, error) {

	var flagRule []interface{}
	for _, flagItem := range flag {
		flagRule = append(flagRule, flagItem)
	}

	var valueRule []interface{}
	for _, valueItem := range value {
		valueRule = append(valueRule, valueItem)
	}

	var callerRule []interface{}
	for _, callerItem := range caller {
		callerRule = append(callerRule, callerItem)
	}

	logs, sub, err := _ArbDebug.contract.WatchLogs(opts, "Mixed", flagRule, valueRule, callerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ArbDebugMixed)
				if err := _ArbDebug.contract.UnpackLog(event, "Mixed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMixed is a log parse operation binding the contract event 0xa6059246508753631072a6a59c1127af99d3f4cc0f8d6370d4fae122b1dd4eaf.
//
// Solidity: event Mixed(bool indexed flag, bool not, bytes32 indexed value, address conn, address indexed caller)
func (_ArbDebug *ArbDebugFilterer) ParseMixed(log types.Log) (*ArbDebugMixed, error) {
	event := new(ArbDebugMixed)
	if err := _ArbDebug.contract.UnpackLog(event, "Mixed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ArbDebugStoreIterator is returned from FilterStore and is used to iterate over the raw logs and unpacked data for Store events raised by the ArbDebug contract.
type ArbDebugStoreIterator struct {
	Event *ArbDebugStore // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ArbDebugStoreIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ArbDebugStore)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ArbDebugStore)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ArbDebugStoreIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ArbDebugStoreIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ArbDebugStore represents a Store event raised by the ArbDebug contract.
type ArbDebugStore struct {
	Flag   bool
	Field  common.Address
	Number *big.Int
	Value  [32]byte
	Store  []byte
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterStore is a free log retrieval operation binding the contract event 0x9be442d880b83e5d6db765f303a0602546662e34a066734a19a7ee929c028d95.
//
// Solidity: event Store(bool indexed flag, address indexed field, uint24 number, bytes32 value, bytes store)
func (_ArbDebug *ArbDebugFilterer) FilterStore(opts *bind.FilterOpts, flag []bool, field []common.Address) (*ArbDebugStoreIterator, error) {

	var flagRule []interface{}
	for _, flagItem := range flag {
		flagRule = append(flagRule, flagItem)
	}
	var fieldRule []interface{}
	for _, fieldItem := range field {
		fieldRule = append(fieldRule, fieldItem)
	}

	logs, sub, err := _ArbDebug.contract.FilterLogs(opts, "Store", flagRule, fieldRule)
	if err != nil {
		return nil, err
	}
	return &ArbDebugStoreIterator{contract: _ArbDebug.contract, event: "Store", logs: logs, sub: sub}, nil
}

// WatchStore is a free log subscription operation binding the contract event 0x9be442d880b83e5d6db765f303a0602546662e34a066734a19a7ee929c028d95.
//
// Solidity: event Store(bool indexed flag, address indexed field, uint24 number, bytes32 value, bytes store)
func (_ArbDebug *ArbDebugFilterer) WatchStore(opts *bind.WatchOpts, sink chan<- *ArbDebugStore, flag []bool, field []common.Address) (event.Subscription, error) {

	var flagRule []interface{}
	for _, flagItem := range flag {
		flagRule = append(flagRule, flagItem)
	}
	var fieldRule []interface{}
	for _, fieldItem := range field {
		fieldRule = append(fieldRule, fieldItem)
	}

	logs, sub, err := _ArbDebug.contract.WatchLogs(opts, "Store", flagRule, fieldRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ArbDebugStore)
				if err := _ArbDebug.contract.UnpackLog(event, "Store", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStore is a log parse operation binding the contract event 0x9be442d880b83e5d6db765f303a0602546662e34a066734a19a7ee929c028d95.
//
// Solidity: event Store(bool indexed flag, address indexed field, uint24 number, bytes32 value, bytes store)
func (_ArbDebug *ArbDebugFilterer) ParseStore(log types.Log) (*ArbDebugStore, error) {
	event := new(ArbDebugStore)
	if err := _ArbDebug.contract.UnpackLog(event, "Store", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ArbFunctionTableMetaData contains all meta data concerning the ArbFunctionTable contract.
var ArbFunctionTableMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"get\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"size\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"buf\",\"type\":\"bytes\"}],\"name\":\"upload\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// ArbFunctionTableABI is the input ABI used to generate the binding from.
// Deprecated: Use ArbFunctionTableMetaData.ABI instead.
var ArbFunctionTableABI = ArbFunctionTableMetaData.ABI

// ArbFunctionTable is an auto generated Go binding around an Ethereum contract.
type ArbFunctionTable struct {
	ArbFunctionTableCaller     // Read-only binding to the contract
	ArbFunctionTableTransactor // Write-only binding to the contract
	ArbFunctionTableFilterer   // Log filterer for contract events
}

// ArbFunctionTableCaller is an auto generated read-only Go binding around an Ethereum contract.
type ArbFunctionTableCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ArbFunctionTableTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ArbFunctionTableTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ArbFunctionTableFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ArbFunctionTableFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ArbFunctionTableSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ArbFunctionTableSession struct {
	Contract     *ArbFunctionTable // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ArbFunctionTableCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ArbFunctionTableCallerSession struct {
	Contract *ArbFunctionTableCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// ArbFunctionTableTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ArbFunctionTableTransactorSession struct {
	Contract     *ArbFunctionTableTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// ArbFunctionTableRaw is an auto generated low-level Go binding around an Ethereum contract.
type ArbFunctionTableRaw struct {
	Contract *ArbFunctionTable // Generic contract binding to access the raw methods on
}

// ArbFunctionTableCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ArbFunctionTableCallerRaw struct {
	Contract *ArbFunctionTableCaller // Generic read-only contract binding to access the raw methods on
}

// ArbFunctionTableTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ArbFunctionTableTransactorRaw struct {
	Contract *ArbFunctionTableTransactor // Generic write-only contract binding to access the raw methods on
}

// NewArbFunctionTable creates a new instance of ArbFunctionTable, bound to a specific deployed contract.
func NewArbFunctionTable(address common.Address, backend bind.ContractBackend) (*ArbFunctionTable, error) {
	contract, err := bindArbFunctionTable(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ArbFunctionTable{ArbFunctionTableCaller: ArbFunctionTableCaller{contract: contract}, ArbFunctionTableTransactor: ArbFunctionTableTransactor{contract: contract}, ArbFunctionTableFilterer: ArbFunctionTableFilterer{contract: contract}}, nil
}

// NewArbFunctionTableCaller creates a new read-only instance of ArbFunctionTable, bound to a specific deployed contract.
func NewArbFunctionTableCaller(address common.Address, caller bind.ContractCaller) (*ArbFunctionTableCaller, error) {
	contract, err := bindArbFunctionTable(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ArbFunctionTableCaller{contract: contract}, nil
}

// NewArbFunctionTableTransactor creates a new write-only instance of ArbFunctionTable, bound to a specific deployed contract.
func NewArbFunctionTableTransactor(address common.Address, transactor bind.ContractTransactor) (*ArbFunctionTableTransactor, error) {
	contract, err := bindArbFunctionTable(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ArbFunctionTableTransactor{contract: contract}, nil
}

// NewArbFunctionTableFilterer creates a new log filterer instance of ArbFunctionTable, bound to a specific deployed contract.
func NewArbFunctionTableFilterer(address common.Address, filterer bind.ContractFilterer) (*ArbFunctionTableFilterer, error) {
	contract, err := bindArbFunctionTable(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ArbFunctionTableFilterer{contract: contract}, nil
}

// bindArbFunctionTable binds a generic wrapper to an already deployed contract.
func bindArbFunctionTable(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ArbFunctionTableMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ArbFunctionTable *ArbFunctionTableRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ArbFunctionTable.Contract.ArbFunctionTableCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ArbFunctionTable *ArbFunctionTableRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ArbFunctionTable.Contract.ArbFunctionTableTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ArbFunctionTable *ArbFunctionTableRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ArbFunctionTable.Contract.ArbFunctionTableTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ArbFunctionTable *ArbFunctionTableCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ArbFunctionTable.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ArbFunctionTable *ArbFunctionTableTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ArbFunctionTable.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ArbFunctionTable *ArbFunctionTableTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ArbFunctionTable.Contract.contract.Transact(opts, method, params...)
}

// Get is a free data retrieval call binding the contract method 0xb464631b.
//
// Solidity: function get(address addr, uint256 index) view returns(uint256, bool, uint256)
func (_ArbFunctionTable *ArbFunctionTableCaller) Get(opts *bind.CallOpts, addr common.Address, index *big.Int) (*big.Int, bool, *big.Int, error) {
	var out []interface{}
	err := _ArbFunctionTable.contract.Call(opts, &out, "get", addr, index)

	if err != nil {
		return *new(*big.Int), *new(bool), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	out1 := *abi.ConvertType(out[1], new(bool)).(*bool)
	out2 := *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)

	return out0, out1, out2, err

}

// Get is a free data retrieval call binding the contract method 0xb464631b.
//
// Solidity: function get(address addr, uint256 index) view returns(uint256, bool, uint256)
func (_ArbFunctionTable *ArbFunctionTableSession) Get(addr common.Address, index *big.Int) (*big.Int, bool, *big.Int, error) {
	return _ArbFunctionTable.Contract.Get(&_ArbFunctionTable.CallOpts, addr, index)
}

// Get is a free data retrieval call binding the contract method 0xb464631b.
//
// Solidity: function get(address addr, uint256 index) view returns(uint256, bool, uint256)
func (_ArbFunctionTable *ArbFunctionTableCallerSession) Get(addr common.Address, index *big.Int) (*big.Int, bool, *big.Int, error) {
	return _ArbFunctionTable.Contract.Get(&_ArbFunctionTable.CallOpts, addr, index)
}

// Size is a free data retrieval call binding the contract method 0x88987068.
//
// Solidity: function size(address addr) view returns(uint256)
func (_ArbFunctionTable *ArbFunctionTableCaller) Size(opts *bind.CallOpts, addr common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ArbFunctionTable.contract.Call(opts, &out, "size", addr)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Size is a free data retrieval call binding the contract method 0x88987068.
//
// Solidity: function size(address addr) view returns(uint256)
func (_ArbFunctionTable *ArbFunctionTableSession) Size(addr common.Address) (*big.Int, error) {
	return _ArbFunctionTable.Contract.Size(&_ArbFunctionTable.CallOpts, addr)
}

// Size is a free data retrieval call binding the contract method 0x88987068.
//
// Solidity: function size(address addr) view returns(uint256)
func (_ArbFunctionTable *ArbFunctionTableCallerSession) Size(addr common.Address) (*big.Int, error) {
	return _ArbFunctionTable.Contract.Size(&_ArbFunctionTable.CallOpts, addr)
}

// Upload is a paid mutator transaction binding the contract method 0xce2ae159.
//
// Solidity: function upload(bytes buf) returns()
func (_ArbFunctionTable *ArbFunctionTableTransactor) Upload(opts *bind.TransactOpts, buf []byte) (*types.Transaction, error) {
	return _ArbFunctionTable.contract.Transact(opts, "upload", buf)
}

// Upload is a paid mutator transaction binding the contract method 0xce2ae159.
//
// Solidity: function upload(bytes buf) returns()
func (_ArbFunctionTable *ArbFunctionTableSession) Upload(buf []byte) (*types.Transaction, error) {
	return _ArbFunctionTable.Contract.Upload(&_ArbFunctionTable.TransactOpts, buf)
}

// Upload is a paid mutator transaction binding the contract method 0xce2ae159.
//
// Solidity: function upload(bytes buf) returns()
func (_ArbFunctionTable *ArbFunctionTableTransactorSession) Upload(buf []byte) (*types.Transaction, error) {
	return _ArbFunctionTable.Contract.Upload(&_ArbFunctionTable.TransactOpts, buf)
}

// ArbGasInfoMetaData contains all meta data concerning the ArbGasInfo contract.
var ArbGasInfoMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"getAmortizedCostCapBips\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentTxL1GasFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGasAccountingParams\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGasBacklog\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGasBacklogTolerance\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getL1BaseFeeEstimate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getL1BaseFeeEstimateInertia\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getL1FeesAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getL1GasPriceEstimate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getL1PricingEquilibrationUnits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getL1PricingFundsDueForRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getL1PricingSurplus\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getL1PricingUnitsSinceUpdate\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getL1RewardRate\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getL1RewardRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastL1PricingSurplus\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastL1PricingUpdateTime\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinimumGasPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPerBatchGasCharge\",\"outputs\":[{\"internalType\":\"int64\",\"name\":\"\",\"type\":\"int64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPricesInArbGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"aggregator\",\"type\":\"address\"}],\"name\":\"getPricesInArbGasWithAggregator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPricesInWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"aggregator\",\"type\":\"address\"}],\"name\":\"getPricesInWeiWithAggregator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPricingInertia\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
}

// ArbGasInfoABI is the input ABI used to generate the binding from.
// Deprecated: Use ArbGasInfoMetaData.ABI instead.
var ArbGasInfoABI = ArbGasInfoMetaData.ABI

// ArbGasInfo is an auto generated Go binding around an Ethereum contract.
type ArbGasInfo struct {
	ArbGasInfoCaller     // Read-only binding to the contract
	ArbGasInfoTransactor // Write-only binding to the contract
	ArbGasInfoFilterer   // Log filterer for contract events
}

// ArbGasInfoCaller is an auto generated read-only Go binding around an Ethereum contract.
type ArbGasInfoCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ArbGasInfoTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ArbGasInfoTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ArbGasInfoFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ArbGasInfoFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ArbGasInfoSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ArbGasInfoSession struct {
	Contract     *ArbGasInfo       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ArbGasInfoCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ArbGasInfoCallerSession struct {
	Contract *ArbGasInfoCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// ArbGasInfoTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ArbGasInfoTransactorSession struct {
	Contract     *ArbGasInfoTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// ArbGasInfoRaw is an auto generated low-level Go binding around an Ethereum contract.
type ArbGasInfoRaw struct {
	Contract *ArbGasInfo // Generic contract binding to access the raw methods on
}

// ArbGasInfoCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ArbGasInfoCallerRaw struct {
	Contract *ArbGasInfoCaller // Generic read-only contract binding to access the raw methods on
}

// ArbGasInfoTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ArbGasInfoTransactorRaw struct {
	Contract *ArbGasInfoTransactor // Generic write-only contract binding to access the raw methods on
}

// NewArbGasInfo creates a new instance of ArbGasInfo, bound to a specific deployed contract.
func NewArbGasInfo(address common.Address, backend bind.ContractBackend) (*ArbGasInfo, error) {
	contract, err := bindArbGasInfo(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ArbGasInfo{ArbGasInfoCaller: ArbGasInfoCaller{contract: contract}, ArbGasInfoTransactor: ArbGasInfoTransactor{contract: contract}, ArbGasInfoFilterer: ArbGasInfoFilterer{contract: contract}}, nil
}

// NewArbGasInfoCaller creates a new read-only instance of ArbGasInfo, bound to a specific deployed contract.
func NewArbGasInfoCaller(address common.Address, caller bind.ContractCaller) (*ArbGasInfoCaller, error) {
	contract, err := bindArbGasInfo(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ArbGasInfoCaller{contract: contract}, nil
}

// NewArbGasInfoTransactor creates a new write-only instance of ArbGasInfo, bound to a specific deployed contract.
func NewArbGasInfoTransactor(address common.Address, transactor bind.ContractTransactor) (*ArbGasInfoTransactor, error) {
	contract, err := bindArbGasInfo(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ArbGasInfoTransactor{contract: contract}, nil
}

// NewArbGasInfoFilterer creates a new log filterer instance of ArbGasInfo, bound to a specific deployed contract.
func NewArbGasInfoFilterer(address common.Address, filterer bind.ContractFilterer) (*ArbGasInfoFilterer, error) {
	contract, err := bindArbGasInfo(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ArbGasInfoFilterer{contract: contract}, nil
}

// bindArbGasInfo binds a generic wrapper to an already deployed contract.
func bindArbGasInfo(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ArbGasInfoMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ArbGasInfo *ArbGasInfoRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ArbGasInfo.Contract.ArbGasInfoCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ArbGasInfo *ArbGasInfoRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ArbGasInfo.Contract.ArbGasInfoTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ArbGasInfo *ArbGasInfoRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ArbGasInfo.Contract.ArbGasInfoTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ArbGasInfo *ArbGasInfoCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ArbGasInfo.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ArbGasInfo *ArbGasInfoTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ArbGasInfo.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ArbGasInfo *ArbGasInfoTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ArbGasInfo.Contract.contract.Transact(opts, method, params...)
}

// GetAmortizedCostCapBips is a free data retrieval call binding the contract method 0x7a7d6beb.
//
// Solidity: function getAmortizedCostCapBips() view returns(uint64)
func (_ArbGasInfo *ArbGasInfoCaller) GetAmortizedCostCapBips(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _ArbGasInfo.contract.Call(opts, &out, "getAmortizedCostCapBips")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// GetAmortizedCostCapBips is a free data retrieval call binding the contract method 0x7a7d6beb.
//
// Solidity: function getAmortizedCostCapBips() view returns(uint64)
func (_ArbGasInfo *ArbGasInfoSession) GetAmortizedCostCapBips() (uint64, error) {
	return _ArbGasInfo.Contract.GetAmortizedCostCapBips(&_ArbGasInfo.CallOpts)
}

// GetAmortizedCostCapBips is a free data retrieval call binding the contract method 0x7a7d6beb.
//
// Solidity: function getAmortizedCostCapBips() view returns(uint64)
func (_ArbGasInfo *ArbGasInfoCallerSession) GetAmortizedCostCapBips() (uint64, error) {
	return _ArbGasInfo.Contract.GetAmortizedCostCapBips(&_ArbGasInfo.CallOpts)
}

// GetCurrentTxL1GasFees is a free data retrieval call binding the contract method 0xc6f7de0e.
//
// Solidity: function getCurrentTxL1GasFees() view returns(uint256)
func (_ArbGasInfo *ArbGasInfoCaller) GetCurrentTxL1GasFees(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ArbGasInfo.contract.Call(opts, &out, "getCurrentTxL1GasFees")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetCurrentTxL1GasFees is a free data retrieval call binding the contract method 0xc6f7de0e.
//
// Solidity: function getCurrentTxL1GasFees() view returns(uint256)
func (_ArbGasInfo *ArbGasInfoSession) GetCurrentTxL1GasFees() (*big.Int, error) {
	return _ArbGasInfo.Contract.GetCurrentTxL1GasFees(&_ArbGasInfo.CallOpts)
}

// GetCurrentTxL1GasFees is a free data retrieval call binding the contract method 0xc6f7de0e.
//
// Solidity: function getCurrentTxL1GasFees() view returns(uint256)
func (_ArbGasInfo *ArbGasInfoCallerSession) GetCurrentTxL1GasFees() (*big.Int, error) {
	return _ArbGasInfo.Contract.GetCurrentTxL1GasFees(&_ArbGasInfo.CallOpts)
}

// GetGasAccountingParams is a free data retrieval call binding the contract method 0x612af178.
//
// Solidity: function getGasAccountingParams() view returns(uint256, uint256, uint256)
func (_ArbGasInfo *ArbGasInfoCaller) GetGasAccountingParams(opts *bind.CallOpts) (*big.Int, *big.Int, *big.Int, error) {
	var out []interface{}
	err := _ArbGasInfo.contract.Call(opts, &out, "getGasAccountingParams")

	if err != nil {
		return *new(*big.Int), *new(*big.Int), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	out2 := *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)

	return out0, out1, out2, err

}

// GetGasAccountingParams is a free data retrieval call binding the contract method 0x612af178.
//
// Solidity: function getGasAccountingParams() view returns(uint256, uint256, uint256)
func (_ArbGasInfo *ArbGasInfoSession) GetGasAccountingParams() (*big.Int, *big.Int, *big.Int, error) {
	return _ArbGasInfo.Contract.GetGasAccountingParams(&_ArbGasInfo.CallOpts)
}

// GetGasAccountingParams is a free data retrieval call binding the contract method 0x612af178.
//
// Solidity: function getGasAccountingParams() view returns(uint256, uint256, uint256)
func (_ArbGasInfo *ArbGasInfoCallerSession) GetGasAccountingParams() (*big.Int, *big.Int, *big.Int, error) {
	return _ArbGasInfo.Contract.GetGasAccountingParams(&_ArbGasInfo.CallOpts)
}

// GetGasBacklog is a free data retrieval call binding the contract method 0x1d5b5c20.
//
// Solidity: function getGasBacklog() view returns(uint64)
func (_ArbGasInfo *ArbGasInfoCaller) GetGasBacklog(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _ArbGasInfo.contract.Call(opts, &out, "getGasBacklog")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// GetGasBacklog is a free data retrieval call binding the contract method 0x1d5b5c20.
//
// Solidity: function getGasBacklog() view returns(uint64)
func (_ArbGasInfo *ArbGasInfoSession) GetGasBacklog() (uint64, error) {
	return _ArbGasInfo.Contract.GetGasBacklog(&_ArbGasInfo.CallOpts)
}

// GetGasBacklog is a free data retrieval call binding the contract method 0x1d5b5c20.
//
// Solidity: function getGasBacklog() view returns(uint64)
func (_ArbGasInfo *ArbGasInfoCallerSession) GetGasBacklog() (uint64, error) {
	return _ArbGasInfo.Contract.GetGasBacklog(&_ArbGasInfo.CallOpts)
}

// GetGasBacklogTolerance is a free data retrieval call binding the contract method 0x25754f91.
//
// Solidity: function getGasBacklogTolerance() view returns(uint64)
func (_ArbGasInfo *ArbGasInfoCaller) GetGasBacklogTolerance(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _ArbGasInfo.contract.Call(opts, &out, "getGasBacklogTolerance")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// GetGasBacklogTolerance is a free data retrieval call binding the contract method 0x25754f91.
//
// Solidity: function getGasBacklogTolerance() view returns(uint64)
func (_ArbGasInfo *ArbGasInfoSession) GetGasBacklogTolerance() (uint64, error) {
	return _ArbGasInfo.Contract.GetGasBacklogTolerance(&_ArbGasInfo.CallOpts)
}

// GetGasBacklogTolerance is a free data retrieval call binding the contract method 0x25754f91.
//
// Solidity: function getGasBacklogTolerance() view returns(uint64)
func (_ArbGasInfo *ArbGasInfoCallerSession) GetGasBacklogTolerance() (uint64, error) {
	return _ArbGasInfo.Contract.GetGasBacklogTolerance(&_ArbGasInfo.CallOpts)
}

// GetL1BaseFeeEstimate is a free data retrieval call binding the contract method 0xf5d6ded7.
//
// Solidity: function getL1BaseFeeEstimate() view returns(uint256)
func (_ArbGasInfo *ArbGasInfoCaller) GetL1BaseFeeEstimate(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ArbGasInfo.contract.Call(opts, &out, "getL1BaseFeeEstimate")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetL1BaseFeeEstimate is a free data retrieval call binding the contract method 0xf5d6ded7.
//
// Solidity: function getL1BaseFeeEstimate() view returns(uint256)
func (_ArbGasInfo *ArbGasInfoSession) GetL1BaseFeeEstimate() (*big.Int, error) {
	return _ArbGasInfo.Contract.GetL1BaseFeeEstimate(&_ArbGasInfo.CallOpts)
}

// GetL1BaseFeeEstimate is a free data retrieval call binding the contract method 0xf5d6ded7.
//
// Solidity: function getL1BaseFeeEstimate() view returns(uint256)
func (_ArbGasInfo *ArbGasInfoCallerSession) GetL1BaseFeeEstimate() (*big.Int, error) {
	return _ArbGasInfo.Contract.GetL1BaseFeeEstimate(&_ArbGasInfo.CallOpts)
}

// GetL1BaseFeeEstimateInertia is a free data retrieval call binding the contract method 0x29eb31ee.
//
// Solidity: function getL1BaseFeeEstimateInertia() view returns(uint64)
func (_ArbGasInfo *ArbGasInfoCaller) GetL1BaseFeeEstimateInertia(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _ArbGasInfo.contract.Call(opts, &out, "getL1BaseFeeEstimateInertia")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// GetL1BaseFeeEstimateInertia is a free data retrieval call binding the contract method 0x29eb31ee.
//
// Solidity: function getL1BaseFeeEstimateInertia() view returns(uint64)
func (_ArbGasInfo *ArbGasInfoSession) GetL1BaseFeeEstimateInertia() (uint64, error) {
	return _ArbGasInfo.Contract.GetL1BaseFeeEstimateInertia(&_ArbGasInfo.CallOpts)
}

// GetL1BaseFeeEstimateInertia is a free data retrieval call binding the contract method 0x29eb31ee.
//
// Solidity: function getL1BaseFeeEstimateInertia() view returns(uint64)
func (_ArbGasInfo *ArbGasInfoCallerSession) GetL1BaseFeeEstimateInertia() (uint64, error) {
	return _ArbGasInfo.Contract.GetL1BaseFeeEstimateInertia(&_ArbGasInfo.CallOpts)
}

// GetL1FeesAvailable is a free data retrieval call binding the contract method 0x5b39d23c.
//
// Solidity: function getL1FeesAvailable() view returns(uint256)
func (_ArbGasInfo *ArbGasInfoCaller) GetL1FeesAvailable(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ArbGasInfo.contract.Call(opts, &out, "getL1FeesAvailable")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetL1FeesAvailable is a free data retrieval call binding the contract method 0x5b39d23c.
//
// Solidity: function getL1FeesAvailable() view returns(uint256)
func (_ArbGasInfo *ArbGasInfoSession) GetL1FeesAvailable() (*big.Int, error) {
	return _ArbGasInfo.Contract.GetL1FeesAvailable(&_ArbGasInfo.CallOpts)
}

// GetL1FeesAvailable is a free data retrieval call binding the contract method 0x5b39d23c.
//
// Solidity: function getL1FeesAvailable() view returns(uint256)
func (_ArbGasInfo *ArbGasInfoCallerSession) GetL1FeesAvailable() (*big.Int, error) {
	return _ArbGasInfo.Contract.GetL1FeesAvailable(&_ArbGasInfo.CallOpts)
}

// GetL1GasPriceEstimate is a free data retrieval call binding the contract method 0x055f362f.
//
// Solidity: function getL1GasPriceEstimate() view returns(uint256)
func (_ArbGasInfo *ArbGasInfoCaller) GetL1GasPriceEstimate(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ArbGasInfo.contract.Call(opts, &out, "getL1GasPriceEstimate")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetL1GasPriceEstimate is a free data retrieval call binding the contract method 0x055f362f.
//
// Solidity: function getL1GasPriceEstimate() view returns(uint256)
func (_ArbGasInfo *ArbGasInfoSession) GetL1GasPriceEstimate() (*big.Int, error) {
	return _ArbGasInfo.Contract.GetL1GasPriceEstimate(&_ArbGasInfo.CallOpts)
}

// GetL1GasPriceEstimate is a free data retrieval call binding the contract method 0x055f362f.
//
// Solidity: function getL1GasPriceEstimate() view returns(uint256)
func (_ArbGasInfo *ArbGasInfoCallerSession) GetL1GasPriceEstimate() (*big.Int, error) {
	return _ArbGasInfo.Contract.GetL1GasPriceEstimate(&_ArbGasInfo.CallOpts)
}

// GetL1PricingEquilibrationUnits is a free data retrieval call binding the contract method 0xad26ce90.
//
// Solidity: function getL1PricingEquilibrationUnits() view returns(uint256)
func (_ArbGasInfo *ArbGasInfoCaller) GetL1PricingEquilibrationUnits(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ArbGasInfo.contract.Call(opts, &out, "getL1PricingEquilibrationUnits")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetL1PricingEquilibrationUnits is a free data retrieval call binding the contract method 0xad26ce90.
//
// Solidity: function getL1PricingEquilibrationUnits() view returns(uint256)
func (_ArbGasInfo *ArbGasInfoSession) GetL1PricingEquilibrationUnits() (*big.Int, error) {
	return _ArbGasInfo.Contract.GetL1PricingEquilibrationUnits(&_ArbGasInfo.CallOpts)
}

// GetL1PricingEquilibrationUnits is a free data retrieval call binding the contract method 0xad26ce90.
//
// Solidity: function getL1PricingEquilibrationUnits() view returns(uint256)
func (_ArbGasInfo *ArbGasInfoCallerSession) GetL1PricingEquilibrationUnits() (*big.Int, error) {
	return _ArbGasInfo.Contract.GetL1PricingEquilibrationUnits(&_ArbGasInfo.CallOpts)
}

// GetL1PricingFundsDueForRewards is a free data retrieval call binding the contract method 0x963d6002.
//
// Solidity: function getL1PricingFundsDueForRewards() view returns(uint256)
func (_ArbGasInfo *ArbGasInfoCaller) GetL1PricingFundsDueForRewards(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ArbGasInfo.contract.Call(opts, &out, "getL1PricingFundsDueForRewards")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetL1PricingFundsDueForRewards is a free data retrieval call binding the contract method 0x963d6002.
//
// Solidity: function getL1PricingFundsDueForRewards() view returns(uint256)
func (_ArbGasInfo *ArbGasInfoSession) GetL1PricingFundsDueForRewards() (*big.Int, error) {
	return _ArbGasInfo.Contract.GetL1PricingFundsDueForRewards(&_ArbGasInfo.CallOpts)
}

// GetL1PricingFundsDueForRewards is a free data retrieval call binding the contract method 0x963d6002.
//
// Solidity: function getL1PricingFundsDueForRewards() view returns(uint256)
func (_ArbGasInfo *ArbGasInfoCallerSession) GetL1PricingFundsDueForRewards() (*big.Int, error) {
	return _ArbGasInfo.Contract.GetL1PricingFundsDueForRewards(&_ArbGasInfo.CallOpts)
}

// GetL1PricingSurplus is a free data retrieval call binding the contract method 0x520acdd7.
//
// Solidity: function getL1PricingSurplus() view returns(int256)
func (_ArbGasInfo *ArbGasInfoCaller) GetL1PricingSurplus(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ArbGasInfo.contract.Call(opts, &out, "getL1PricingSurplus")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetL1PricingSurplus is a free data retrieval call binding the contract method 0x520acdd7.
//
// Solidity: function getL1PricingSurplus() view returns(int256)
func (_ArbGasInfo *ArbGasInfoSession) GetL1PricingSurplus() (*big.Int, error) {
	return _ArbGasInfo.Contract.GetL1PricingSurplus(&_ArbGasInfo.CallOpts)
}

// GetL1PricingSurplus is a free data retrieval call binding the contract method 0x520acdd7.
//
// Solidity: function getL1PricingSurplus() view returns(int256)
func (_ArbGasInfo *ArbGasInfoCallerSession) GetL1PricingSurplus() (*big.Int, error) {
	return _ArbGasInfo.Contract.GetL1PricingSurplus(&_ArbGasInfo.CallOpts)
}

// GetL1PricingUnitsSinceUpdate is a free data retrieval call binding the contract method 0xeff01306.
//
// Solidity: function getL1PricingUnitsSinceUpdate() view returns(uint64)
func (_ArbGasInfo *ArbGasInfoCaller) GetL1PricingUnitsSinceUpdate(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _ArbGasInfo.contract.Call(opts, &out, "getL1PricingUnitsSinceUpdate")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// GetL1PricingUnitsSinceUpdate is a free data retrieval call binding the contract method 0xeff01306.
//
// Solidity: function getL1PricingUnitsSinceUpdate() view returns(uint64)
func (_ArbGasInfo *ArbGasInfoSession) GetL1PricingUnitsSinceUpdate() (uint64, error) {
	return _ArbGasInfo.Contract.GetL1PricingUnitsSinceUpdate(&_ArbGasInfo.CallOpts)
}

// GetL1PricingUnitsSinceUpdate is a free data retrieval call binding the contract method 0xeff01306.
//
// Solidity: function getL1PricingUnitsSinceUpdate() view returns(uint64)
func (_ArbGasInfo *ArbGasInfoCallerSession) GetL1PricingUnitsSinceUpdate() (uint64, error) {
	return _ArbGasInfo.Contract.GetL1PricingUnitsSinceUpdate(&_ArbGasInfo.CallOpts)
}

// GetL1RewardRate is a free data retrieval call binding the contract method 0x8a5b1d28.
//
// Solidity: function getL1RewardRate() view returns(uint64)
func (_ArbGasInfo *ArbGasInfoCaller) GetL1RewardRate(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _ArbGasInfo.contract.Call(opts, &out, "getL1RewardRate")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// GetL1RewardRate is a free data retrieval call binding the contract method 0x8a5b1d28.
//
// Solidity: function getL1RewardRate() view returns(uint64)
func (_ArbGasInfo *ArbGasInfoSession) GetL1RewardRate() (uint64, error) {
	return _ArbGasInfo.Contract.GetL1RewardRate(&_ArbGasInfo.CallOpts)
}

// GetL1RewardRate is a free data retrieval call binding the contract method 0x8a5b1d28.
//
// Solidity: function getL1RewardRate() view returns(uint64)
func (_ArbGasInfo *ArbGasInfoCallerSession) GetL1RewardRate() (uint64, error) {
	return _ArbGasInfo.Contract.GetL1RewardRate(&_ArbGasInfo.CallOpts)
}

// GetL1RewardRecipient is a free data retrieval call binding the contract method 0x9e6d7e31.
//
// Solidity: function getL1RewardRecipient() view returns(address)
func (_ArbGasInfo *ArbGasInfoCaller) GetL1RewardRecipient(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ArbGasInfo.contract.Call(opts, &out, "getL1RewardRecipient")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetL1RewardRecipient is a free data retrieval call binding the contract method 0x9e6d7e31.
//
// Solidity: function getL1RewardRecipient() view returns(address)
func (_ArbGasInfo *ArbGasInfoSession) GetL1RewardRecipient() (common.Address, error) {
	return _ArbGasInfo.Contract.GetL1RewardRecipient(&_ArbGasInfo.CallOpts)
}

// GetL1RewardRecipient is a free data retrieval call binding the contract method 0x9e6d7e31.
//
// Solidity: function getL1RewardRecipient() view returns(address)
func (_ArbGasInfo *ArbGasInfoCallerSession) GetL1RewardRecipient() (common.Address, error) {
	return _ArbGasInfo.Contract.GetL1RewardRecipient(&_ArbGasInfo.CallOpts)
}

// GetLastL1PricingSurplus is a free data retrieval call binding the contract method 0x2987d027.
//
// Solidity: function getLastL1PricingSurplus() view returns(int256)
func (_ArbGasInfo *ArbGasInfoCaller) GetLastL1PricingSurplus(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ArbGasInfo.contract.Call(opts, &out, "getLastL1PricingSurplus")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetLastL1PricingSurplus is a free data retrieval call binding the contract method 0x2987d027.
//
// Solidity: function getLastL1PricingSurplus() view returns(int256)
func (_ArbGasInfo *ArbGasInfoSession) GetLastL1PricingSurplus() (*big.Int, error) {
	return _ArbGasInfo.Contract.GetLastL1PricingSurplus(&_ArbGasInfo.CallOpts)
}

// GetLastL1PricingSurplus is a free data retrieval call binding the contract method 0x2987d027.
//
// Solidity: function getLastL1PricingSurplus() view returns(int256)
func (_ArbGasInfo *ArbGasInfoCallerSession) GetLastL1PricingSurplus() (*big.Int, error) {
	return _ArbGasInfo.Contract.GetLastL1PricingSurplus(&_ArbGasInfo.CallOpts)
}

// GetLastL1PricingUpdateTime is a free data retrieval call binding the contract method 0x138b47b4.
//
// Solidity: function getLastL1PricingUpdateTime() view returns(uint64)
func (_ArbGasInfo *ArbGasInfoCaller) GetLastL1PricingUpdateTime(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _ArbGasInfo.contract.Call(opts, &out, "getLastL1PricingUpdateTime")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// GetLastL1PricingUpdateTime is a free data retrieval call binding the contract method 0x138b47b4.
//
// Solidity: function getLastL1PricingUpdateTime() view returns(uint64)
func (_ArbGasInfo *ArbGasInfoSession) GetLastL1PricingUpdateTime() (uint64, error) {
	return _ArbGasInfo.Contract.GetLastL1PricingUpdateTime(&_ArbGasInfo.CallOpts)
}

// GetLastL1PricingUpdateTime is a free data retrieval call binding the contract method 0x138b47b4.
//
// Solidity: function getLastL1PricingUpdateTime() view returns(uint64)
func (_ArbGasInfo *ArbGasInfoCallerSession) GetLastL1PricingUpdateTime() (uint64, error) {
	return _ArbGasInfo.Contract.GetLastL1PricingUpdateTime(&_ArbGasInfo.CallOpts)
}

// GetMinimumGasPrice is a free data retrieval call binding the contract method 0xf918379a.
//
// Solidity: function getMinimumGasPrice() view returns(uint256)
func (_ArbGasInfo *ArbGasInfoCaller) GetMinimumGasPrice(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ArbGasInfo.contract.Call(opts, &out, "getMinimumGasPrice")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetMinimumGasPrice is a free data retrieval call binding the contract method 0xf918379a.
//
// Solidity: function getMinimumGasPrice() view returns(uint256)
func (_ArbGasInfo *ArbGasInfoSession) GetMinimumGasPrice() (*big.Int, error) {
	return _ArbGasInfo.Contract.GetMinimumGasPrice(&_ArbGasInfo.CallOpts)
}

// GetMinimumGasPrice is a free data retrieval call binding the contract method 0xf918379a.
//
// Solidity: function getMinimumGasPrice() view returns(uint256)
func (_ArbGasInfo *ArbGasInfoCallerSession) GetMinimumGasPrice() (*big.Int, error) {
	return _ArbGasInfo.Contract.GetMinimumGasPrice(&_ArbGasInfo.CallOpts)
}

// GetPerBatchGasCharge is a free data retrieval call binding the contract method 0x6ecca45a.
//
// Solidity: function getPerBatchGasCharge() view returns(int64)
func (_ArbGasInfo *ArbGasInfoCaller) GetPerBatchGasCharge(opts *bind.CallOpts) (int64, error) {
	var out []interface{}
	err := _ArbGasInfo.contract.Call(opts, &out, "getPerBatchGasCharge")

	if err != nil {
		return *new(int64), err
	}

	out0 := *abi.ConvertType(out[0], new(int64)).(*int64)

	return out0, err

}

// GetPerBatchGasCharge is a free data retrieval call binding the contract method 0x6ecca45a.
//
// Solidity: function getPerBatchGasCharge() view returns(int64)
func (_ArbGasInfo *ArbGasInfoSession) GetPerBatchGasCharge() (int64, error) {
	return _ArbGasInfo.Contract.GetPerBatchGasCharge(&_ArbGasInfo.CallOpts)
}

// GetPerBatchGasCharge is a free data retrieval call binding the contract method 0x6ecca45a.
//
// Solidity: function getPerBatchGasCharge() view returns(int64)
func (_ArbGasInfo *ArbGasInfoCallerSession) GetPerBatchGasCharge() (int64, error) {
	return _ArbGasInfo.Contract.GetPerBatchGasCharge(&_ArbGasInfo.CallOpts)
}

// GetPricesInArbGas is a free data retrieval call binding the contract method 0x02199f34.
//
// Solidity: function getPricesInArbGas() view returns(uint256, uint256, uint256)
func (_ArbGasInfo *ArbGasInfoCaller) GetPricesInArbGas(opts *bind.CallOpts) (*big.Int, *big.Int, *big.Int, error) {
	var out []interface{}
	err := _ArbGasInfo.contract.Call(opts, &out, "getPricesInArbGas")

	if err != nil {
		return *new(*big.Int), *new(*big.Int), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	out2 := *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)

	return out0, out1, out2, err

}

// GetPricesInArbGas is a free data retrieval call binding the contract method 0x02199f34.
//
// Solidity: function getPricesInArbGas() view returns(uint256, uint256, uint256)
func (_ArbGasInfo *ArbGasInfoSession) GetPricesInArbGas() (*big.Int, *big.Int, *big.Int, error) {
	return _ArbGasInfo.Contract.GetPricesInArbGas(&_ArbGasInfo.CallOpts)
}

// GetPricesInArbGas is a free data retrieval call binding the contract method 0x02199f34.
//
// Solidity: function getPricesInArbGas() view returns(uint256, uint256, uint256)
func (_ArbGasInfo *ArbGasInfoCallerSession) GetPricesInArbGas() (*big.Int, *big.Int, *big.Int, error) {
	return _ArbGasInfo.Contract.GetPricesInArbGas(&_ArbGasInfo.CallOpts)
}

// GetPricesInArbGasWithAggregator is a free data retrieval call binding the contract method 0x7a1ea732.
//
// Solidity: function getPricesInArbGasWithAggregator(address aggregator) view returns(uint256, uint256, uint256)
func (_ArbGasInfo *ArbGasInfoCaller) GetPricesInArbGasWithAggregator(opts *bind.CallOpts, aggregator common.Address) (*big.Int, *big.Int, *big.Int, error) {
	var out []interface{}
	err := _ArbGasInfo.contract.Call(opts, &out, "getPricesInArbGasWithAggregator", aggregator)

	if err != nil {
		return *new(*big.Int), *new(*big.Int), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	out2 := *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)

	return out0, out1, out2, err

}

// GetPricesInArbGasWithAggregator is a free data retrieval call binding the contract method 0x7a1ea732.
//
// Solidity: function getPricesInArbGasWithAggregator(address aggregator) view returns(uint256, uint256, uint256)
func (_ArbGasInfo *ArbGasInfoSession) GetPricesInArbGasWithAggregator(aggregator common.Address) (*big.Int, *big.Int, *big.Int, error) {
	return _ArbGasInfo.Contract.GetPricesInArbGasWithAggregator(&_ArbGasInfo.CallOpts, aggregator)
}

// GetPricesInArbGasWithAggregator is a free data retrieval call binding the contract method 0x7a1ea732.
//
// Solidity: function getPricesInArbGasWithAggregator(address aggregator) view returns(uint256, uint256, uint256)
func (_ArbGasInfo *ArbGasInfoCallerSession) GetPricesInArbGasWithAggregator(aggregator common.Address) (*big.Int, *big.Int, *big.Int, error) {
	return _ArbGasInfo.Contract.GetPricesInArbGasWithAggregator(&_ArbGasInfo.CallOpts, aggregator)
}

// GetPricesInWei is a free data retrieval call binding the contract method 0x41b247a8.
//
// Solidity: function getPricesInWei() view returns(uint256, uint256, uint256, uint256, uint256, uint256)
func (_ArbGasInfo *ArbGasInfoCaller) GetPricesInWei(opts *bind.CallOpts) (*big.Int, *big.Int, *big.Int, *big.Int, *big.Int, *big.Int, error) {
	var out []interface{}
	err := _ArbGasInfo.contract.Call(opts, &out, "getPricesInWei")

	if err != nil {
		return *new(*big.Int), *new(*big.Int), *new(*big.Int), *new(*big.Int), *new(*big.Int), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	out2 := *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	out3 := *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	out4 := *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)
	out5 := *abi.ConvertType(out[5], new(*big.Int)).(**big.Int)

	return out0, out1, out2, out3, out4, out5, err

}

// GetPricesInWei is a free data retrieval call binding the contract method 0x41b247a8.
//
// Solidity: function getPricesInWei() view returns(uint256, uint256, uint256, uint256, uint256, uint256)
func (_ArbGasInfo *ArbGasInfoSession) GetPricesInWei() (*big.Int, *big.Int, *big.Int, *big.Int, *big.Int, *big.Int, error) {
	return _ArbGasInfo.Contract.GetPricesInWei(&_ArbGasInfo.CallOpts)
}

// GetPricesInWei is a free data retrieval call binding the contract method 0x41b247a8.
//
// Solidity: function getPricesInWei() view returns(uint256, uint256, uint256, uint256, uint256, uint256)
func (_ArbGasInfo *ArbGasInfoCallerSession) GetPricesInWei() (*big.Int, *big.Int, *big.Int, *big.Int, *big.Int, *big.Int, error) {
	return _ArbGasInfo.Contract.GetPricesInWei(&_ArbGasInfo.CallOpts)
}

// GetPricesInWeiWithAggregator is a free data retrieval call binding the contract method 0xba9c916e.
//
// Solidity: function getPricesInWeiWithAggregator(address aggregator) view returns(uint256, uint256, uint256, uint256, uint256, uint256)
func (_ArbGasInfo *ArbGasInfoCaller) GetPricesInWeiWithAggregator(opts *bind.CallOpts, aggregator common.Address) (*big.Int, *big.Int, *big.Int, *big.Int, *big.Int, *big.Int, error) {
	var out []interface{}
	err := _ArbGasInfo.contract.Call(opts, &out, "getPricesInWeiWithAggregator", aggregator)

	if err != nil {
		return *new(*big.Int), *new(*big.Int), *new(*big.Int), *new(*big.Int), *new(*big.Int), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	out2 := *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	out3 := *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	out4 := *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)
	out5 := *abi.ConvertType(out[5], new(*big.Int)).(**big.Int)

	return out0, out1, out2, out3, out4, out5, err

}

// GetPricesInWeiWithAggregator is a free data retrieval call binding the contract method 0xba9c916e.
//
// Solidity: function getPricesInWeiWithAggregator(address aggregator) view returns(uint256, uint256, uint256, uint256, uint256, uint256)
func (_ArbGasInfo *ArbGasInfoSession) GetPricesInWeiWithAggregator(aggregator common.Address) (*big.Int, *big.Int, *big.Int, *big.Int, *big.Int, *big.Int, error) {
	return _ArbGasInfo.Contract.GetPricesInWeiWithAggregator(&_ArbGasInfo.CallOpts, aggregator)
}

// GetPricesInWeiWithAggregator is a free data retrieval call binding the contract method 0xba9c916e.
//
// Solidity: function getPricesInWeiWithAggregator(address aggregator) view returns(uint256, uint256, uint256, uint256, uint256, uint256)
func (_ArbGasInfo *ArbGasInfoCallerSession) GetPricesInWeiWithAggregator(aggregator common.Address) (*big.Int, *big.Int, *big.Int, *big.Int, *big.Int, *big.Int, error) {
	return _ArbGasInfo.Contract.GetPricesInWeiWithAggregator(&_ArbGasInfo.CallOpts, aggregator)
}

// GetPricingInertia is a free data retrieval call binding the contract method 0x3dfb45b9.
//
// Solidity: function getPricingInertia() view returns(uint64)
func (_ArbGasInfo *ArbGasInfoCaller) GetPricingInertia(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _ArbGasInfo.contract.Call(opts, &out, "getPricingInertia")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// GetPricingInertia is a free data retrieval call binding the contract method 0x3dfb45b9.
//
// Solidity: function getPricingInertia() view returns(uint64)
func (_ArbGasInfo *ArbGasInfoSession) GetPricingInertia() (uint64, error) {
	return _ArbGasInfo.Contract.GetPricingInertia(&_ArbGasInfo.CallOpts)
}

// GetPricingInertia is a free data retrieval call binding the contract method 0x3dfb45b9.
//
// Solidity: function getPricingInertia() view returns(uint64)
func (_ArbGasInfo *ArbGasInfoCallerSession) GetPricingInertia() (uint64, error) {
	return _ArbGasInfo.Contract.GetPricingInertia(&_ArbGasInfo.CallOpts)
}

// ArbInfoMetaData contains all meta data concerning the ArbInfo contract.
var ArbInfoMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getCode\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
}

// ArbInfoABI is the input ABI used to generate the binding from.
// Deprecated: Use ArbInfoMetaData.ABI instead.
var ArbInfoABI = ArbInfoMetaData.ABI

// ArbInfo is an auto generated Go binding around an Ethereum contract.
type ArbInfo struct {
	ArbInfoCaller     // Read-only binding to the contract
	ArbInfoTransactor // Write-only binding to the contract
	ArbInfoFilterer   // Log filterer for contract events
}

// ArbInfoCaller is an auto generated read-only Go binding around an Ethereum contract.
type ArbInfoCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ArbInfoTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ArbInfoTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ArbInfoFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ArbInfoFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ArbInfoSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ArbInfoSession struct {
	Contract     *ArbInfo          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ArbInfoCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ArbInfoCallerSession struct {
	Contract *ArbInfoCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// ArbInfoTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ArbInfoTransactorSession struct {
	Contract     *ArbInfoTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// ArbInfoRaw is an auto generated low-level Go binding around an Ethereum contract.
type ArbInfoRaw struct {
	Contract *ArbInfo // Generic contract binding to access the raw methods on
}

// ArbInfoCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ArbInfoCallerRaw struct {
	Contract *ArbInfoCaller // Generic read-only contract binding to access the raw methods on
}

// ArbInfoTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ArbInfoTransactorRaw struct {
	Contract *ArbInfoTransactor // Generic write-only contract binding to access the raw methods on
}

// NewArbInfo creates a new instance of ArbInfo, bound to a specific deployed contract.
func NewArbInfo(address common.Address, backend bind.ContractBackend) (*ArbInfo, error) {
	contract, err := bindArbInfo(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ArbInfo{ArbInfoCaller: ArbInfoCaller{contract: contract}, ArbInfoTransactor: ArbInfoTransactor{contract: contract}, ArbInfoFilterer: ArbInfoFilterer{contract: contract}}, nil
}

// NewArbInfoCaller creates a new read-only instance of ArbInfo, bound to a specific deployed contract.
func NewArbInfoCaller(address common.Address, caller bind.ContractCaller) (*ArbInfoCaller, error) {
	contract, err := bindArbInfo(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ArbInfoCaller{contract: contract}, nil
}

// NewArbInfoTransactor creates a new write-only instance of ArbInfo, bound to a specific deployed contract.
func NewArbInfoTransactor(address common.Address, transactor bind.ContractTransactor) (*ArbInfoTransactor, error) {
	contract, err := bindArbInfo(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ArbInfoTransactor{contract: contract}, nil
}

// NewArbInfoFilterer creates a new log filterer instance of ArbInfo, bound to a specific deployed contract.
func NewArbInfoFilterer(address common.Address, filterer bind.ContractFilterer) (*ArbInfoFilterer, error) {
	contract, err := bindArbInfo(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ArbInfoFilterer{contract: contract}, nil
}

// bindArbInfo binds a generic wrapper to an already deployed contract.
func bindArbInfo(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ArbInfoMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ArbInfo *ArbInfoRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ArbInfo.Contract.ArbInfoCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ArbInfo *ArbInfoRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ArbInfo.Contract.ArbInfoTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ArbInfo *ArbInfoRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ArbInfo.Contract.ArbInfoTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ArbInfo *ArbInfoCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ArbInfo.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ArbInfo *ArbInfoTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ArbInfo.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ArbInfo *ArbInfoTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ArbInfo.Contract.contract.Transact(opts, method, params...)
}

// GetBalance is a free data retrieval call binding the contract method 0xf8b2cb4f.
//
// Solidity: function getBalance(address account) view returns(uint256)
func (_ArbInfo *ArbInfoCaller) GetBalance(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ArbInfo.contract.Call(opts, &out, "getBalance", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetBalance is a free data retrieval call binding the contract method 0xf8b2cb4f.
//
// Solidity: function getBalance(address account) view returns(uint256)
func (_ArbInfo *ArbInfoSession) GetBalance(account common.Address) (*big.Int, error) {
	return _ArbInfo.Contract.GetBalance(&_ArbInfo.CallOpts, account)
}

// GetBalance is a free data retrieval call binding the contract method 0xf8b2cb4f.
//
// Solidity: function getBalance(address account) view returns(uint256)
func (_ArbInfo *ArbInfoCallerSession) GetBalance(account common.Address) (*big.Int, error) {
	return _ArbInfo.Contract.GetBalance(&_ArbInfo.CallOpts, account)
}

// GetCode is a free data retrieval call binding the contract method 0x7e105ce2.
//
// Solidity: function getCode(address account) view returns(bytes)
func (_ArbInfo *ArbInfoCaller) GetCode(opts *bind.CallOpts, account common.Address) ([]byte, error) {
	var out []interface{}
	err := _ArbInfo.contract.Call(opts, &out, "getCode", account)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// GetCode is a free data retrieval call binding the contract method 0x7e105ce2.
//
// Solidity: function getCode(address account) view returns(bytes)
func (_ArbInfo *ArbInfoSession) GetCode(account common.Address) ([]byte, error) {
	return _ArbInfo.Contract.GetCode(&_ArbInfo.CallOpts, account)
}

// GetCode is a free data retrieval call binding the contract method 0x7e105ce2.
//
// Solidity: function getCode(address account) view returns(bytes)
func (_ArbInfo *ArbInfoCallerSession) GetCode(account common.Address) ([]byte, error) {
	return _ArbInfo.Contract.GetCode(&_ArbInfo.CallOpts, account)
}

// ArbNativeTokenManagerMetaData contains all meta data concerning the ArbNativeTokenManager contract.
var ArbNativeTokenManagerMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnNativeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintNativeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NativeTokenBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NativeTokenMinted\",\"type\":\"event\"}]",
}

// ArbNativeTokenManagerABI is the input ABI used to generate the binding from.
// Deprecated: Use ArbNativeTokenManagerMetaData.ABI instead.
var ArbNativeTokenManagerABI = ArbNativeTokenManagerMetaData.ABI

// ArbNativeTokenManager is an auto generated Go binding around an Ethereum contract.
type ArbNativeTokenManager struct {
	ArbNativeTokenManagerCaller     // Read-only binding to the contract
	ArbNativeTokenManagerTransactor // Write-only binding to the contract
	ArbNativeTokenManagerFilterer   // Log filterer for contract events
}

// ArbNativeTokenManagerCaller is an auto generated read-only Go binding around an Ethereum contract.
type ArbNativeTokenManagerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ArbNativeTokenManagerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ArbNativeTokenManagerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ArbNativeTokenManagerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ArbNativeTokenManagerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ArbNativeTokenManagerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ArbNativeTokenManagerSession struct {
	Contract     *ArbNativeTokenManager // Generic contract binding to set the session for
	CallOpts     bind.CallOpts          // Call options to use throughout this session
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// ArbNativeTokenManagerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ArbNativeTokenManagerCallerSession struct {
	Contract *ArbNativeTokenManagerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                // Call options to use throughout this session
}

// ArbNativeTokenManagerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ArbNativeTokenManagerTransactorSession struct {
	Contract     *ArbNativeTokenManagerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                // Transaction auth options to use throughout this session
}

// ArbNativeTokenManagerRaw is an auto generated low-level Go binding around an Ethereum contract.
type ArbNativeTokenManagerRaw struct {
	Contract *ArbNativeTokenManager // Generic contract binding to access the raw methods on
}

// ArbNativeTokenManagerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ArbNativeTokenManagerCallerRaw struct {
	Contract *ArbNativeTokenManagerCaller // Generic read-only contract binding to access the raw methods on
}

// ArbNativeTokenManagerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ArbNativeTokenManagerTransactorRaw struct {
	Contract *ArbNativeTokenManagerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewArbNativeTokenManager creates a new instance of ArbNativeTokenManager, bound to a specific deployed contract.
func NewArbNativeTokenManager(address common.Address, backend bind.ContractBackend) (*ArbNativeTokenManager, error) {
	contract, err := bindArbNativeTokenManager(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ArbNativeTokenManager{ArbNativeTokenManagerCaller: ArbNativeTokenManagerCaller{contract: contract}, ArbNativeTokenManagerTransactor: ArbNativeTokenManagerTransactor{contract: contract}, ArbNativeTokenManagerFilterer: ArbNativeTokenManagerFilterer{contract: contract}}, nil
}

// NewArbNativeTokenManagerCaller creates a new read-only instance of ArbNativeTokenManager, bound to a specific deployed contract.
func NewArbNativeTokenManagerCaller(address common.Address, caller bind.ContractCaller) (*ArbNativeTokenManagerCaller, error) {
	contract, err := bindArbNativeTokenManager(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ArbNativeTokenManagerCaller{contract: contract}, nil
}

// NewArbNativeTokenManagerTransactor creates a new write-only instance of ArbNativeTokenManager, bound to a specific deployed contract.
func NewArbNativeTokenManagerTransactor(address common.Address, transactor bind.ContractTransactor) (*ArbNativeTokenManagerTransactor, error) {
	contract, err := bindArbNativeTokenManager(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ArbNativeTokenManagerTransactor{contract: contract}, nil
}

// NewArbNativeTokenManagerFilterer creates a new log filterer instance of ArbNativeTokenManager, bound to a specific deployed contract.
func NewArbNativeTokenManagerFilterer(address common.Address, filterer bind.ContractFilterer) (*ArbNativeTokenManagerFilterer, error) {
	contract, err := bindArbNativeTokenManager(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ArbNativeTokenManagerFilterer{contract: contract}, nil
}

// bindArbNativeTokenManager binds a generic wrapper to an already deployed contract.
func bindArbNativeTokenManager(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ArbNativeTokenManagerMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ArbNativeTokenManager *ArbNativeTokenManagerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ArbNativeTokenManager.Contract.ArbNativeTokenManagerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ArbNativeTokenManager *ArbNativeTokenManagerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ArbNativeTokenManager.Contract.ArbNativeTokenManagerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ArbNativeTokenManager *ArbNativeTokenManagerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ArbNativeTokenManager.Contract.ArbNativeTokenManagerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ArbNativeTokenManager *ArbNativeTokenManagerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ArbNativeTokenManager.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ArbNativeTokenManager *ArbNativeTokenManagerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ArbNativeTokenManager.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ArbNativeTokenManager *ArbNativeTokenManagerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ArbNativeTokenManager.Contract.contract.Transact(opts, method, params...)
}

// BurnNativeToken is a paid mutator transaction binding the contract method 0x1c679a3c.
//
// Solidity: function burnNativeToken(uint256 amount) returns()
func (_ArbNativeTokenManager *ArbNativeTokenManagerTransactor) BurnNativeToken(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _ArbNativeTokenManager.contract.Transact(opts, "burnNativeToken", amount)
}

// BurnNativeToken is a paid mutator transaction binding the contract method 0x1c679a3c.
//
// Solidity: function burnNativeToken(uint256 amount) returns()
func (_ArbNativeTokenManager *ArbNativeTokenManagerSession) BurnNativeToken(amount *big.Int) (*types.Transaction, error) {
	return _ArbNativeTokenManager.Contract.BurnNativeToken(&_ArbNativeTokenManager.TransactOpts, amount)
}

// BurnNativeToken is a paid mutator transaction binding the contract method 0x1c679a3c.
//
// Solidity: function burnNativeToken(uint256 amount) returns()
func (_ArbNativeTokenManager *ArbNativeTokenManagerTransactorSession) BurnNativeToken(amount *big.Int) (*types.Transaction, error) {
	return _ArbNativeTokenManager.Contract.BurnNativeToken(&_ArbNativeTokenManager.TransactOpts, amount)
}

// MintNativeToken is a paid mutator transaction binding the contract method 0xa6f0f7c7.
//
// Solidity: function mintNativeToken(uint256 amount) returns()
func (_ArbNativeTokenManager *ArbNativeTokenManagerTransactor) MintNativeToken(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _ArbNativeTokenManager.contract.Transact(opts, "mintNativeToken", amount)
}

// MintNativeToken is a paid mutator transaction binding the contract method 0xa6f0f7c7.
//
// Solidity: function mintNativeToken(uint256 amount) returns()
func (_ArbNativeTokenManager *ArbNativeTokenManagerSession) MintNativeToken(amount *big.Int) (*types.Transaction, error) {
	return _ArbNativeTokenManager.Contract.MintNativeToken(&_ArbNativeTokenManager.TransactOpts, amount)
}

// MintNativeToken is a paid mutator transaction binding the contract method 0xa6f0f7c7.
//
// Solidity: function mintNativeToken(uint256 amount) returns()
func (_ArbNativeTokenManager *ArbNativeTokenManagerTransactorSession) MintNativeToken(amount *big.Int) (*types.Transaction, error) {
	return _ArbNativeTokenManager.Contract.MintNativeToken(&_ArbNativeTokenManager.TransactOpts, amount)
}

// ArbNativeTokenManagerNativeTokenBurnedIterator is returned from FilterNativeTokenBurned and is used to iterate over the raw logs and unpacked data for NativeTokenBurned events raised by the ArbNativeTokenManager contract.
type ArbNativeTokenManagerNativeTokenBurnedIterator struct {
	Event *ArbNativeTokenManagerNativeTokenBurned // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ArbNativeTokenManagerNativeTokenBurnedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ArbNativeTokenManagerNativeTokenBurned)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ArbNativeTokenManagerNativeTokenBurned)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ArbNativeTokenManagerNativeTokenBurnedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ArbNativeTokenManagerNativeTokenBurnedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ArbNativeTokenManagerNativeTokenBurned represents a NativeTokenBurned event raised by the ArbNativeTokenManager contract.
type ArbNativeTokenManagerNativeTokenBurned struct {
	From   common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterNativeTokenBurned is a free log retrieval operation binding the contract event 0x6621d29e942b72554ce1c391fc298b578affcc2903f78810815ee9b78d1dd645.
//
// Solidity: event NativeTokenBurned(address indexed from, uint256 amount)
func (_ArbNativeTokenManager *ArbNativeTokenManagerFilterer) FilterNativeTokenBurned(opts *bind.FilterOpts, from []common.Address) (*ArbNativeTokenManagerNativeTokenBurnedIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _ArbNativeTokenManager.contract.FilterLogs(opts, "NativeTokenBurned", fromRule)
	if err != nil {
		return nil, err
	}
	return &ArbNativeTokenManagerNativeTokenBurnedIterator{contract: _ArbNativeTokenManager.contract, event: "NativeTokenBurned", logs: logs, sub: sub}, nil
}

// WatchNativeTokenBurned is a free log subscription operation binding the contract event 0x6621d29e942b72554ce1c391fc298b578affcc2903f78810815ee9b78d1dd645.
//
// Solidity: event NativeTokenBurned(address indexed from, uint256 amount)
func (_ArbNativeTokenManager *ArbNativeTokenManagerFilterer) WatchNativeTokenBurned(opts *bind.WatchOpts, sink chan<- *ArbNativeTokenManagerNativeTokenBurned, from []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _ArbNativeTokenManager.contract.WatchLogs(opts, "NativeTokenBurned", fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ArbNativeTokenManagerNativeTokenBurned)
				if err := _ArbNativeTokenManager.contract.UnpackLog(event, "NativeTokenBurned", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNativeTokenBurned is a log parse operation binding the contract event 0x6621d29e942b72554ce1c391fc298b578affcc2903f78810815ee9b78d1dd645.
//
// Solidity: event NativeTokenBurned(address indexed from, uint256 amount)
func (_ArbNativeTokenManager *ArbNativeTokenManagerFilterer) ParseNativeTokenBurned(log types.Log) (*ArbNativeTokenManagerNativeTokenBurned, error) {
	event := new(ArbNativeTokenManagerNativeTokenBurned)
	if err := _ArbNativeTokenManager.contract.UnpackLog(event, "NativeTokenBurned", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ArbNativeTokenManagerNativeTokenMintedIterator is returned from FilterNativeTokenMinted and is used to iterate over the raw logs and unpacked data for NativeTokenMinted events raised by the ArbNativeTokenManager contract.
type ArbNativeTokenManagerNativeTokenMintedIterator struct {
	Event *ArbNativeTokenManagerNativeTokenMinted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ArbNativeTokenManagerNativeTokenMintedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ArbNativeTokenManagerNativeTokenMinted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ArbNativeTokenManagerNativeTokenMinted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ArbNativeTokenManagerNativeTokenMintedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ArbNativeTokenManagerNativeTokenMintedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ArbNativeTokenManagerNativeTokenMinted represents a NativeTokenMinted event raised by the ArbNativeTokenManager contract.
type ArbNativeTokenManagerNativeTokenMinted struct {
	To     common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterNativeTokenMinted is a free log retrieval operation binding the contract event 0x31cb24d7d3d91b929a08221eba2a22aac2e21df26d5f1bcdc767547073c3a20b.
//
// Solidity: event NativeTokenMinted(address indexed to, uint256 amount)
func (_ArbNativeTokenManager *ArbNativeTokenManagerFilterer) FilterNativeTokenMinted(opts *bind.FilterOpts, to []common.Address) (*ArbNativeTokenManagerNativeTokenMintedIterator, error) {

	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ArbNativeTokenManager.contract.FilterLogs(opts, "NativeTokenMinted", toRule)
	if err != nil {
		return nil, err
	}
	return &ArbNativeTokenManagerNativeTokenMintedIterator{contract: _ArbNativeTokenManager.contract, event: "NativeTokenMinted", logs: logs, sub: sub}, nil
}

// WatchNativeTokenMinted is a free log subscription operation binding the contract event 0x31cb24d7d3d91b929a08221eba2a22aac2e21df26d5f1bcdc767547073c3a20b.
//
// Solidity: event NativeTokenMinted(address indexed to, uint256 amount)
func (_ArbNativeTokenManager *ArbNativeTokenManagerFilterer) WatchNativeTokenMinted(opts *bind.WatchOpts, sink chan<- *ArbNativeTokenManagerNativeTokenMinted, to []common.Address) (event.Subscription, error) {

	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ArbNativeTokenManager.contract.WatchLogs(opts, "NativeTokenMinted", toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ArbNativeTokenManagerNativeTokenMinted)
				if err := _ArbNativeTokenManager.contract.UnpackLog(event, "NativeTokenMinted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNativeTokenMinted is a log parse operation binding the contract event 0x31cb24d7d3d91b929a08221eba2a22aac2e21df26d5f1bcdc767547073c3a20b.
//
// Solidity: event NativeTokenMinted(address indexed to, uint256 amount)
func (_ArbNativeTokenManager *ArbNativeTokenManagerFilterer) ParseNativeTokenMinted(log types.Log) (*ArbNativeTokenManagerNativeTokenMinted, error) {
	event := new(ArbNativeTokenManagerNativeTokenMinted)
	if err := _ArbNativeTokenManager.contract.UnpackLog(event, "NativeTokenMinted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ArbOS11To32UpgradeTestMetaData contains all meta data concerning the ArbOS11To32UpgradeTest contract.
var ArbOS11To32UpgradeTestMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"mcopy\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"x\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561000f575f80fd5b5061014e8061001d5f395ff3fe608060405234801561000f575f80fd5b5060043610610029575f3560e01c806319b0cc231461002d575b5f80fd5b610035610047565b60405190815260200160405180910390f35b5f60096020526020805f5e5f51905060646001600160a01b031663051038f26040518163ffffffff1660e01b8152600401602060405180830381865afa158015610093573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906100b79190610101565b6057146100fe5760405162461bcd60e51b815260206004820152601160248201527022ac2822a1aa22a22fa0a92127a9af999960791b604482015260640160405180910390fd5b90565b5f60208284031215610111575f80fd5b505191905056fea264697066735822122090d711cfe6ca683200ddfe5f5d8b4a4b07d7e7b092922885f1b2da72ade344a864736f6c63430008180033",
}

// ArbOS11To32UpgradeTestABI is the input ABI used to generate the binding from.
// Deprecated: Use ArbOS11To32UpgradeTestMetaData.ABI instead.
var ArbOS11To32UpgradeTestABI = ArbOS11To32UpgradeTestMetaData.ABI

// ArbOS11To32UpgradeTestBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ArbOS11To32UpgradeTestMetaData.Bin instead.
var ArbOS11To32UpgradeTestBin = ArbOS11To32UpgradeTestMetaData.Bin

// DeployArbOS11To32UpgradeTest deploys a new Ethereum contract, binding an instance of ArbOS11To32UpgradeTest to it.
func DeployArbOS11To32UpgradeTest(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ArbOS11To32UpgradeTest, error) {
	parsed, err := ArbOS11To32UpgradeTestMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ArbOS11To32UpgradeTestBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ArbOS11To32UpgradeTest{ArbOS11To32UpgradeTestCaller: ArbOS11To32UpgradeTestCaller{contract: contract}, ArbOS11To32UpgradeTestTransactor: ArbOS11To32UpgradeTestTransactor{contract: contract}, ArbOS11To32UpgradeTestFilterer: ArbOS11To32UpgradeTestFilterer{contract: contract}}, nil
}

// ArbOS11To32UpgradeTest is an auto generated Go binding around an Ethereum contract.
type ArbOS11To32UpgradeTest struct {
	ArbOS11To32UpgradeTestCaller     // Read-only binding to the contract
	ArbOS11To32UpgradeTestTransactor // Write-only binding to the contract
	ArbOS11To32UpgradeTestFilterer   // Log filterer for contract events
}

// ArbOS11To32UpgradeTestCaller is an auto generated read-only Go binding around an Ethereum contract.
type ArbOS11To32UpgradeTestCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ArbOS11To32UpgradeTestTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ArbOS11To32UpgradeTestTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ArbOS11To32UpgradeTestFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ArbOS11To32UpgradeTestFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ArbOS11To32UpgradeTestSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ArbOS11To32UpgradeTestSession struct {
	Contract     *ArbOS11To32UpgradeTest // Generic contract binding to set the session for
	CallOpts     bind.CallOpts           // Call options to use throughout this session
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// ArbOS11To32UpgradeTestCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ArbOS11To32UpgradeTestCallerSession struct {
	Contract *ArbOS11To32UpgradeTestCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                 // Call options to use throughout this session
}

// ArbOS11To32UpgradeTestTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ArbOS11To32UpgradeTestTransactorSession struct {
	Contract     *ArbOS11To32UpgradeTestTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                 // Transaction auth options to use throughout this session
}

// ArbOS11To32UpgradeTestRaw is an auto generated low-level Go binding around an Ethereum contract.
type ArbOS11To32UpgradeTestRaw struct {
	Contract *ArbOS11To32UpgradeTest // Generic contract binding to access the raw methods on
}

// ArbOS11To32UpgradeTestCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ArbOS11To32UpgradeTestCallerRaw struct {
	Contract *ArbOS11To32UpgradeTestCaller // Generic read-only contract binding to access the raw methods on
}

// ArbOS11To32UpgradeTestTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ArbOS11To32UpgradeTestTransactorRaw struct {
	Contract *ArbOS11To32UpgradeTestTransactor // Generic write-only contract binding to access the raw methods on
}

// NewArbOS11To32UpgradeTest creates a new instance of ArbOS11To32UpgradeTest, bound to a specific deployed contract.
func NewArbOS11To32UpgradeTest(address common.Address, backend bind.ContractBackend) (*ArbOS11To32UpgradeTest, error) {
	contract, err := bindArbOS11To32UpgradeTest(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ArbOS11To32UpgradeTest{ArbOS11To32UpgradeTestCaller: ArbOS11To32UpgradeTestCaller{contract: contract}, ArbOS11To32UpgradeTestTransactor: ArbOS11To32UpgradeTestTransactor{contract: contract}, ArbOS11To32UpgradeTestFilterer: ArbOS11To32UpgradeTestFilterer{contract: contract}}, nil
}

// NewArbOS11To32UpgradeTestCaller creates a new read-only instance of ArbOS11To32UpgradeTest, bound to a specific deployed contract.
func NewArbOS11To32UpgradeTestCaller(address common.Address, caller bind.ContractCaller) (*ArbOS11To32UpgradeTestCaller, error) {
	contract, err := bindArbOS11To32UpgradeTest(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ArbOS11To32UpgradeTestCaller{contract: contract}, nil
}

// NewArbOS11To32UpgradeTestTransactor creates a new write-only instance of ArbOS11To32UpgradeTest, bound to a specific deployed contract.
func NewArbOS11To32UpgradeTestTransactor(address common.Address, transactor bind.ContractTransactor) (*ArbOS11To32UpgradeTestTransactor, error) {
	contract, err := bindArbOS11To32UpgradeTest(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ArbOS11To32UpgradeTestTransactor{contract: contract}, nil
}

// NewArbOS11To32UpgradeTestFilterer creates a new log filterer instance of ArbOS11To32UpgradeTest, bound to a specific deployed contract.
func NewArbOS11To32UpgradeTestFilterer(address common.Address, filterer bind.ContractFilterer) (*ArbOS11To32UpgradeTestFilterer, error) {
	contract, err := bindArbOS11To32UpgradeTest(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ArbOS11To32UpgradeTestFilterer{contract: contract}, nil
}

// bindArbOS11To32UpgradeTest binds a generic wrapper to an already deployed contract.
func bindArbOS11To32UpgradeTest(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ArbOS11To32UpgradeTestMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ArbOS11To32UpgradeTest *ArbOS11To32UpgradeTestRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ArbOS11To32UpgradeTest.Contract.ArbOS11To32UpgradeTestCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ArbOS11To32UpgradeTest *ArbOS11To32UpgradeTestRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ArbOS11To32UpgradeTest.Contract.ArbOS11To32UpgradeTestTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ArbOS11To32UpgradeTest *ArbOS11To32UpgradeTestRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ArbOS11To32UpgradeTest.Contract.ArbOS11To32UpgradeTestTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ArbOS11To32UpgradeTest *ArbOS11To32UpgradeTestCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ArbOS11To32UpgradeTest.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ArbOS11To32UpgradeTest *ArbOS11To32UpgradeTestTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ArbOS11To32UpgradeTest.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ArbOS11To32UpgradeTest *ArbOS11To32UpgradeTestTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ArbOS11To32UpgradeTest.Contract.contract.Transact(opts, method, params...)
}

// Mcopy is a paid mutator transaction binding the contract method 0x19b0cc23.
//
// Solidity: function mcopy() returns(bytes32 x)
func (_ArbOS11To32UpgradeTest *ArbOS11To32UpgradeTestTransactor) Mcopy(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ArbOS11To32UpgradeTest.contract.Transact(opts, "mcopy")
}

// Mcopy is a paid mutator transaction binding the contract method 0x19b0cc23.
//
// Solidity: function mcopy() returns(bytes32 x)
func (_ArbOS11To32UpgradeTest *ArbOS11To32UpgradeTestSession) Mcopy() (*types.Transaction, error) {
	return _ArbOS11To32UpgradeTest.Contract.Mcopy(&_ArbOS11To32UpgradeTest.TransactOpts)
}

// Mcopy is a paid mutator transaction binding the contract method 0x19b0cc23.
//
// Solidity: function mcopy() returns(bytes32 x)
func (_ArbOS11To32UpgradeTest *ArbOS11To32UpgradeTestTransactorSession) Mcopy() (*types.Transaction, error) {
	return _ArbOS11To32UpgradeTest.Contract.Mcopy(&_ArbOS11To32UpgradeTest.TransactOpts)
}

// ArbOwnerMetaData contains all meta data concerning the ArbOwner contract.
var ArbOwnerMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"addChainOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"addNativeTokenOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"addWasmCacheManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllChainOwners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllNativeTokenOwners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInfraFeeAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNetworkFeeAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isChainOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isNativeTokenOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxWeiToRelease\",\"type\":\"uint256\"}],\"name\":\"releaseL1PricerSurplusFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerToRemove\",\"type\":\"address\"}],\"name\":\"removeChainOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerToRemove\",\"type\":\"address\"}],\"name\":\"removeNativeTokenOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"removeWasmCacheManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"newVersion\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"}],\"name\":\"scheduleArbOSUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"cap\",\"type\":\"uint64\"}],\"name\":\"setAmortizedCostCapBips\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"level\",\"type\":\"uint64\"}],\"name\":\"setBrotliCompressionLevel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setCalldataPriceIncrease\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"chainConfig\",\"type\":\"string\"}],\"name\":\"setChainConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newInfraFeeAccount\",\"type\":\"address\"}],\"name\":\"setInfraFeeAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"price\",\"type\":\"uint32\"}],\"name\":\"setInkPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"inertia\",\"type\":\"uint64\"}],\"name\":\"setL1BaseFeeEstimateInertia\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pricePerUnit\",\"type\":\"uint256\"}],\"name\":\"setL1PricePerUnit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"equilibrationUnits\",\"type\":\"uint256\"}],\"name\":\"setL1PricingEquilibrationUnits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"inertia\",\"type\":\"uint64\"}],\"name\":\"setL1PricingInertia\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"weiPerUnit\",\"type\":\"uint64\"}],\"name\":\"setL1PricingRewardRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"setL1PricingRewardRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"priceInWei\",\"type\":\"uint256\"}],\"name\":\"setL2BaseFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"sec\",\"type\":\"uint64\"}],\"name\":\"setL2GasBacklogTolerance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"sec\",\"type\":\"uint64\"}],\"name\":\"setL2GasPricingInertia\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"limit\",\"type\":\"uint64\"}],\"name\":\"setMaxTxGasLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"priceInWei\",\"type\":\"uint256\"}],\"name\":\"setMinimumL2BaseFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"}],\"name\":\"setNativeTokenManagementFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newNetworkFeeAccount\",\"type\":\"address\"}],\"name\":\"setNetworkFeeAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int64\",\"name\":\"cost\",\"type\":\"int64\"}],\"name\":\"setPerBatchGasCharge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"limit\",\"type\":\"uint64\"}],\"name\":\"setSpeedLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"count\",\"type\":\"uint16\"}],\"name\":\"setWasmBlockCacheSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_days\",\"type\":\"uint16\"}],\"name\":\"setWasmExpiryDays\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"pages\",\"type\":\"uint16\"}],\"name\":\"setWasmFreePages\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"percent\",\"type\":\"uint64\"}],\"name\":\"setWasmInitCostScalar\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_days\",\"type\":\"uint16\"}],\"name\":\"setWasmKeepaliveDays\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"size\",\"type\":\"uint32\"}],\"name\":\"setWasmMaxSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"depth\",\"type\":\"uint32\"}],\"name\":\"setWasmMaxStackDepth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"gas\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"cached\",\"type\":\"uint16\"}],\"name\":\"setWasmMinInitGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"gas\",\"type\":\"uint16\"}],\"name\":\"setWasmPageGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"limit\",\"type\":\"uint16\"}],\"name\":\"setWasmPageLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"method\",\"type\":\"bytes4\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"OwnerActs\",\"type\":\"event\"}]",
}

// ArbOwnerABI is the input ABI used to generate the binding from.
// Deprecated: Use ArbOwnerMetaData.ABI instead.
var ArbOwnerABI = ArbOwnerMetaData.ABI

// ArbOwner is an auto generated Go binding around an Ethereum contract.
type ArbOwner struct {
	ArbOwnerCaller     // Read-only binding to the contract
	ArbOwnerTransactor // Write-only binding to the contract
	ArbOwnerFilterer   // Log filterer for contract events
}

// ArbOwnerCaller is an auto generated read-only Go binding around an Ethereum contract.
type ArbOwnerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ArbOwnerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ArbOwnerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ArbOwnerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ArbOwnerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ArbOwnerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ArbOwnerSession struct {
	Contract     *ArbOwner         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ArbOwnerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ArbOwnerCallerSession struct {
	Contract *ArbOwnerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// ArbOwnerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ArbOwnerTransactorSession struct {
	Contract     *ArbOwnerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// ArbOwnerRaw is an auto generated low-level Go binding around an Ethereum contract.
type ArbOwnerRaw struct {
	Contract *ArbOwner // Generic contract binding to access the raw methods on
}

// ArbOwnerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ArbOwnerCallerRaw struct {
	Contract *ArbOwnerCaller // Generic read-only contract binding to access the raw methods on
}

// ArbOwnerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ArbOwnerTransactorRaw struct {
	Contract *ArbOwnerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewArbOwner creates a new instance of ArbOwner, bound to a specific deployed contract.
func NewArbOwner(address common.Address, backend bind.ContractBackend) (*ArbOwner, error) {
	contract, err := bindArbOwner(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ArbOwner{ArbOwnerCaller: ArbOwnerCaller{contract: contract}, ArbOwnerTransactor: ArbOwnerTransactor{contract: contract}, ArbOwnerFilterer: ArbOwnerFilterer{contract: contract}}, nil
}

// NewArbOwnerCaller creates a new read-only instance of ArbOwner, bound to a specific deployed contract.
func NewArbOwnerCaller(address common.Address, caller bind.ContractCaller) (*ArbOwnerCaller, error) {
	contract, err := bindArbOwner(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ArbOwnerCaller{contract: contract}, nil
}

// NewArbOwnerTransactor creates a new write-only instance of ArbOwner, bound to a specific deployed contract.
func NewArbOwnerTransactor(address common.Address, transactor bind.ContractTransactor) (*ArbOwnerTransactor, error) {
	contract, err := bindArbOwner(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ArbOwnerTransactor{contract: contract}, nil
}

// NewArbOwnerFilterer creates a new log filterer instance of ArbOwner, bound to a specific deployed contract.
func NewArbOwnerFilterer(address common.Address, filterer bind.ContractFilterer) (*ArbOwnerFilterer, error) {
	contract, err := bindArbOwner(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ArbOwnerFilterer{contract: contract}, nil
}

// bindArbOwner binds a generic wrapper to an already deployed contract.
func bindArbOwner(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ArbOwnerMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ArbOwner *ArbOwnerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ArbOwner.Contract.ArbOwnerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ArbOwner *ArbOwnerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ArbOwner.Contract.ArbOwnerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ArbOwner *ArbOwnerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ArbOwner.Contract.ArbOwnerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ArbOwner *ArbOwnerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ArbOwner.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ArbOwner *ArbOwnerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ArbOwner.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ArbOwner *ArbOwnerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ArbOwner.Contract.contract.Transact(opts, method, params...)
}

// GetAllChainOwners is a free data retrieval call binding the contract method 0x516b4e0f.
//
// Solidity: function getAllChainOwners() view returns(address[])
func (_ArbOwner *ArbOwnerCaller) GetAllChainOwners(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _ArbOwner.contract.Call(opts, &out, "getAllChainOwners")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetAllChainOwners is a free data retrieval call binding the contract method 0x516b4e0f.
//
// Solidity: function getAllChainOwners() view returns(address[])
func (_ArbOwner *ArbOwnerSession) GetAllChainOwners() ([]common.Address, error) {
	return _ArbOwner.Contract.GetAllChainOwners(&_ArbOwner.CallOpts)
}

// GetAllChainOwners is a free data retrieval call binding the contract method 0x516b4e0f.
//
// Solidity: function getAllChainOwners() view returns(address[])
func (_ArbOwner *ArbOwnerCallerSession) GetAllChainOwners() ([]common.Address, error) {
	return _ArbOwner.Contract.GetAllChainOwners(&_ArbOwner.CallOpts)
}

// GetAllNativeTokenOwners is a free data retrieval call binding the contract method 0x3f8601e4.
//
// Solidity: function getAllNativeTokenOwners() view returns(address[])
func (_ArbOwner *ArbOwnerCaller) GetAllNativeTokenOwners(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _ArbOwner.contract.Call(opts, &out, "getAllNativeTokenOwners")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetAllNativeTokenOwners is a free data retrieval call binding the contract method 0x3f8601e4.
//
// Solidity: function getAllNativeTokenOwners() view returns(address[])
func (_ArbOwner *ArbOwnerSession) GetAllNativeTokenOwners() ([]common.Address, error) {
	return _ArbOwner.Contract.GetAllNativeTokenOwners(&_ArbOwner.CallOpts)
}

// GetAllNativeTokenOwners is a free data retrieval call binding the contract method 0x3f8601e4.
//
// Solidity: function getAllNativeTokenOwners() view returns(address[])
func (_ArbOwner *ArbOwnerCallerSession) GetAllNativeTokenOwners() ([]common.Address, error) {
	return _ArbOwner.Contract.GetAllNativeTokenOwners(&_ArbOwner.CallOpts)
}

// GetInfraFeeAccount is a free data retrieval call binding the contract method 0xee95a824.
//
// Solidity: function getInfraFeeAccount() view returns(address)
func (_ArbOwner *ArbOwnerCaller) GetInfraFeeAccount(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ArbOwner.contract.Call(opts, &out, "getInfraFeeAccount")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetInfraFeeAccount is a free data retrieval call binding the contract method 0xee95a824.
//
// Solidity: function getInfraFeeAccount() view returns(address)
func (_ArbOwner *ArbOwnerSession) GetInfraFeeAccount() (common.Address, error) {
	return _ArbOwner.Contract.GetInfraFeeAccount(&_ArbOwner.CallOpts)
}

// GetInfraFeeAccount is a free data retrieval call binding the contract method 0xee95a824.
//
// Solidity: function getInfraFeeAccount() view returns(address)
func (_ArbOwner *ArbOwnerCallerSession) GetInfraFeeAccount() (common.Address, error) {
	return _ArbOwner.Contract.GetInfraFeeAccount(&_ArbOwner.CallOpts)
}

// GetNetworkFeeAccount is a free data retrieval call binding the contract method 0x2d9125e9.
//
// Solidity: function getNetworkFeeAccount() view returns(address)
func (_ArbOwner *ArbOwnerCaller) GetNetworkFeeAccount(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ArbOwner.contract.Call(opts, &out, "getNetworkFeeAccount")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetNetworkFeeAccount is a free data retrieval call binding the contract method 0x2d9125e9.
//
// Solidity: function getNetworkFeeAccount() view returns(address)
func (_ArbOwner *ArbOwnerSession) GetNetworkFeeAccount() (common.Address, error) {
	return _ArbOwner.Contract.GetNetworkFeeAccount(&_ArbOwner.CallOpts)
}

// GetNetworkFeeAccount is a free data retrieval call binding the contract method 0x2d9125e9.
//
// Solidity: function getNetworkFeeAccount() view returns(address)
func (_ArbOwner *ArbOwnerCallerSession) GetNetworkFeeAccount() (common.Address, error) {
	return _ArbOwner.Contract.GetNetworkFeeAccount(&_ArbOwner.CallOpts)
}

// IsChainOwner is a free data retrieval call binding the contract method 0x26ef7f68.
//
// Solidity: function isChainOwner(address addr) view returns(bool)
func (_ArbOwner *ArbOwnerCaller) IsChainOwner(opts *bind.CallOpts, addr common.Address) (bool, error) {
	var out []interface{}
	err := _ArbOwner.contract.Call(opts, &out, "isChainOwner", addr)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsChainOwner is a free data retrieval call binding the contract method 0x26ef7f68.
//
// Solidity: function isChainOwner(address addr) view returns(bool)
func (_ArbOwner *ArbOwnerSession) IsChainOwner(addr common.Address) (bool, error) {
	return _ArbOwner.Contract.IsChainOwner(&_ArbOwner.CallOpts, addr)
}

// IsChainOwner is a free data retrieval call binding the contract method 0x26ef7f68.
//
// Solidity: function isChainOwner(address addr) view returns(bool)
func (_ArbOwner *ArbOwnerCallerSession) IsChainOwner(addr common.Address) (bool, error) {
	return _ArbOwner.Contract.IsChainOwner(&_ArbOwner.CallOpts, addr)
}

// IsNativeTokenOwner is a free data retrieval call binding the contract method 0xc686f4db.
//
// Solidity: function isNativeTokenOwner(address addr) view returns(bool)
func (_ArbOwner *ArbOwnerCaller) IsNativeTokenOwner(opts *bind.CallOpts, addr common.Address) (bool, error) {
	var out []interface{}
	err := _ArbOwner.contract.Call(opts, &out, "isNativeTokenOwner", addr)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsNativeTokenOwner is a free data retrieval call binding the contract method 0xc686f4db.
//
// Solidity: function isNativeTokenOwner(address addr) view returns(bool)
func (_ArbOwner *ArbOwnerSession) IsNativeTokenOwner(addr common.Address) (bool, error) {
	return _ArbOwner.Contract.IsNativeTokenOwner(&_ArbOwner.CallOpts, addr)
}

// IsNativeTokenOwner is a free data retrieval call binding the contract method 0xc686f4db.
//
// Solidity: function isNativeTokenOwner(address addr) view returns(bool)
func (_ArbOwner *ArbOwnerCallerSession) IsNativeTokenOwner(addr common.Address) (bool, error) {
	return _ArbOwner.Contract.IsNativeTokenOwner(&_ArbOwner.CallOpts, addr)
}

// AddChainOwner is a paid mutator transaction binding the contract method 0x481f8dbf.
//
// Solidity: function addChainOwner(address newOwner) returns()
func (_ArbOwner *ArbOwnerTransactor) AddChainOwner(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _ArbOwner.contract.Transact(opts, "addChainOwner", newOwner)
}

// AddChainOwner is a paid mutator transaction binding the contract method 0x481f8dbf.
//
// Solidity: function addChainOwner(address newOwner) returns()
func (_ArbOwner *ArbOwnerSession) AddChainOwner(newOwner common.Address) (*types.Transaction, error) {
	return _ArbOwner.Contract.AddChainOwner(&_ArbOwner.TransactOpts, newOwner)
}

// AddChainOwner is a paid mutator transaction binding the contract method 0x481f8dbf.
//
// Solidity: function addChainOwner(address newOwner) returns()
func (_ArbOwner *ArbOwnerTransactorSession) AddChainOwner(newOwner common.Address) (*types.Transaction, error) {
	return _ArbOwner.Contract.AddChainOwner(&_ArbOwner.TransactOpts, newOwner)
}

// AddNativeTokenOwner is a paid mutator transaction binding the contract method 0xaeb3a464.
//
// Solidity: function addNativeTokenOwner(address newOwner) returns()
func (_ArbOwner *ArbOwnerTransactor) AddNativeTokenOwner(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _ArbOwner.contract.Transact(opts, "addNativeTokenOwner", newOwner)
}

// AddNativeTokenOwner is a paid mutator transaction binding the contract method 0xaeb3a464.
//
// Solidity: function addNativeTokenOwner(address newOwner) returns()
func (_ArbOwner *ArbOwnerSession) AddNativeTokenOwner(newOwner common.Address) (*types.Transaction, error) {
	return _ArbOwner.Contract.AddNativeTokenOwner(&_ArbOwner.TransactOpts, newOwner)
}

// AddNativeTokenOwner is a paid mutator transaction binding the contract method 0xaeb3a464.
//
// Solidity: function addNativeTokenOwner(address newOwner) returns()
func (_ArbOwner *ArbOwnerTransactorSession) AddNativeTokenOwner(newOwner common.Address) (*types.Transaction, error) {
	return _ArbOwner.Contract.AddNativeTokenOwner(&_ArbOwner.TransactOpts, newOwner)
}

// AddWasmCacheManager is a paid mutator transaction binding the contract method 0xffdca515.
//
// Solidity: function addWasmCacheManager(address manager) returns()
func (_ArbOwner *ArbOwnerTransactor) AddWasmCacheManager(opts *bind.TransactOpts, manager common.Address) (*types.Transaction, error) {
	return _ArbOwner.contract.Transact(opts, "addWasmCacheManager", manager)
}

// AddWasmCacheManager is a paid mutator transaction binding the contract method 0xffdca515.
//
// Solidity: function addWasmCacheManager(address manager) returns()
func (_ArbOwner *ArbOwnerSession) AddWasmCacheManager(manager common.Address) (*types.Transaction, error) {
	return _ArbOwner.Contract.AddWasmCacheManager(&_ArbOwner.TransactOpts, manager)
}

// AddWasmCacheManager is a paid mutator transaction binding the contract method 0xffdca515.
//
// Solidity: function addWasmCacheManager(address manager) returns()
func (_ArbOwner *ArbOwnerTransactorSession) AddWasmCacheManager(manager common.Address) (*types.Transaction, error) {
	return _ArbOwner.Contract.AddWasmCacheManager(&_ArbOwner.TransactOpts, manager)
}

// ReleaseL1PricerSurplusFunds is a paid mutator transaction binding the contract method 0x314bcf05.
//
// Solidity: function releaseL1PricerSurplusFunds(uint256 maxWeiToRelease) returns(uint256)
func (_ArbOwner *ArbOwnerTransactor) ReleaseL1PricerSurplusFunds(opts *bind.TransactOpts, maxWeiToRelease *big.Int) (*types.Transaction, error) {
	return _ArbOwner.contract.Transact(opts, "releaseL1PricerSurplusFunds", maxWeiToRelease)
}

// ReleaseL1PricerSurplusFunds is a paid mutator transaction binding the contract method 0x314bcf05.
//
// Solidity: function releaseL1PricerSurplusFunds(uint256 maxWeiToRelease) returns(uint256)
func (_ArbOwner *ArbOwnerSession) ReleaseL1PricerSurplusFunds(maxWeiToRelease *big.Int) (*types.Transaction, error) {
	return _ArbOwner.Contract.ReleaseL1PricerSurplusFunds(&_ArbOwner.TransactOpts, maxWeiToRelease)
}

// ReleaseL1PricerSurplusFunds is a paid mutator transaction binding the contract method 0x314bcf05.
//
// Solidity: function releaseL1PricerSurplusFunds(uint256 maxWeiToRelease) returns(uint256)
func (_ArbOwner *ArbOwnerTransactorSession) ReleaseL1PricerSurplusFunds(maxWeiToRelease *big.Int) (*types.Transaction, error) {
	return _ArbOwner.Contract.ReleaseL1PricerSurplusFunds(&_ArbOwner.TransactOpts, maxWeiToRelease)
}

// RemoveChainOwner is a paid mutator transaction binding the contract method 0x8792701a.
//
// Solidity: function removeChainOwner(address ownerToRemove) returns()
func (_ArbOwner *ArbOwnerTransactor) RemoveChainOwner(opts *bind.TransactOpts, ownerToRemove common.Address) (*types.Transaction, error) {
	return _ArbOwner.contract.Transact(opts, "removeChainOwner", ownerToRemove)
}

// RemoveChainOwner is a paid mutator transaction binding the contract method 0x8792701a.
//
// Solidity: function removeChainOwner(address ownerToRemove) returns()
func (_ArbOwner *ArbOwnerSession) RemoveChainOwner(ownerToRemove common.Address) (*types.Transaction, error) {
	return _ArbOwner.Contract.RemoveChainOwner(&_ArbOwner.TransactOpts, ownerToRemove)
}

// RemoveChainOwner is a paid mutator transaction binding the contract method 0x8792701a.
//
// Solidity: function removeChainOwner(address ownerToRemove) returns()
func (_ArbOwner *ArbOwnerTransactorSession) RemoveChainOwner(ownerToRemove common.Address) (*types.Transaction, error) {
	return _ArbOwner.Contract.RemoveChainOwner(&_ArbOwner.TransactOpts, ownerToRemove)
}

// RemoveNativeTokenOwner is a paid mutator transaction binding the contract method 0x96a3751d.
//
// Solidity: function removeNativeTokenOwner(address ownerToRemove) returns()
func (_ArbOwner *ArbOwnerTransactor) RemoveNativeTokenOwner(opts *bind.TransactOpts, ownerToRemove common.Address) (*types.Transaction, error) {
	return _ArbOwner.contract.Transact(opts, "removeNativeTokenOwner", ownerToRemove)
}

// RemoveNativeTokenOwner is a paid mutator transaction binding the contract method 0x96a3751d.
//
// Solidity: function removeNativeTokenOwner(address ownerToRemove) returns()
func (_ArbOwner *ArbOwnerSession) RemoveNativeTokenOwner(ownerToRemove common.Address) (*types.Transaction, error) {
	return _ArbOwner.Contract.RemoveNativeTokenOwner(&_ArbOwner.TransactOpts, ownerToRemove)
}

// RemoveNativeTokenOwner is a paid mutator transaction binding the contract method 0x96a3751d.
//
// Solidity: function removeNativeTokenOwner(address ownerToRemove) returns()
func (_ArbOwner *ArbOwnerTransactorSession) RemoveNativeTokenOwner(ownerToRemove common.Address) (*types.Transaction, error) {
	return _ArbOwner.Contract.RemoveNativeTokenOwner(&_ArbOwner.TransactOpts, ownerToRemove)
}

// RemoveWasmCacheManager is a paid mutator transaction binding the contract method 0xbf197322.
//
// Solidity: function removeWasmCacheManager(address manager) returns()
func (_ArbOwner *ArbOwnerTransactor) RemoveWasmCacheManager(opts *bind.TransactOpts, manager common.Address) (*types.Transaction, error) {
	return _ArbOwner.contract.Transact(opts, "removeWasmCacheManager", manager)
}

// RemoveWasmCacheManager is a paid mutator transaction binding the contract method 0xbf197322.
//
// Solidity: function removeWasmCacheManager(address manager) returns()
func (_ArbOwner *ArbOwnerSession) RemoveWasmCacheManager(manager common.Address) (*types.Transaction, error) {
	return _ArbOwner.Contract.RemoveWasmCacheManager(&_ArbOwner.TransactOpts, manager)
}

// RemoveWasmCacheManager is a paid mutator transaction binding the contract method 0xbf197322.
//
// Solidity: function removeWasmCacheManager(address manager) returns()
func (_ArbOwner *ArbOwnerTransactorSession) RemoveWasmCacheManager(manager common.Address) (*types.Transaction, error) {
	return _ArbOwner.Contract.RemoveWasmCacheManager(&_ArbOwner.TransactOpts, manager)
}

// ScheduleArbOSUpgrade is a paid mutator transaction binding the contract method 0xe388b381.
//
// Solidity: function scheduleArbOSUpgrade(uint64 newVersion, uint64 timestamp) returns()
func (_ArbOwner *ArbOwnerTransactor) ScheduleArbOSUpgrade(opts *bind.TransactOpts, newVersion uint64, timestamp uint64) (*types.Transaction, error) {
	return _ArbOwner.contract.Transact(opts, "scheduleArbOSUpgrade", newVersion, timestamp)
}

// ScheduleArbOSUpgrade is a paid mutator transaction binding the contract method 0xe388b381.
//
// Solidity: function scheduleArbOSUpgrade(uint64 newVersion, uint64 timestamp) returns()
func (_ArbOwner *ArbOwnerSession) ScheduleArbOSUpgrade(newVersion uint64, timestamp uint64) (*types.Transaction, error) {
	return _ArbOwner.Contract.ScheduleArbOSUpgrade(&_ArbOwner.TransactOpts, newVersion, timestamp)
}

// ScheduleArbOSUpgrade is a paid mutator transaction binding the contract method 0xe388b381.
//
// Solidity: function scheduleArbOSUpgrade(uint64 newVersion, uint64 timestamp) returns()
func (_ArbOwner *ArbOwnerTransactorSession) ScheduleArbOSUpgrade(newVersion uint64, timestamp uint64) (*types.Transaction, error) {
	return _ArbOwner.Contract.ScheduleArbOSUpgrade(&_ArbOwner.TransactOpts, newVersion, timestamp)
}

// SetAmortizedCostCapBips is a paid mutator transaction binding the contract method 0x56191cc3.
//
// Solidity: function setAmortizedCostCapBips(uint64 cap) returns()
func (_ArbOwner *ArbOwnerTransactor) SetAmortizedCostCapBips(opts *bind.TransactOpts, cap uint64) (*types.Transaction, error) {
	return _ArbOwner.contract.Transact(opts, "setAmortizedCostCapBips", cap)
}

// SetAmortizedCostCapBips is a paid mutator transaction binding the contract method 0x56191cc3.
//
// Solidity: function setAmortizedCostCapBips(uint64 cap) returns()
func (_ArbOwner *ArbOwnerSession) SetAmortizedCostCapBips(cap uint64) (*types.Transaction, error) {
	return _ArbOwner.Contract.SetAmortizedCostCapBips(&_ArbOwner.TransactOpts, cap)
}

// SetAmortizedCostCapBips is a paid mutator transaction binding the contract method 0x56191cc3.
//
// Solidity: function setAmortizedCostCapBips(uint64 cap) returns()
func (_ArbOwner *ArbOwnerTransactorSession) SetAmortizedCostCapBips(cap uint64) (*types.Transaction, error) {
	return _ArbOwner.Contract.SetAmortizedCostCapBips(&_ArbOwner.TransactOpts, cap)
}

// SetBrotliCompressionLevel is a paid mutator transaction binding the contract method 0x5399126f.
//
// Solidity: function setBrotliCompressionLevel(uint64 level) returns()
func (_ArbOwner *ArbOwnerTransactor) SetBrotliCompressionLevel(opts *bind.TransactOpts, level uint64) (*types.Transaction, error) {
	return _ArbOwner.contract.Transact(opts, "setBrotliCompressionLevel", level)
}

// SetBrotliCompressionLevel is a paid mutator transaction binding the contract method 0x5399126f.
//
// Solidity: function setBrotliCompressionLevel(uint64 level) returns()
func (_ArbOwner *ArbOwnerSession) SetBrotliCompressionLevel(level uint64) (*types.Transaction, error) {
	return _ArbOwner.Contract.SetBrotliCompressionLevel(&_ArbOwner.TransactOpts, level)
}

// SetBrotliCompressionLevel is a paid mutator transaction binding the contract method 0x5399126f.
//
// Solidity: function setBrotliCompressionLevel(uint64 level) returns()
func (_ArbOwner *ArbOwnerTransactorSession) SetBrotliCompressionLevel(level uint64) (*types.Transaction, error) {
	return _ArbOwner.Contract.SetBrotliCompressionLevel(&_ArbOwner.TransactOpts, level)
}

// SetCalldataPriceIncrease is a paid mutator transaction binding the contract method 0x8eb911d9.
//
// Solidity: function setCalldataPriceIncrease(bool enable) returns()
func (_ArbOwner *ArbOwnerTransactor) SetCalldataPriceIncrease(opts *bind.TransactOpts, enable bool) (*types.Transaction, error) {
	return _ArbOwner.contract.Transact(opts, "setCalldataPriceIncrease", enable)
}

// SetCalldataPriceIncrease is a paid mutator transaction binding the contract method 0x8eb911d9.
//
// Solidity: function setCalldataPriceIncrease(bool enable) returns()
func (_ArbOwner *ArbOwnerSession) SetCalldataPriceIncrease(enable bool) (*types.Transaction, error) {
	return _ArbOwner.Contract.SetCalldataPriceIncrease(&_ArbOwner.TransactOpts, enable)
}

// SetCalldataPriceIncrease is a paid mutator transaction binding the contract method 0x8eb911d9.
//
// Solidity: function setCalldataPriceIncrease(bool enable) returns()
func (_ArbOwner *ArbOwnerTransactorSession) SetCalldataPriceIncrease(enable bool) (*types.Transaction, error) {
	return _ArbOwner.Contract.SetCalldataPriceIncrease(&_ArbOwner.TransactOpts, enable)
}

// SetChainConfig is a paid mutator transaction binding the contract method 0xeda73212.
//
// Solidity: function setChainConfig(string chainConfig) returns()
func (_ArbOwner *ArbOwnerTransactor) SetChainConfig(opts *bind.TransactOpts, chainConfig string) (*types.Transaction, error) {
	return _ArbOwner.contract.Transact(opts, "setChainConfig", chainConfig)
}

// SetChainConfig is a paid mutator transaction binding the contract method 0xeda73212.
//
// Solidity: function setChainConfig(string chainConfig) returns()
func (_ArbOwner *ArbOwnerSession) SetChainConfig(chainConfig string) (*types.Transaction, error) {
	return _ArbOwner.Contract.SetChainConfig(&_ArbOwner.TransactOpts, chainConfig)
}

// SetChainConfig is a paid mutator transaction binding the contract method 0xeda73212.
//
// Solidity: function setChainConfig(string chainConfig) returns()
func (_ArbOwner *ArbOwnerTransactorSession) SetChainConfig(chainConfig string) (*types.Transaction, error) {
	return _ArbOwner.Contract.SetChainConfig(&_ArbOwner.TransactOpts, chainConfig)
}

// SetInfraFeeAccount is a paid mutator transaction binding the contract method 0x57f585db.
//
// Solidity: function setInfraFeeAccount(address newInfraFeeAccount) returns()
func (_ArbOwner *ArbOwnerTransactor) SetInfraFeeAccount(opts *bind.TransactOpts, newInfraFeeAccount common.Address) (*types.Transaction, error) {
	return _ArbOwner.contract.Transact(opts, "setInfraFeeAccount", newInfraFeeAccount)
}

// SetInfraFeeAccount is a paid mutator transaction binding the contract method 0x57f585db.
//
// Solidity: function setInfraFeeAccount(address newInfraFeeAccount) returns()
func (_ArbOwner *ArbOwnerSession) SetInfraFeeAccount(newInfraFeeAccount common.Address) (*types.Transaction, error) {
	return _ArbOwner.Contract.SetInfraFeeAccount(&_ArbOwner.TransactOpts, newInfraFeeAccount)
}

// SetInfraFeeAccount is a paid mutator transaction binding the contract method 0x57f585db.
//
// Solidity: function setInfraFeeAccount(address newInfraFeeAccount) returns()
func (_ArbOwner *ArbOwnerTransactorSession) SetInfraFeeAccount(newInfraFeeAccount common.Address) (*types.Transaction, error) {
	return _ArbOwner.Contract.SetInfraFeeAccount(&_ArbOwner.TransactOpts, newInfraFeeAccount)
}

// SetInkPrice is a paid mutator transaction binding the contract method 0x8c1d4fda.
//
// Solidity: function setInkPrice(uint32 price) returns()
func (_ArbOwner *ArbOwnerTransactor) SetInkPrice(opts *bind.TransactOpts, price uint32) (*types.Transaction, error) {
	return _ArbOwner.contract.Transact(opts, "setInkPrice", price)
}

// SetInkPrice is a paid mutator transaction binding the contract method 0x8c1d4fda.
//
// Solidity: function setInkPrice(uint32 price) returns()
func (_ArbOwner *ArbOwnerSession) SetInkPrice(price uint32) (*types.Transaction, error) {
	return _ArbOwner.Contract.SetInkPrice(&_ArbOwner.TransactOpts, price)
}

// SetInkPrice is a paid mutator transaction binding the contract method 0x8c1d4fda.
//
// Solidity: function setInkPrice(uint32 price) returns()
func (_ArbOwner *ArbOwnerTransactorSession) SetInkPrice(price uint32) (*types.Transaction, error) {
	return _ArbOwner.Contract.SetInkPrice(&_ArbOwner.TransactOpts, price)
}

// SetL1BaseFeeEstimateInertia is a paid mutator transaction binding the contract method 0x718f7805.
//
// Solidity: function setL1BaseFeeEstimateInertia(uint64 inertia) returns()
func (_ArbOwner *ArbOwnerTransactor) SetL1BaseFeeEstimateInertia(opts *bind.TransactOpts, inertia uint64) (*types.Transaction, error) {
	return _ArbOwner.contract.Transact(opts, "setL1BaseFeeEstimateInertia", inertia)
}

// SetL1BaseFeeEstimateInertia is a paid mutator transaction binding the contract method 0x718f7805.
//
// Solidity: function setL1BaseFeeEstimateInertia(uint64 inertia) returns()
func (_ArbOwner *ArbOwnerSession) SetL1BaseFeeEstimateInertia(inertia uint64) (*types.Transaction, error) {
	return _ArbOwner.Contract.SetL1BaseFeeEstimateInertia(&_ArbOwner.TransactOpts, inertia)
}

// SetL1BaseFeeEstimateInertia is a paid mutator transaction binding the contract method 0x718f7805.
//
// Solidity: function setL1BaseFeeEstimateInertia(uint64 inertia) returns()
func (_ArbOwner *ArbOwnerTransactorSession) SetL1BaseFeeEstimateInertia(inertia uint64) (*types.Transaction, error) {
	return _ArbOwner.Contract.SetL1BaseFeeEstimateInertia(&_ArbOwner.TransactOpts, inertia)
}

// SetL1PricePerUnit is a paid mutator transaction binding the contract method 0x2b352fae.
//
// Solidity: function setL1PricePerUnit(uint256 pricePerUnit) returns()
func (_ArbOwner *ArbOwnerTransactor) SetL1PricePerUnit(opts *bind.TransactOpts, pricePerUnit *big.Int) (*types.Transaction, error) {
	return _ArbOwner.contract.Transact(opts, "setL1PricePerUnit", pricePerUnit)
}

// SetL1PricePerUnit is a paid mutator transaction binding the contract method 0x2b352fae.
//
// Solidity: function setL1PricePerUnit(uint256 pricePerUnit) returns()
func (_ArbOwner *ArbOwnerSession) SetL1PricePerUnit(pricePerUnit *big.Int) (*types.Transaction, error) {
	return _ArbOwner.Contract.SetL1PricePerUnit(&_ArbOwner.TransactOpts, pricePerUnit)
}

// SetL1PricePerUnit is a paid mutator transaction binding the contract method 0x2b352fae.
//
// Solidity: function setL1PricePerUnit(uint256 pricePerUnit) returns()
func (_ArbOwner *ArbOwnerTransactorSession) SetL1PricePerUnit(pricePerUnit *big.Int) (*types.Transaction, error) {
	return _ArbOwner.Contract.SetL1PricePerUnit(&_ArbOwner.TransactOpts, pricePerUnit)
}

// SetL1PricingEquilibrationUnits is a paid mutator transaction binding the contract method 0x152db696.
//
// Solidity: function setL1PricingEquilibrationUnits(uint256 equilibrationUnits) returns()
func (_ArbOwner *ArbOwnerTransactor) SetL1PricingEquilibrationUnits(opts *bind.TransactOpts, equilibrationUnits *big.Int) (*types.Transaction, error) {
	return _ArbOwner.contract.Transact(opts, "setL1PricingEquilibrationUnits", equilibrationUnits)
}

// SetL1PricingEquilibrationUnits is a paid mutator transaction binding the contract method 0x152db696.
//
// Solidity: function setL1PricingEquilibrationUnits(uint256 equilibrationUnits) returns()
func (_ArbOwner *ArbOwnerSession) SetL1PricingEquilibrationUnits(equilibrationUnits *big.Int) (*types.Transaction, error) {
	return _ArbOwner.Contract.SetL1PricingEquilibrationUnits(&_ArbOwner.TransactOpts, equilibrationUnits)
}

// SetL1PricingEquilibrationUnits is a paid mutator transaction binding the contract method 0x152db696.
//
// Solidity: function setL1PricingEquilibrationUnits(uint256 equilibrationUnits) returns()
func (_ArbOwner *ArbOwnerTransactorSession) SetL1PricingEquilibrationUnits(equilibrationUnits *big.Int) (*types.Transaction, error) {
	return _ArbOwner.Contract.SetL1PricingEquilibrationUnits(&_ArbOwner.TransactOpts, equilibrationUnits)
}

// SetL1PricingInertia is a paid mutator transaction binding the contract method 0x775a82e9.
//
// Solidity: function setL1PricingInertia(uint64 inertia) returns()
func (_ArbOwner *ArbOwnerTransactor) SetL1PricingInertia(opts *bind.TransactOpts, inertia uint64) (*types.Transaction, error) {
	return _ArbOwner.contract.Transact(opts, "setL1PricingInertia", inertia)
}

// SetL1PricingInertia is a paid mutator transaction binding the contract method 0x775a82e9.
//
// Solidity: function setL1PricingInertia(uint64 inertia) returns()
func (_ArbOwner *ArbOwnerSession) SetL1PricingInertia(inertia uint64) (*types.Transaction, error) {
	return _ArbOwner.Contract.SetL1PricingInertia(&_ArbOwner.TransactOpts, inertia)
}

// SetL1PricingInertia is a paid mutator transaction binding the contract method 0x775a82e9.
//
// Solidity: function setL1PricingInertia(uint64 inertia) returns()
func (_ArbOwner *ArbOwnerTransactorSession) SetL1PricingInertia(inertia uint64) (*types.Transaction, error) {
	return _ArbOwner.Contract.SetL1PricingInertia(&_ArbOwner.TransactOpts, inertia)
}

// SetL1PricingRewardRate is a paid mutator transaction binding the contract method 0xf6739500.
//
// Solidity: function setL1PricingRewardRate(uint64 weiPerUnit) returns()
func (_ArbOwner *ArbOwnerTransactor) SetL1PricingRewardRate(opts *bind.TransactOpts, weiPerUnit uint64) (*types.Transaction, error) {
	return _ArbOwner.contract.Transact(opts, "setL1PricingRewardRate", weiPerUnit)
}

// SetL1PricingRewardRate is a paid mutator transaction binding the contract method 0xf6739500.
//
// Solidity: function setL1PricingRewardRate(uint64 weiPerUnit) returns()
func (_ArbOwner *ArbOwnerSession) SetL1PricingRewardRate(weiPerUnit uint64) (*types.Transaction, error) {
	return _ArbOwner.Contract.SetL1PricingRewardRate(&_ArbOwner.TransactOpts, weiPerUnit)
}

// SetL1PricingRewardRate is a paid mutator transaction binding the contract method 0xf6739500.
//
// Solidity: function setL1PricingRewardRate(uint64 weiPerUnit) returns()
func (_ArbOwner *ArbOwnerTransactorSession) SetL1PricingRewardRate(weiPerUnit uint64) (*types.Transaction, error) {
	return _ArbOwner.Contract.SetL1PricingRewardRate(&_ArbOwner.TransactOpts, weiPerUnit)
}

// SetL1PricingRewardRecipient is a paid mutator transaction binding the contract method 0x934be07d.
//
// Solidity: function setL1PricingRewardRecipient(address recipient) returns()
func (_ArbOwner *ArbOwnerTransactor) SetL1PricingRewardRecipient(opts *bind.TransactOpts, recipient common.Address) (*types.Transaction, error) {
	return _ArbOwner.contract.Transact(opts, "setL1PricingRewardRecipient", recipient)
}

// SetL1PricingRewardRecipient is a paid mutator transaction binding the contract method 0x934be07d.
//
// Solidity: function setL1PricingRewardRecipient(address recipient) returns()
func (_ArbOwner *ArbOwnerSession) SetL1PricingRewardRecipient(recipient common.Address) (*types.Transaction, error) {
	return _ArbOwner.Contract.SetL1PricingRewardRecipient(&_ArbOwner.TransactOpts, recipient)
}

// SetL1PricingRewardRecipient is a paid mutator transaction binding the contract method 0x934be07d.
//
// Solidity: function setL1PricingRewardRecipient(address recipient) returns()
func (_ArbOwner *ArbOwnerTransactorSession) SetL1PricingRewardRecipient(recipient common.Address) (*types.Transaction, error) {
	return _ArbOwner.Contract.SetL1PricingRewardRecipient(&_ArbOwner.TransactOpts, recipient)
}

// SetL2BaseFee is a paid mutator transaction binding the contract method 0xd99bc80e.
//
// Solidity: function setL2BaseFee(uint256 priceInWei) returns()
func (_ArbOwner *ArbOwnerTransactor) SetL2BaseFee(opts *bind.TransactOpts, priceInWei *big.Int) (*types.Transaction, error) {
	return _ArbOwner.contract.Transact(opts, "setL2BaseFee", priceInWei)
}

// SetL2BaseFee is a paid mutator transaction binding the contract method 0xd99bc80e.
//
// Solidity: function setL2BaseFee(uint256 priceInWei) returns()
func (_ArbOwner *ArbOwnerSession) SetL2BaseFee(priceInWei *big.Int) (*types.Transaction, error) {
	return _ArbOwner.Contract.SetL2BaseFee(&_ArbOwner.TransactOpts, priceInWei)
}

// SetL2BaseFee is a paid mutator transaction binding the contract method 0xd99bc80e.
//
// Solidity: function setL2BaseFee(uint256 priceInWei) returns()
func (_ArbOwner *ArbOwnerTransactorSession) SetL2BaseFee(priceInWei *big.Int) (*types.Transaction, error) {
	return _ArbOwner.Contract.SetL2BaseFee(&_ArbOwner.TransactOpts, priceInWei)
}

// SetL2GasBacklogTolerance is a paid mutator transaction binding the contract method 0x198e7157.
//
// Solidity: function setL2GasBacklogTolerance(uint64 sec) returns()
func (_ArbOwner *ArbOwnerTransactor) SetL2GasBacklogTolerance(opts *bind.TransactOpts, sec uint64) (*types.Transaction, error) {
	return _ArbOwner.contract.Transact(opts, "setL2GasBacklogTolerance", sec)
}

// SetL2GasBacklogTolerance is a paid mutator transaction binding the contract method 0x198e7157.
//
// Solidity: function setL2GasBacklogTolerance(uint64 sec) returns()
func (_ArbOwner *ArbOwnerSession) SetL2GasBacklogTolerance(sec uint64) (*types.Transaction, error) {
	return _ArbOwner.Contract.SetL2GasBacklogTolerance(&_ArbOwner.TransactOpts, sec)
}

// SetL2GasBacklogTolerance is a paid mutator transaction binding the contract method 0x198e7157.
//
// Solidity: function setL2GasBacklogTolerance(uint64 sec) returns()
func (_ArbOwner *ArbOwnerTransactorSession) SetL2GasBacklogTolerance(sec uint64) (*types.Transaction, error) {
	return _ArbOwner.Contract.SetL2GasBacklogTolerance(&_ArbOwner.TransactOpts, sec)
}

// SetL2GasPricingInertia is a paid mutator transaction binding the contract method 0x3fd62a29.
//
// Solidity: function setL2GasPricingInertia(uint64 sec) returns()
func (_ArbOwner *ArbOwnerTransactor) SetL2GasPricingInertia(opts *bind.TransactOpts, sec uint64) (*types.Transaction, error) {
	return _ArbOwner.contract.Transact(opts, "setL2GasPricingInertia", sec)
}

// SetL2GasPricingInertia is a paid mutator transaction binding the contract method 0x3fd62a29.
//
// Solidity: function setL2GasPricingInertia(uint64 sec) returns()
func (_ArbOwner *ArbOwnerSession) SetL2GasPricingInertia(sec uint64) (*types.Transaction, error) {
	return _ArbOwner.Contract.SetL2GasPricingInertia(&_ArbOwner.TransactOpts, sec)
}

// SetL2GasPricingInertia is a paid mutator transaction binding the contract method 0x3fd62a29.
//
// Solidity: function setL2GasPricingInertia(uint64 sec) returns()
func (_ArbOwner *ArbOwnerTransactorSession) SetL2GasPricingInertia(sec uint64) (*types.Transaction, error) {
	return _ArbOwner.Contract.SetL2GasPricingInertia(&_ArbOwner.TransactOpts, sec)
}

// SetMaxTxGasLimit is a paid mutator transaction binding the contract method 0x39673611.
//
// Solidity: function setMaxTxGasLimit(uint64 limit) returns()
func (_ArbOwner *ArbOwnerTransactor) SetMaxTxGasLimit(opts *bind.TransactOpts, limit uint64) (*types.Transaction, error) {
	return _ArbOwner.contract.Transact(opts, "setMaxTxGasLimit", limit)
}

// SetMaxTxGasLimit is a paid mutator transaction binding the contract method 0x39673611.
//
// Solidity: function setMaxTxGasLimit(uint64 limit) returns()
func (_ArbOwner *ArbOwnerSession) SetMaxTxGasLimit(limit uint64) (*types.Transaction, error) {
	return _ArbOwner.Contract.SetMaxTxGasLimit(&_ArbOwner.TransactOpts, limit)
}

// SetMaxTxGasLimit is a paid mutator transaction binding the contract method 0x39673611.
//
// Solidity: function setMaxTxGasLimit(uint64 limit) returns()
func (_ArbOwner *ArbOwnerTransactorSession) SetMaxTxGasLimit(limit uint64) (*types.Transaction, error) {
	return _ArbOwner.Contract.SetMaxTxGasLimit(&_ArbOwner.TransactOpts, limit)
}

// SetMinimumL2BaseFee is a paid mutator transaction binding the contract method 0xa0188cdb.
//
// Solidity: function setMinimumL2BaseFee(uint256 priceInWei) returns()
func (_ArbOwner *ArbOwnerTransactor) SetMinimumL2BaseFee(opts *bind.TransactOpts, priceInWei *big.Int) (*types.Transaction, error) {
	return _ArbOwner.contract.Transact(opts, "setMinimumL2BaseFee", priceInWei)
}

// SetMinimumL2BaseFee is a paid mutator transaction binding the contract method 0xa0188cdb.
//
// Solidity: function setMinimumL2BaseFee(uint256 priceInWei) returns()
func (_ArbOwner *ArbOwnerSession) SetMinimumL2BaseFee(priceInWei *big.Int) (*types.Transaction, error) {
	return _ArbOwner.Contract.SetMinimumL2BaseFee(&_ArbOwner.TransactOpts, priceInWei)
}

// SetMinimumL2BaseFee is a paid mutator transaction binding the contract method 0xa0188cdb.
//
// Solidity: function setMinimumL2BaseFee(uint256 priceInWei) returns()
func (_ArbOwner *ArbOwnerTransactorSession) SetMinimumL2BaseFee(priceInWei *big.Int) (*types.Transaction, error) {
	return _ArbOwner.Contract.SetMinimumL2BaseFee(&_ArbOwner.TransactOpts, priceInWei)
}

// SetNativeTokenManagementFrom is a paid mutator transaction binding the contract method 0xbdb8f707.
//
// Solidity: function setNativeTokenManagementFrom(uint64 timestamp) returns()
func (_ArbOwner *ArbOwnerTransactor) SetNativeTokenManagementFrom(opts *bind.TransactOpts, timestamp uint64) (*types.Transaction, error) {
	return _ArbOwner.contract.Transact(opts, "setNativeTokenManagementFrom", timestamp)
}

// SetNativeTokenManagementFrom is a paid mutator transaction binding the contract method 0xbdb8f707.
//
// Solidity: function setNativeTokenManagementFrom(uint64 timestamp) returns()
func (_ArbOwner *ArbOwnerSession) SetNativeTokenManagementFrom(timestamp uint64) (*types.Transaction, error) {
	return _ArbOwner.Contract.SetNativeTokenManagementFrom(&_ArbOwner.TransactOpts, timestamp)
}

// SetNativeTokenManagementFrom is a paid mutator transaction binding the contract method 0xbdb8f707.
//
// Solidity: function setNativeTokenManagementFrom(uint64 timestamp) returns()
func (_ArbOwner *ArbOwnerTransactorSession) SetNativeTokenManagementFrom(timestamp uint64) (*types.Transaction, error) {
	return _ArbOwner.Contract.SetNativeTokenManagementFrom(&_ArbOwner.TransactOpts, timestamp)
}

// SetNetworkFeeAccount is a paid mutator transaction binding the contract method 0xfcdde2b4.
//
// Solidity: function setNetworkFeeAccount(address newNetworkFeeAccount) returns()
func (_ArbOwner *ArbOwnerTransactor) SetNetworkFeeAccount(opts *bind.TransactOpts, newNetworkFeeAccount common.Address) (*types.Transaction, error) {
	return _ArbOwner.contract.Transact(opts, "setNetworkFeeAccount", newNetworkFeeAccount)
}

// SetNetworkFeeAccount is a paid mutator transaction binding the contract method 0xfcdde2b4.
//
// Solidity: function setNetworkFeeAccount(address newNetworkFeeAccount) returns()
func (_ArbOwner *ArbOwnerSession) SetNetworkFeeAccount(newNetworkFeeAccount common.Address) (*types.Transaction, error) {
	return _ArbOwner.Contract.SetNetworkFeeAccount(&_ArbOwner.TransactOpts, newNetworkFeeAccount)
}

// SetNetworkFeeAccount is a paid mutator transaction binding the contract method 0xfcdde2b4.
//
// Solidity: function setNetworkFeeAccount(address newNetworkFeeAccount) returns()
func (_ArbOwner *ArbOwnerTransactorSession) SetNetworkFeeAccount(newNetworkFeeAccount common.Address) (*types.Transaction, error) {
	return _ArbOwner.Contract.SetNetworkFeeAccount(&_ArbOwner.TransactOpts, newNetworkFeeAccount)
}

// SetPerBatchGasCharge is a paid mutator transaction binding the contract method 0xfad7f20b.
//
// Solidity: function setPerBatchGasCharge(int64 cost) returns()
func (_ArbOwner *ArbOwnerTransactor) SetPerBatchGasCharge(opts *bind.TransactOpts, cost int64) (*types.Transaction, error) {
	return _ArbOwner.contract.Transact(opts, "setPerBatchGasCharge", cost)
}

// SetPerBatchGasCharge is a paid mutator transaction binding the contract method 0xfad7f20b.
//
// Solidity: function setPerBatchGasCharge(int64 cost) returns()
func (_ArbOwner *ArbOwnerSession) SetPerBatchGasCharge(cost int64) (*types.Transaction, error) {
	return _ArbOwner.Contract.SetPerBatchGasCharge(&_ArbOwner.TransactOpts, cost)
}

// SetPerBatchGasCharge is a paid mutator transaction binding the contract method 0xfad7f20b.
//
// Solidity: function setPerBatchGasCharge(int64 cost) returns()
func (_ArbOwner *ArbOwnerTransactorSession) SetPerBatchGasCharge(cost int64) (*types.Transaction, error) {
	return _ArbOwner.Contract.SetPerBatchGasCharge(&_ArbOwner.TransactOpts, cost)
}

// SetSpeedLimit is a paid mutator transaction binding the contract method 0x4d7a060d.
//
// Solidity: function setSpeedLimit(uint64 limit) returns()
func (_ArbOwner *ArbOwnerTransactor) SetSpeedLimit(opts *bind.TransactOpts, limit uint64) (*types.Transaction, error) {
	return _ArbOwner.contract.Transact(opts, "setSpeedLimit", limit)
}

// SetSpeedLimit is a paid mutator transaction binding the contract method 0x4d7a060d.
//
// Solidity: function setSpeedLimit(uint64 limit) returns()
func (_ArbOwner *ArbOwnerSession) SetSpeedLimit(limit uint64) (*types.Transaction, error) {
	return _ArbOwner.Contract.SetSpeedLimit(&_ArbOwner.TransactOpts, limit)
}

// SetSpeedLimit is a paid mutator transaction binding the contract method 0x4d7a060d.
//
// Solidity: function setSpeedLimit(uint64 limit) returns()
func (_ArbOwner *ArbOwnerTransactorSession) SetSpeedLimit(limit uint64) (*types.Transaction, error) {
	return _ArbOwner.Contract.SetSpeedLimit(&_ArbOwner.TransactOpts, limit)
}

// SetWasmBlockCacheSize is a paid mutator transaction binding the contract method 0x380f1457.
//
// Solidity: function setWasmBlockCacheSize(uint16 count) returns()
func (_ArbOwner *ArbOwnerTransactor) SetWasmBlockCacheSize(opts *bind.TransactOpts, count uint16) (*types.Transaction, error) {
	return _ArbOwner.contract.Transact(opts, "setWasmBlockCacheSize", count)
}

// SetWasmBlockCacheSize is a paid mutator transaction binding the contract method 0x380f1457.
//
// Solidity: function setWasmBlockCacheSize(uint16 count) returns()
func (_ArbOwner *ArbOwnerSession) SetWasmBlockCacheSize(count uint16) (*types.Transaction, error) {
	return _ArbOwner.Contract.SetWasmBlockCacheSize(&_ArbOwner.TransactOpts, count)
}

// SetWasmBlockCacheSize is a paid mutator transaction binding the contract method 0x380f1457.
//
// Solidity: function setWasmBlockCacheSize(uint16 count) returns()
func (_ArbOwner *ArbOwnerTransactorSession) SetWasmBlockCacheSize(count uint16) (*types.Transaction, error) {
	return _ArbOwner.Contract.SetWasmBlockCacheSize(&_ArbOwner.TransactOpts, count)
}

// SetWasmExpiryDays is a paid mutator transaction binding the contract method 0xaac68018.
//
// Solidity: function setWasmExpiryDays(uint16 _days) returns()
func (_ArbOwner *ArbOwnerTransactor) SetWasmExpiryDays(opts *bind.TransactOpts, _days uint16) (*types.Transaction, error) {
	return _ArbOwner.contract.Transact(opts, "setWasmExpiryDays", _days)
}

// SetWasmExpiryDays is a paid mutator transaction binding the contract method 0xaac68018.
//
// Solidity: function setWasmExpiryDays(uint16 _days) returns()
func (_ArbOwner *ArbOwnerSession) SetWasmExpiryDays(_days uint16) (*types.Transaction, error) {
	return _ArbOwner.Contract.SetWasmExpiryDays(&_ArbOwner.TransactOpts, _days)
}

// SetWasmExpiryDays is a paid mutator transaction binding the contract method 0xaac68018.
//
// Solidity: function setWasmExpiryDays(uint16 _days) returns()
func (_ArbOwner *ArbOwnerTransactorSession) SetWasmExpiryDays(_days uint16) (*types.Transaction, error) {
	return _ArbOwner.Contract.SetWasmExpiryDays(&_ArbOwner.TransactOpts, _days)
}

// SetWasmFreePages is a paid mutator transaction binding the contract method 0x3f37a846.
//
// Solidity: function setWasmFreePages(uint16 pages) returns()
func (_ArbOwner *ArbOwnerTransactor) SetWasmFreePages(opts *bind.TransactOpts, pages uint16) (*types.Transaction, error) {
	return _ArbOwner.contract.Transact(opts, "setWasmFreePages", pages)
}

// SetWasmFreePages is a paid mutator transaction binding the contract method 0x3f37a846.
//
// Solidity: function setWasmFreePages(uint16 pages) returns()
func (_ArbOwner *ArbOwnerSession) SetWasmFreePages(pages uint16) (*types.Transaction, error) {
	return _ArbOwner.Contract.SetWasmFreePages(&_ArbOwner.TransactOpts, pages)
}

// SetWasmFreePages is a paid mutator transaction binding the contract method 0x3f37a846.
//
// Solidity: function setWasmFreePages(uint16 pages) returns()
func (_ArbOwner *ArbOwnerTransactorSession) SetWasmFreePages(pages uint16) (*types.Transaction, error) {
	return _ArbOwner.Contract.SetWasmFreePages(&_ArbOwner.TransactOpts, pages)
}

// SetWasmInitCostScalar is a paid mutator transaction binding the contract method 0x67e0718f.
//
// Solidity: function setWasmInitCostScalar(uint64 percent) returns()
func (_ArbOwner *ArbOwnerTransactor) SetWasmInitCostScalar(opts *bind.TransactOpts, percent uint64) (*types.Transaction, error) {
	return _ArbOwner.contract.Transact(opts, "setWasmInitCostScalar", percent)
}

// SetWasmInitCostScalar is a paid mutator transaction binding the contract method 0x67e0718f.
//
// Solidity: function setWasmInitCostScalar(uint64 percent) returns()
func (_ArbOwner *ArbOwnerSession) SetWasmInitCostScalar(percent uint64) (*types.Transaction, error) {
	return _ArbOwner.Contract.SetWasmInitCostScalar(&_ArbOwner.TransactOpts, percent)
}

// SetWasmInitCostScalar is a paid mutator transaction binding the contract method 0x67e0718f.
//
// Solidity: function setWasmInitCostScalar(uint64 percent) returns()
func (_ArbOwner *ArbOwnerTransactorSession) SetWasmInitCostScalar(percent uint64) (*types.Transaction, error) {
	return _ArbOwner.Contract.SetWasmInitCostScalar(&_ArbOwner.TransactOpts, percent)
}

// SetWasmKeepaliveDays is a paid mutator transaction binding the contract method 0x2a9cbe3e.
//
// Solidity: function setWasmKeepaliveDays(uint16 _days) returns()
func (_ArbOwner *ArbOwnerTransactor) SetWasmKeepaliveDays(opts *bind.TransactOpts, _days uint16) (*types.Transaction, error) {
	return _ArbOwner.contract.Transact(opts, "setWasmKeepaliveDays", _days)
}

// SetWasmKeepaliveDays is a paid mutator transaction binding the contract method 0x2a9cbe3e.
//
// Solidity: function setWasmKeepaliveDays(uint16 _days) returns()
func (_ArbOwner *ArbOwnerSession) SetWasmKeepaliveDays(_days uint16) (*types.Transaction, error) {
	return _ArbOwner.Contract.SetWasmKeepaliveDays(&_ArbOwner.TransactOpts, _days)
}

// SetWasmKeepaliveDays is a paid mutator transaction binding the contract method 0x2a9cbe3e.
//
// Solidity: function setWasmKeepaliveDays(uint16 _days) returns()
func (_ArbOwner *ArbOwnerTransactorSession) SetWasmKeepaliveDays(_days uint16) (*types.Transaction, error) {
	return _ArbOwner.Contract.SetWasmKeepaliveDays(&_ArbOwner.TransactOpts, _days)
}

// SetWasmMaxSize is a paid mutator transaction binding the contract method 0x455ec2eb.
//
// Solidity: function setWasmMaxSize(uint32 size) returns()
func (_ArbOwner *ArbOwnerTransactor) SetWasmMaxSize(opts *bind.TransactOpts, size uint32) (*types.Transaction, error) {
	return _ArbOwner.contract.Transact(opts, "setWasmMaxSize", size)
}

// SetWasmMaxSize is a paid mutator transaction binding the contract method 0x455ec2eb.
//
// Solidity: function setWasmMaxSize(uint32 size) returns()
func (_ArbOwner *ArbOwnerSession) SetWasmMaxSize(size uint32) (*types.Transaction, error) {
	return _ArbOwner.Contract.SetWasmMaxSize(&_ArbOwner.TransactOpts, size)
}

// SetWasmMaxSize is a paid mutator transaction binding the contract method 0x455ec2eb.
//
// Solidity: function setWasmMaxSize(uint32 size) returns()
func (_ArbOwner *ArbOwnerTransactorSession) SetWasmMaxSize(size uint32) (*types.Transaction, error) {
	return _ArbOwner.Contract.SetWasmMaxSize(&_ArbOwner.TransactOpts, size)
}

// SetWasmMaxStackDepth is a paid mutator transaction binding the contract method 0x4567cc8e.
//
// Solidity: function setWasmMaxStackDepth(uint32 depth) returns()
func (_ArbOwner *ArbOwnerTransactor) SetWasmMaxStackDepth(opts *bind.TransactOpts, depth uint32) (*types.Transaction, error) {
	return _ArbOwner.contract.Transact(opts, "setWasmMaxStackDepth", depth)
}

// SetWasmMaxStackDepth is a paid mutator transaction binding the contract method 0x4567cc8e.
//
// Solidity: function setWasmMaxStackDepth(uint32 depth) returns()
func (_ArbOwner *ArbOwnerSession) SetWasmMaxStackDepth(depth uint32) (*types.Transaction, error) {
	return _ArbOwner.Contract.SetWasmMaxStackDepth(&_ArbOwner.TransactOpts, depth)
}

// SetWasmMaxStackDepth is a paid mutator transaction binding the contract method 0x4567cc8e.
//
// Solidity: function setWasmMaxStackDepth(uint32 depth) returns()
func (_ArbOwner *ArbOwnerTransactorSession) SetWasmMaxStackDepth(depth uint32) (*types.Transaction, error) {
	return _ArbOwner.Contract.SetWasmMaxStackDepth(&_ArbOwner.TransactOpts, depth)
}

// SetWasmMinInitGas is a paid mutator transaction binding the contract method 0x8293405e.
//
// Solidity: function setWasmMinInitGas(uint8 gas, uint16 cached) returns()
func (_ArbOwner *ArbOwnerTransactor) SetWasmMinInitGas(opts *bind.TransactOpts, gas uint8, cached uint16) (*types.Transaction, error) {
	return _ArbOwner.contract.Transact(opts, "setWasmMinInitGas", gas, cached)
}

// SetWasmMinInitGas is a paid mutator transaction binding the contract method 0x8293405e.
//
// Solidity: function setWasmMinInitGas(uint8 gas, uint16 cached) returns()
func (_ArbOwner *ArbOwnerSession) SetWasmMinInitGas(gas uint8, cached uint16) (*types.Transaction, error) {
	return _ArbOwner.Contract.SetWasmMinInitGas(&_ArbOwner.TransactOpts, gas, cached)
}

// SetWasmMinInitGas is a paid mutator transaction binding the contract method 0x8293405e.
//
// Solidity: function setWasmMinInitGas(uint8 gas, uint16 cached) returns()
func (_ArbOwner *ArbOwnerTransactorSession) SetWasmMinInitGas(gas uint8, cached uint16) (*types.Transaction, error) {
	return _ArbOwner.Contract.SetWasmMinInitGas(&_ArbOwner.TransactOpts, gas, cached)
}

// SetWasmPageGas is a paid mutator transaction binding the contract method 0xaaa619e0.
//
// Solidity: function setWasmPageGas(uint16 gas) returns()
func (_ArbOwner *ArbOwnerTransactor) SetWasmPageGas(opts *bind.TransactOpts, gas uint16) (*types.Transaction, error) {
	return _ArbOwner.contract.Transact(opts, "setWasmPageGas", gas)
}

// SetWasmPageGas is a paid mutator transaction binding the contract method 0xaaa619e0.
//
// Solidity: function setWasmPageGas(uint16 gas) returns()
func (_ArbOwner *ArbOwnerSession) SetWasmPageGas(gas uint16) (*types.Transaction, error) {
	return _ArbOwner.Contract.SetWasmPageGas(&_ArbOwner.TransactOpts, gas)
}

// SetWasmPageGas is a paid mutator transaction binding the contract method 0xaaa619e0.
//
// Solidity: function setWasmPageGas(uint16 gas) returns()
func (_ArbOwner *ArbOwnerTransactorSession) SetWasmPageGas(gas uint16) (*types.Transaction, error) {
	return _ArbOwner.Contract.SetWasmPageGas(&_ArbOwner.TransactOpts, gas)
}

// SetWasmPageLimit is a paid mutator transaction binding the contract method 0x6595381a.
//
// Solidity: function setWasmPageLimit(uint16 limit) returns()
func (_ArbOwner *ArbOwnerTransactor) SetWasmPageLimit(opts *bind.TransactOpts, limit uint16) (*types.Transaction, error) {
	return _ArbOwner.contract.Transact(opts, "setWasmPageLimit", limit)
}

// SetWasmPageLimit is a paid mutator transaction binding the contract method 0x6595381a.
//
// Solidity: function setWasmPageLimit(uint16 limit) returns()
func (_ArbOwner *ArbOwnerSession) SetWasmPageLimit(limit uint16) (*types.Transaction, error) {
	return _ArbOwner.Contract.SetWasmPageLimit(&_ArbOwner.TransactOpts, limit)
}

// SetWasmPageLimit is a paid mutator transaction binding the contract method 0x6595381a.
//
// Solidity: function setWasmPageLimit(uint16 limit) returns()
func (_ArbOwner *ArbOwnerTransactorSession) SetWasmPageLimit(limit uint16) (*types.Transaction, error) {
	return _ArbOwner.Contract.SetWasmPageLimit(&_ArbOwner.TransactOpts, limit)
}

// ArbOwnerOwnerActsIterator is returned from FilterOwnerActs and is used to iterate over the raw logs and unpacked data for OwnerActs events raised by the ArbOwner contract.
type ArbOwnerOwnerActsIterator struct {
	Event *ArbOwnerOwnerActs // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ArbOwnerOwnerActsIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ArbOwnerOwnerActs)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ArbOwnerOwnerActs)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ArbOwnerOwnerActsIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ArbOwnerOwnerActsIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ArbOwnerOwnerActs represents a OwnerActs event raised by the ArbOwner contract.
type ArbOwnerOwnerActs struct {
	Method [4]byte
	Owner  common.Address
	Data   []byte
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterOwnerActs is a free log retrieval operation binding the contract event 0x3c9e6a772755407311e3b35b3ee56799df8f87395941b3a658eee9e08a67ebda.
//
// Solidity: event OwnerActs(bytes4 indexed method, address indexed owner, bytes data)
func (_ArbOwner *ArbOwnerFilterer) FilterOwnerActs(opts *bind.FilterOpts, method [][4]byte, owner []common.Address) (*ArbOwnerOwnerActsIterator, error) {

	var methodRule []interface{}
	for _, methodItem := range method {
		methodRule = append(methodRule, methodItem)
	}
	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _ArbOwner.contract.FilterLogs(opts, "OwnerActs", methodRule, ownerRule)
	if err != nil {
		return nil, err
	}
	return &ArbOwnerOwnerActsIterator{contract: _ArbOwner.contract, event: "OwnerActs", logs: logs, sub: sub}, nil
}

// WatchOwnerActs is a free log subscription operation binding the contract event 0x3c9e6a772755407311e3b35b3ee56799df8f87395941b3a658eee9e08a67ebda.
//
// Solidity: event OwnerActs(bytes4 indexed method, address indexed owner, bytes data)
func (_ArbOwner *ArbOwnerFilterer) WatchOwnerActs(opts *bind.WatchOpts, sink chan<- *ArbOwnerOwnerActs, method [][4]byte, owner []common.Address) (event.Subscription, error) {

	var methodRule []interface{}
	for _, methodItem := range method {
		methodRule = append(methodRule, methodItem)
	}
	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _ArbOwner.contract.WatchLogs(opts, "OwnerActs", methodRule, ownerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ArbOwnerOwnerActs)
				if err := _ArbOwner.contract.UnpackLog(event, "OwnerActs", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnerActs is a log parse operation binding the contract event 0x3c9e6a772755407311e3b35b3ee56799df8f87395941b3a658eee9e08a67ebda.
//
// Solidity: event OwnerActs(bytes4 indexed method, address indexed owner, bytes data)
func (_ArbOwner *ArbOwnerFilterer) ParseOwnerActs(log types.Log) (*ArbOwnerOwnerActs, error) {
	event := new(ArbOwnerOwnerActs)
	if err := _ArbOwner.contract.UnpackLog(event, "OwnerActs", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ArbOwnerPublicMetaData contains all meta data concerning the ArbOwnerPublic contract.
var ArbOwnerPublicMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"getAllChainOwners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllNativeTokenOwners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBrotliCompressionLevel\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInfraFeeAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNetworkFeeAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getScheduledUpgrade\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"arbosVersion\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"scheduledForTimestamp\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isCalldataPriceIncreaseEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isChainOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isNativeTokenOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerToRectify\",\"type\":\"address\"}],\"name\":\"rectifyChainOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rectifiedOwner\",\"type\":\"address\"}],\"name\":\"ChainOwnerRectified\",\"type\":\"event\"}]",
}

// ArbOwnerPublicABI is the input ABI used to generate the binding from.
// Deprecated: Use ArbOwnerPublicMetaData.ABI instead.
var ArbOwnerPublicABI = ArbOwnerPublicMetaData.ABI

// ArbOwnerPublic is an auto generated Go binding around an Ethereum contract.
type ArbOwnerPublic struct {
	ArbOwnerPublicCaller     // Read-only binding to the contract
	ArbOwnerPublicTransactor // Write-only binding to the contract
	ArbOwnerPublicFilterer   // Log filterer for contract events
}

// ArbOwnerPublicCaller is an auto generated read-only Go binding around an Ethereum contract.
type ArbOwnerPublicCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ArbOwnerPublicTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ArbOwnerPublicTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ArbOwnerPublicFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ArbOwnerPublicFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ArbOwnerPublicSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ArbOwnerPublicSession struct {
	Contract     *ArbOwnerPublic   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ArbOwnerPublicCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ArbOwnerPublicCallerSession struct {
	Contract *ArbOwnerPublicCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// ArbOwnerPublicTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ArbOwnerPublicTransactorSession struct {
	Contract     *ArbOwnerPublicTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// ArbOwnerPublicRaw is an auto generated low-level Go binding around an Ethereum contract.
type ArbOwnerPublicRaw struct {
	Contract *ArbOwnerPublic // Generic contract binding to access the raw methods on
}

// ArbOwnerPublicCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ArbOwnerPublicCallerRaw struct {
	Contract *ArbOwnerPublicCaller // Generic read-only contract binding to access the raw methods on
}

// ArbOwnerPublicTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ArbOwnerPublicTransactorRaw struct {
	Contract *ArbOwnerPublicTransactor // Generic write-only contract binding to access the raw methods on
}

// NewArbOwnerPublic creates a new instance of ArbOwnerPublic, bound to a specific deployed contract.
func NewArbOwnerPublic(address common.Address, backend bind.ContractBackend) (*ArbOwnerPublic, error) {
	contract, err := bindArbOwnerPublic(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ArbOwnerPublic{ArbOwnerPublicCaller: ArbOwnerPublicCaller{contract: contract}, ArbOwnerPublicTransactor: ArbOwnerPublicTransactor{contract: contract}, ArbOwnerPublicFilterer: ArbOwnerPublicFilterer{contract: contract}}, nil
}

// NewArbOwnerPublicCaller creates a new read-only instance of ArbOwnerPublic, bound to a specific deployed contract.
func NewArbOwnerPublicCaller(address common.Address, caller bind.ContractCaller) (*ArbOwnerPublicCaller, error) {
	contract, err := bindArbOwnerPublic(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ArbOwnerPublicCaller{contract: contract}, nil
}

// NewArbOwnerPublicTransactor creates a new write-only instance of ArbOwnerPublic, bound to a specific deployed contract.
func NewArbOwnerPublicTransactor(address common.Address, transactor bind.ContractTransactor) (*ArbOwnerPublicTransactor, error) {
	contract, err := bindArbOwnerPublic(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ArbOwnerPublicTransactor{contract: contract}, nil
}

// NewArbOwnerPublicFilterer creates a new log filterer instance of ArbOwnerPublic, bound to a specific deployed contract.
func NewArbOwnerPublicFilterer(address common.Address, filterer bind.ContractFilterer) (*ArbOwnerPublicFilterer, error) {
	contract, err := bindArbOwnerPublic(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ArbOwnerPublicFilterer{contract: contract}, nil
}

// bindArbOwnerPublic binds a generic wrapper to an already deployed contract.
func bindArbOwnerPublic(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ArbOwnerPublicMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ArbOwnerPublic *ArbOwnerPublicRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ArbOwnerPublic.Contract.ArbOwnerPublicCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ArbOwnerPublic *ArbOwnerPublicRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ArbOwnerPublic.Contract.ArbOwnerPublicTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ArbOwnerPublic *ArbOwnerPublicRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ArbOwnerPublic.Contract.ArbOwnerPublicTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ArbOwnerPublic *ArbOwnerPublicCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ArbOwnerPublic.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ArbOwnerPublic *ArbOwnerPublicTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ArbOwnerPublic.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ArbOwnerPublic *ArbOwnerPublicTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ArbOwnerPublic.Contract.contract.Transact(opts, method, params...)
}

// GetAllChainOwners is a free data retrieval call binding the contract method 0x516b4e0f.
//
// Solidity: function getAllChainOwners() view returns(address[])
func (_ArbOwnerPublic *ArbOwnerPublicCaller) GetAllChainOwners(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _ArbOwnerPublic.contract.Call(opts, &out, "getAllChainOwners")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetAllChainOwners is a free data retrieval call binding the contract method 0x516b4e0f.
//
// Solidity: function getAllChainOwners() view returns(address[])
func (_ArbOwnerPublic *ArbOwnerPublicSession) GetAllChainOwners() ([]common.Address, error) {
	return _ArbOwnerPublic.Contract.GetAllChainOwners(&_ArbOwnerPublic.CallOpts)
}

// GetAllChainOwners is a free data retrieval call binding the contract method 0x516b4e0f.
//
// Solidity: function getAllChainOwners() view returns(address[])
func (_ArbOwnerPublic *ArbOwnerPublicCallerSession) GetAllChainOwners() ([]common.Address, error) {
	return _ArbOwnerPublic.Contract.GetAllChainOwners(&_ArbOwnerPublic.CallOpts)
}

// GetAllNativeTokenOwners is a free data retrieval call binding the contract method 0x3f8601e4.
//
// Solidity: function getAllNativeTokenOwners() view returns(address[])
func (_ArbOwnerPublic *ArbOwnerPublicCaller) GetAllNativeTokenOwners(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _ArbOwnerPublic.contract.Call(opts, &out, "getAllNativeTokenOwners")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetAllNativeTokenOwners is a free data retrieval call binding the contract method 0x3f8601e4.
//
// Solidity: function getAllNativeTokenOwners() view returns(address[])
func (_ArbOwnerPublic *ArbOwnerPublicSession) GetAllNativeTokenOwners() ([]common.Address, error) {
	return _ArbOwnerPublic.Contract.GetAllNativeTokenOwners(&_ArbOwnerPublic.CallOpts)
}

// GetAllNativeTokenOwners is a free data retrieval call binding the contract method 0x3f8601e4.
//
// Solidity: function getAllNativeTokenOwners() view returns(address[])
func (_ArbOwnerPublic *ArbOwnerPublicCallerSession) GetAllNativeTokenOwners() ([]common.Address, error) {
	return _ArbOwnerPublic.Contract.GetAllNativeTokenOwners(&_ArbOwnerPublic.CallOpts)
}

// GetBrotliCompressionLevel is a free data retrieval call binding the contract method 0x22d499c7.
//
// Solidity: function getBrotliCompressionLevel() view returns(uint64)
func (_ArbOwnerPublic *ArbOwnerPublicCaller) GetBrotliCompressionLevel(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _ArbOwnerPublic.contract.Call(opts, &out, "getBrotliCompressionLevel")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// GetBrotliCompressionLevel is a free data retrieval call binding the contract method 0x22d499c7.
//
// Solidity: function getBrotliCompressionLevel() view returns(uint64)
func (_ArbOwnerPublic *ArbOwnerPublicSession) GetBrotliCompressionLevel() (uint64, error) {
	return _ArbOwnerPublic.Contract.GetBrotliCompressionLevel(&_ArbOwnerPublic.CallOpts)
}

// GetBrotliCompressionLevel is a free data retrieval call binding the contract method 0x22d499c7.
//
// Solidity: function getBrotliCompressionLevel() view returns(uint64)
func (_ArbOwnerPublic *ArbOwnerPublicCallerSession) GetBrotliCompressionLevel() (uint64, error) {
	return _ArbOwnerPublic.Contract.GetBrotliCompressionLevel(&_ArbOwnerPublic.CallOpts)
}

// GetInfraFeeAccount is a free data retrieval call binding the contract method 0xee95a824.
//
// Solidity: function getInfraFeeAccount() view returns(address)
func (_ArbOwnerPublic *ArbOwnerPublicCaller) GetInfraFeeAccount(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ArbOwnerPublic.contract.Call(opts, &out, "getInfraFeeAccount")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetInfraFeeAccount is a free data retrieval call binding the contract method 0xee95a824.
//
// Solidity: function getInfraFeeAccount() view returns(address)
func (_ArbOwnerPublic *ArbOwnerPublicSession) GetInfraFeeAccount() (common.Address, error) {
	return _ArbOwnerPublic.Contract.GetInfraFeeAccount(&_ArbOwnerPublic.CallOpts)
}

// GetInfraFeeAccount is a free data retrieval call binding the contract method 0xee95a824.
//
// Solidity: function getInfraFeeAccount() view returns(address)
func (_ArbOwnerPublic *ArbOwnerPublicCallerSession) GetInfraFeeAccount() (common.Address, error) {
	return _ArbOwnerPublic.Contract.GetInfraFeeAccount(&_ArbOwnerPublic.CallOpts)
}

// GetNetworkFeeAccount is a free data retrieval call binding the contract method 0x2d9125e9.
//
// Solidity: function getNetworkFeeAccount() view returns(address)
func (_ArbOwnerPublic *ArbOwnerPublicCaller) GetNetworkFeeAccount(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ArbOwnerPublic.contract.Call(opts, &out, "getNetworkFeeAccount")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetNetworkFeeAccount is a free data retrieval call binding the contract method 0x2d9125e9.
//
// Solidity: function getNetworkFeeAccount() view returns(address)
func (_ArbOwnerPublic *ArbOwnerPublicSession) GetNetworkFeeAccount() (common.Address, error) {
	return _ArbOwnerPublic.Contract.GetNetworkFeeAccount(&_ArbOwnerPublic.CallOpts)
}

// GetNetworkFeeAccount is a free data retrieval call binding the contract method 0x2d9125e9.
//
// Solidity: function getNetworkFeeAccount() view returns(address)
func (_ArbOwnerPublic *ArbOwnerPublicCallerSession) GetNetworkFeeAccount() (common.Address, error) {
	return _ArbOwnerPublic.Contract.GetNetworkFeeAccount(&_ArbOwnerPublic.CallOpts)
}

// GetScheduledUpgrade is a free data retrieval call binding the contract method 0x81ef944c.
//
// Solidity: function getScheduledUpgrade() view returns(uint64 arbosVersion, uint64 scheduledForTimestamp)
func (_ArbOwnerPublic *ArbOwnerPublicCaller) GetScheduledUpgrade(opts *bind.CallOpts) (struct {
	ArbosVersion          uint64
	ScheduledForTimestamp uint64
}, error) {
	var out []interface{}
	err := _ArbOwnerPublic.contract.Call(opts, &out, "getScheduledUpgrade")

	outstruct := new(struct {
		ArbosVersion          uint64
		ScheduledForTimestamp uint64
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.ArbosVersion = *abi.ConvertType(out[0], new(uint64)).(*uint64)
	outstruct.ScheduledForTimestamp = *abi.ConvertType(out[1], new(uint64)).(*uint64)

	return *outstruct, err

}

// GetScheduledUpgrade is a free data retrieval call binding the contract method 0x81ef944c.
//
// Solidity: function getScheduledUpgrade() view returns(uint64 arbosVersion, uint64 scheduledForTimestamp)
func (_ArbOwnerPublic *ArbOwnerPublicSession) GetScheduledUpgrade() (struct {
	ArbosVersion          uint64
	ScheduledForTimestamp uint64
}, error) {
	return _ArbOwnerPublic.Contract.GetScheduledUpgrade(&_ArbOwnerPublic.CallOpts)
}

// GetScheduledUpgrade is a free data retrieval call binding the contract method 0x81ef944c.
//
// Solidity: function getScheduledUpgrade() view returns(uint64 arbosVersion, uint64 scheduledForTimestamp)
func (_ArbOwnerPublic *ArbOwnerPublicCallerSession) GetScheduledUpgrade() (struct {
	ArbosVersion          uint64
	ScheduledForTimestamp uint64
}, error) {
	return _ArbOwnerPublic.Contract.GetScheduledUpgrade(&_ArbOwnerPublic.CallOpts)
}

// IsCalldataPriceIncreaseEnabled is a free data retrieval call binding the contract method 0x2aa9551e.
//
// Solidity: function isCalldataPriceIncreaseEnabled() view returns(bool)
func (_ArbOwnerPublic *ArbOwnerPublicCaller) IsCalldataPriceIncreaseEnabled(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _ArbOwnerPublic.contract.Call(opts, &out, "isCalldataPriceIncreaseEnabled")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsCalldataPriceIncreaseEnabled is a free data retrieval call binding the contract method 0x2aa9551e.
//
// Solidity: function isCalldataPriceIncreaseEnabled() view returns(bool)
func (_ArbOwnerPublic *ArbOwnerPublicSession) IsCalldataPriceIncreaseEnabled() (bool, error) {
	return _ArbOwnerPublic.Contract.IsCalldataPriceIncreaseEnabled(&_ArbOwnerPublic.CallOpts)
}

// IsCalldataPriceIncreaseEnabled is a free data retrieval call binding the contract method 0x2aa9551e.
//
// Solidity: function isCalldataPriceIncreaseEnabled() view returns(bool)
func (_ArbOwnerPublic *ArbOwnerPublicCallerSession) IsCalldataPriceIncreaseEnabled() (bool, error) {
	return _ArbOwnerPublic.Contract.IsCalldataPriceIncreaseEnabled(&_ArbOwnerPublic.CallOpts)
}

// IsChainOwner is a free data retrieval call binding the contract method 0x26ef7f68.
//
// Solidity: function isChainOwner(address addr) view returns(bool)
func (_ArbOwnerPublic *ArbOwnerPublicCaller) IsChainOwner(opts *bind.CallOpts, addr common.Address) (bool, error) {
	var out []interface{}
	err := _ArbOwnerPublic.contract.Call(opts, &out, "isChainOwner", addr)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsChainOwner is a free data retrieval call binding the contract method 0x26ef7f68.
//
// Solidity: function isChainOwner(address addr) view returns(bool)
func (_ArbOwnerPublic *ArbOwnerPublicSession) IsChainOwner(addr common.Address) (bool, error) {
	return _ArbOwnerPublic.Contract.IsChainOwner(&_ArbOwnerPublic.CallOpts, addr)
}

// IsChainOwner is a free data retrieval call binding the contract method 0x26ef7f68.
//
// Solidity: function isChainOwner(address addr) view returns(bool)
func (_ArbOwnerPublic *ArbOwnerPublicCallerSession) IsChainOwner(addr common.Address) (bool, error) {
	return _ArbOwnerPublic.Contract.IsChainOwner(&_ArbOwnerPublic.CallOpts, addr)
}

// IsNativeTokenOwner is a free data retrieval call binding the contract method 0xc686f4db.
//
// Solidity: function isNativeTokenOwner(address addr) view returns(bool)
func (_ArbOwnerPublic *ArbOwnerPublicCaller) IsNativeTokenOwner(opts *bind.CallOpts, addr common.Address) (bool, error) {
	var out []interface{}
	err := _ArbOwnerPublic.contract.Call(opts, &out, "isNativeTokenOwner", addr)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsNativeTokenOwner is a free data retrieval call binding the contract method 0xc686f4db.
//
// Solidity: function isNativeTokenOwner(address addr) view returns(bool)
func (_ArbOwnerPublic *ArbOwnerPublicSession) IsNativeTokenOwner(addr common.Address) (bool, error) {
	return _ArbOwnerPublic.Contract.IsNativeTokenOwner(&_ArbOwnerPublic.CallOpts, addr)
}

// IsNativeTokenOwner is a free data retrieval call binding the contract method 0xc686f4db.
//
// Solidity: function isNativeTokenOwner(address addr) view returns(bool)
func (_ArbOwnerPublic *ArbOwnerPublicCallerSession) IsNativeTokenOwner(addr common.Address) (bool, error) {
	return _ArbOwnerPublic.Contract.IsNativeTokenOwner(&_ArbOwnerPublic.CallOpts, addr)
}

// RectifyChainOwner is a paid mutator transaction binding the contract method 0x6fe86373.
//
// Solidity: function rectifyChainOwner(address ownerToRectify) returns()
func (_ArbOwnerPublic *ArbOwnerPublicTransactor) RectifyChainOwner(opts *bind.TransactOpts, ownerToRectify common.Address) (*types.Transaction, error) {
	return _ArbOwnerPublic.contract.Transact(opts, "rectifyChainOwner", ownerToRectify)
}

// RectifyChainOwner is a paid mutator transaction binding the contract method 0x6fe86373.
//
// Solidity: function rectifyChainOwner(address ownerToRectify) returns()
func (_ArbOwnerPublic *ArbOwnerPublicSession) RectifyChainOwner(ownerToRectify common.Address) (*types.Transaction, error) {
	return _ArbOwnerPublic.Contract.RectifyChainOwner(&_ArbOwnerPublic.TransactOpts, ownerToRectify)
}

// RectifyChainOwner is a paid mutator transaction binding the contract method 0x6fe86373.
//
// Solidity: function rectifyChainOwner(address ownerToRectify) returns()
func (_ArbOwnerPublic *ArbOwnerPublicTransactorSession) RectifyChainOwner(ownerToRectify common.Address) (*types.Transaction, error) {
	return _ArbOwnerPublic.Contract.RectifyChainOwner(&_ArbOwnerPublic.TransactOpts, ownerToRectify)
}

// ArbOwnerPublicChainOwnerRectifiedIterator is returned from FilterChainOwnerRectified and is used to iterate over the raw logs and unpacked data for ChainOwnerRectified events raised by the ArbOwnerPublic contract.
type ArbOwnerPublicChainOwnerRectifiedIterator struct {
	Event *ArbOwnerPublicChainOwnerRectified // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ArbOwnerPublicChainOwnerRectifiedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ArbOwnerPublicChainOwnerRectified)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ArbOwnerPublicChainOwnerRectified)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ArbOwnerPublicChainOwnerRectifiedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ArbOwnerPublicChainOwnerRectifiedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ArbOwnerPublicChainOwnerRectified represents a ChainOwnerRectified event raised by the ArbOwnerPublic contract.
type ArbOwnerPublicChainOwnerRectified struct {
	RectifiedOwner common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterChainOwnerRectified is a free log retrieval operation binding the contract event 0x14c7c9cb05f84448a0f2fc5775a4048a7210cb040a35fd84cd45b2b863d04d82.
//
// Solidity: event ChainOwnerRectified(address rectifiedOwner)
func (_ArbOwnerPublic *ArbOwnerPublicFilterer) FilterChainOwnerRectified(opts *bind.FilterOpts) (*ArbOwnerPublicChainOwnerRectifiedIterator, error) {

	logs, sub, err := _ArbOwnerPublic.contract.FilterLogs(opts, "ChainOwnerRectified")
	if err != nil {
		return nil, err
	}
	return &ArbOwnerPublicChainOwnerRectifiedIterator{contract: _ArbOwnerPublic.contract, event: "ChainOwnerRectified", logs: logs, sub: sub}, nil
}

// WatchChainOwnerRectified is a free log subscription operation binding the contract event 0x14c7c9cb05f84448a0f2fc5775a4048a7210cb040a35fd84cd45b2b863d04d82.
//
// Solidity: event ChainOwnerRectified(address rectifiedOwner)
func (_ArbOwnerPublic *ArbOwnerPublicFilterer) WatchChainOwnerRectified(opts *bind.WatchOpts, sink chan<- *ArbOwnerPublicChainOwnerRectified) (event.Subscription, error) {

	logs, sub, err := _ArbOwnerPublic.contract.WatchLogs(opts, "ChainOwnerRectified")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ArbOwnerPublicChainOwnerRectified)
				if err := _ArbOwnerPublic.contract.UnpackLog(event, "ChainOwnerRectified", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseChainOwnerRectified is a log parse operation binding the contract event 0x14c7c9cb05f84448a0f2fc5775a4048a7210cb040a35fd84cd45b2b863d04d82.
//
// Solidity: event ChainOwnerRectified(address rectifiedOwner)
func (_ArbOwnerPublic *ArbOwnerPublicFilterer) ParseChainOwnerRectified(log types.Log) (*ArbOwnerPublicChainOwnerRectified, error) {
	event := new(ArbOwnerPublicChainOwnerRectified)
	if err := _ArbOwnerPublic.contract.UnpackLog(event, "ChainOwnerRectified", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ArbRetryableTxMetaData contains all meta data concerning the ArbRetryableTx contract.
var ArbRetryableTxMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"ticketId\",\"type\":\"bytes32\"}],\"name\":\"cancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"ticketId\",\"type\":\"bytes32\"}],\"name\":\"getBeneficiary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentRedeemer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLifetime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"ticketId\",\"type\":\"bytes32\"}],\"name\":\"getTimeout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"ticketId\",\"type\":\"bytes32\"}],\"name\":\"keepalive\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"ticketId\",\"type\":\"bytes32\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"l1BaseFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"callvalue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasFeeCap\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"gasLimit\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"maxSubmissionFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeRefundAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"retryTo\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"retryData\",\"type\":\"bytes\"}],\"name\":\"submitRetryable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"ticketId\",\"type\":\"bytes32\"}],\"name\":\"Canceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"ticketId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTimeout\",\"type\":\"uint256\"}],\"name\":\"LifetimeExtended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"ticketId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"retryTxHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"sequenceNum\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"donatedGas\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"gasDonor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxRefund\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"submissionFeeRefund\",\"type\":\"uint256\"}],\"name\":\"RedeemScheduled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"userTxHash\",\"type\":\"bytes32\"}],\"name\":\"Redeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"ticketId\",\"type\":\"bytes32\"}],\"name\":\"TicketCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NoTicketWithID\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotCallable\",\"type\":\"error\"}]",
}

// ArbRetryableTxABI is the input ABI used to generate the binding from.
// Deprecated: Use ArbRetryableTxMetaData.ABI instead.
var ArbRetryableTxABI = ArbRetryableTxMetaData.ABI

// ArbRetryableTx is an auto generated Go binding around an Ethereum contract.
type ArbRetryableTx struct {
	ArbRetryableTxCaller     // Read-only binding to the contract
	ArbRetryableTxTransactor // Write-only binding to the contract
	ArbRetryableTxFilterer   // Log filterer for contract events
}

// ArbRetryableTxCaller is an auto generated read-only Go binding around an Ethereum contract.
type ArbRetryableTxCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ArbRetryableTxTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ArbRetryableTxTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ArbRetryableTxFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ArbRetryableTxFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ArbRetryableTxSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ArbRetryableTxSession struct {
	Contract     *ArbRetryableTx   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ArbRetryableTxCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ArbRetryableTxCallerSession struct {
	Contract *ArbRetryableTxCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// ArbRetryableTxTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ArbRetryableTxTransactorSession struct {
	Contract     *ArbRetryableTxTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// ArbRetryableTxRaw is an auto generated low-level Go binding around an Ethereum contract.
type ArbRetryableTxRaw struct {
	Contract *ArbRetryableTx // Generic contract binding to access the raw methods on
}

// ArbRetryableTxCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ArbRetryableTxCallerRaw struct {
	Contract *ArbRetryableTxCaller // Generic read-only contract binding to access the raw methods on
}

// ArbRetryableTxTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ArbRetryableTxTransactorRaw struct {
	Contract *ArbRetryableTxTransactor // Generic write-only contract binding to access the raw methods on
}

// NewArbRetryableTx creates a new instance of ArbRetryableTx, bound to a specific deployed contract.
func NewArbRetryableTx(address common.Address, backend bind.ContractBackend) (*ArbRetryableTx, error) {
	contract, err := bindArbRetryableTx(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ArbRetryableTx{ArbRetryableTxCaller: ArbRetryableTxCaller{contract: contract}, ArbRetryableTxTransactor: ArbRetryableTxTransactor{contract: contract}, ArbRetryableTxFilterer: ArbRetryableTxFilterer{contract: contract}}, nil
}

// NewArbRetryableTxCaller creates a new read-only instance of ArbRetryableTx, bound to a specific deployed contract.
func NewArbRetryableTxCaller(address common.Address, caller bind.ContractCaller) (*ArbRetryableTxCaller, error) {
	contract, err := bindArbRetryableTx(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ArbRetryableTxCaller{contract: contract}, nil
}

// NewArbRetryableTxTransactor creates a new write-only instance of ArbRetryableTx, bound to a specific deployed contract.
func NewArbRetryableTxTransactor(address common.Address, transactor bind.ContractTransactor) (*ArbRetryableTxTransactor, error) {
	contract, err := bindArbRetryableTx(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ArbRetryableTxTransactor{contract: contract}, nil
}

// NewArbRetryableTxFilterer creates a new log filterer instance of ArbRetryableTx, bound to a specific deployed contract.
func NewArbRetryableTxFilterer(address common.Address, filterer bind.ContractFilterer) (*ArbRetryableTxFilterer, error) {
	contract, err := bindArbRetryableTx(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ArbRetryableTxFilterer{contract: contract}, nil
}

// bindArbRetryableTx binds a generic wrapper to an already deployed contract.
func bindArbRetryableTx(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ArbRetryableTxMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ArbRetryableTx *ArbRetryableTxRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ArbRetryableTx.Contract.ArbRetryableTxCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ArbRetryableTx *ArbRetryableTxRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ArbRetryableTx.Contract.ArbRetryableTxTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ArbRetryableTx *ArbRetryableTxRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ArbRetryableTx.Contract.ArbRetryableTxTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ArbRetryableTx *ArbRetryableTxCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ArbRetryableTx.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ArbRetryableTx *ArbRetryableTxTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ArbRetryableTx.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ArbRetryableTx *ArbRetryableTxTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ArbRetryableTx.Contract.contract.Transact(opts, method, params...)
}

// GetBeneficiary is a free data retrieval call binding the contract method 0xba20dda4.
//
// Solidity: function getBeneficiary(bytes32 ticketId) view returns(address)
func (_ArbRetryableTx *ArbRetryableTxCaller) GetBeneficiary(opts *bind.CallOpts, ticketId [32]byte) (common.Address, error) {
	var out []interface{}
	err := _ArbRetryableTx.contract.Call(opts, &out, "getBeneficiary", ticketId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetBeneficiary is a free data retrieval call binding the contract method 0xba20dda4.
//
// Solidity: function getBeneficiary(bytes32 ticketId) view returns(address)
func (_ArbRetryableTx *ArbRetryableTxSession) GetBeneficiary(ticketId [32]byte) (common.Address, error) {
	return _ArbRetryableTx.Contract.GetBeneficiary(&_ArbRetryableTx.CallOpts, ticketId)
}

// GetBeneficiary is a free data retrieval call binding the contract method 0xba20dda4.
//
// Solidity: function getBeneficiary(bytes32 ticketId) view returns(address)
func (_ArbRetryableTx *ArbRetryableTxCallerSession) GetBeneficiary(ticketId [32]byte) (common.Address, error) {
	return _ArbRetryableTx.Contract.GetBeneficiary(&_ArbRetryableTx.CallOpts, ticketId)
}

// GetCurrentRedeemer is a free data retrieval call binding the contract method 0xde4ba2b3.
//
// Solidity: function getCurrentRedeemer() view returns(address)
func (_ArbRetryableTx *ArbRetryableTxCaller) GetCurrentRedeemer(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ArbRetryableTx.contract.Call(opts, &out, "getCurrentRedeemer")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetCurrentRedeemer is a free data retrieval call binding the contract method 0xde4ba2b3.
//
// Solidity: function getCurrentRedeemer() view returns(address)
func (_ArbRetryableTx *ArbRetryableTxSession) GetCurrentRedeemer() (common.Address, error) {
	return _ArbRetryableTx.Contract.GetCurrentRedeemer(&_ArbRetryableTx.CallOpts)
}

// GetCurrentRedeemer is a free data retrieval call binding the contract method 0xde4ba2b3.
//
// Solidity: function getCurrentRedeemer() view returns(address)
func (_ArbRetryableTx *ArbRetryableTxCallerSession) GetCurrentRedeemer() (common.Address, error) {
	return _ArbRetryableTx.Contract.GetCurrentRedeemer(&_ArbRetryableTx.CallOpts)
}

// GetLifetime is a free data retrieval call binding the contract method 0x81e6e083.
//
// Solidity: function getLifetime() view returns(uint256)
func (_ArbRetryableTx *ArbRetryableTxCaller) GetLifetime(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ArbRetryableTx.contract.Call(opts, &out, "getLifetime")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetLifetime is a free data retrieval call binding the contract method 0x81e6e083.
//
// Solidity: function getLifetime() view returns(uint256)
func (_ArbRetryableTx *ArbRetryableTxSession) GetLifetime() (*big.Int, error) {
	return _ArbRetryableTx.Contract.GetLifetime(&_ArbRetryableTx.CallOpts)
}

// GetLifetime is a free data retrieval call binding the contract method 0x81e6e083.
//
// Solidity: function getLifetime() view returns(uint256)
func (_ArbRetryableTx *ArbRetryableTxCallerSession) GetLifetime() (*big.Int, error) {
	return _ArbRetryableTx.Contract.GetLifetime(&_ArbRetryableTx.CallOpts)
}

// GetTimeout is a free data retrieval call binding the contract method 0x9f1025c6.
//
// Solidity: function getTimeout(bytes32 ticketId) view returns(uint256)
func (_ArbRetryableTx *ArbRetryableTxCaller) GetTimeout(opts *bind.CallOpts, ticketId [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _ArbRetryableTx.contract.Call(opts, &out, "getTimeout", ticketId)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTimeout is a free data retrieval call binding the contract method 0x9f1025c6.
//
// Solidity: function getTimeout(bytes32 ticketId) view returns(uint256)
func (_ArbRetryableTx *ArbRetryableTxSession) GetTimeout(ticketId [32]byte) (*big.Int, error) {
	return _ArbRetryableTx.Contract.GetTimeout(&_ArbRetryableTx.CallOpts, ticketId)
}

// GetTimeout is a free data retrieval call binding the contract method 0x9f1025c6.
//
// Solidity: function getTimeout(bytes32 ticketId) view returns(uint256)
func (_ArbRetryableTx *ArbRetryableTxCallerSession) GetTimeout(ticketId [32]byte) (*big.Int, error) {
	return _ArbRetryableTx.Contract.GetTimeout(&_ArbRetryableTx.CallOpts, ticketId)
}

// Cancel is a paid mutator transaction binding the contract method 0xc4d252f5.
//
// Solidity: function cancel(bytes32 ticketId) returns()
func (_ArbRetryableTx *ArbRetryableTxTransactor) Cancel(opts *bind.TransactOpts, ticketId [32]byte) (*types.Transaction, error) {
	return _ArbRetryableTx.contract.Transact(opts, "cancel", ticketId)
}

// Cancel is a paid mutator transaction binding the contract method 0xc4d252f5.
//
// Solidity: function cancel(bytes32 ticketId) returns()
func (_ArbRetryableTx *ArbRetryableTxSession) Cancel(ticketId [32]byte) (*types.Transaction, error) {
	return _ArbRetryableTx.Contract.Cancel(&_ArbRetryableTx.TransactOpts, ticketId)
}

// Cancel is a paid mutator transaction binding the contract method 0xc4d252f5.
//
// Solidity: function cancel(bytes32 ticketId) returns()
func (_ArbRetryableTx *ArbRetryableTxTransactorSession) Cancel(ticketId [32]byte) (*types.Transaction, error) {
	return _ArbRetryableTx.Contract.Cancel(&_ArbRetryableTx.TransactOpts, ticketId)
}

// Keepalive is a paid mutator transaction binding the contract method 0xf0b21a41.
//
// Solidity: function keepalive(bytes32 ticketId) returns(uint256)
func (_ArbRetryableTx *ArbRetryableTxTransactor) Keepalive(opts *bind.TransactOpts, ticketId [32]byte) (*types.Transaction, error) {
	return _ArbRetryableTx.contract.Transact(opts, "keepalive", ticketId)
}

// Keepalive is a paid mutator transaction binding the contract method 0xf0b21a41.
//
// Solidity: function keepalive(bytes32 ticketId) returns(uint256)
func (_ArbRetryableTx *ArbRetryableTxSession) Keepalive(ticketId [32]byte) (*types.Transaction, error) {
	return _ArbRetryableTx.Contract.Keepalive(&_ArbRetryableTx.TransactOpts, ticketId)
}

// Keepalive is a paid mutator transaction binding the contract method 0xf0b21a41.
//
// Solidity: function keepalive(bytes32 ticketId) returns(uint256)
func (_ArbRetryableTx *ArbRetryableTxTransactorSession) Keepalive(ticketId [32]byte) (*types.Transaction, error) {
	return _ArbRetryableTx.Contract.Keepalive(&_ArbRetryableTx.TransactOpts, ticketId)
}

// Redeem is a paid mutator transaction binding the contract method 0xeda1122c.
//
// Solidity: function redeem(bytes32 ticketId) returns(bytes32)
func (_ArbRetryableTx *ArbRetryableTxTransactor) Redeem(opts *bind.TransactOpts, ticketId [32]byte) (*types.Transaction, error) {
	return _ArbRetryableTx.contract.Transact(opts, "redeem", ticketId)
}

// Redeem is a paid mutator transaction binding the contract method 0xeda1122c.
//
// Solidity: function redeem(bytes32 ticketId) returns(bytes32)
func (_ArbRetryableTx *ArbRetryableTxSession) Redeem(ticketId [32]byte) (*types.Transaction, error) {
	return _ArbRetryableTx.Contract.Redeem(&_ArbRetryableTx.TransactOpts, ticketId)
}

// Redeem is a paid mutator transaction binding the contract method 0xeda1122c.
//
// Solidity: function redeem(bytes32 ticketId) returns(bytes32)
func (_ArbRetryableTx *ArbRetryableTxTransactorSession) Redeem(ticketId [32]byte) (*types.Transaction, error) {
	return _ArbRetryableTx.Contract.Redeem(&_ArbRetryableTx.TransactOpts, ticketId)
}

// SubmitRetryable is a paid mutator transaction binding the contract method 0xc9f95d32.
//
// Solidity: function submitRetryable(bytes32 requestId, uint256 l1BaseFee, uint256 deposit, uint256 callvalue, uint256 gasFeeCap, uint64 gasLimit, uint256 maxSubmissionFee, address feeRefundAddress, address beneficiary, address retryTo, bytes retryData) returns()
func (_ArbRetryableTx *ArbRetryableTxTransactor) SubmitRetryable(opts *bind.TransactOpts, requestId [32]byte, l1BaseFee *big.Int, deposit *big.Int, callvalue *big.Int, gasFeeCap *big.Int, gasLimit uint64, maxSubmissionFee *big.Int, feeRefundAddress common.Address, beneficiary common.Address, retryTo common.Address, retryData []byte) (*types.Transaction, error) {
	return _ArbRetryableTx.contract.Transact(opts, "submitRetryable", requestId, l1BaseFee, deposit, callvalue, gasFeeCap, gasLimit, maxSubmissionFee, feeRefundAddress, beneficiary, retryTo, retryData)
}

// SubmitRetryable is a paid mutator transaction binding the contract method 0xc9f95d32.
//
// Solidity: function submitRetryable(bytes32 requestId, uint256 l1BaseFee, uint256 deposit, uint256 callvalue, uint256 gasFeeCap, uint64 gasLimit, uint256 maxSubmissionFee, address feeRefundAddress, address beneficiary, address retryTo, bytes retryData) returns()
func (_ArbRetryableTx *ArbRetryableTxSession) SubmitRetryable(requestId [32]byte, l1BaseFee *big.Int, deposit *big.Int, callvalue *big.Int, gasFeeCap *big.Int, gasLimit uint64, maxSubmissionFee *big.Int, feeRefundAddress common.Address, beneficiary common.Address, retryTo common.Address, retryData []byte) (*types.Transaction, error) {
	return _ArbRetryableTx.Contract.SubmitRetryable(&_ArbRetryableTx.TransactOpts, requestId, l1BaseFee, deposit, callvalue, gasFeeCap, gasLimit, maxSubmissionFee, feeRefundAddress, beneficiary, retryTo, retryData)
}

// SubmitRetryable is a paid mutator transaction binding the contract method 0xc9f95d32.
//
// Solidity: function submitRetryable(bytes32 requestId, uint256 l1BaseFee, uint256 deposit, uint256 callvalue, uint256 gasFeeCap, uint64 gasLimit, uint256 maxSubmissionFee, address feeRefundAddress, address beneficiary, address retryTo, bytes retryData) returns()
func (_ArbRetryableTx *ArbRetryableTxTransactorSession) SubmitRetryable(requestId [32]byte, l1BaseFee *big.Int, deposit *big.Int, callvalue *big.Int, gasFeeCap *big.Int, gasLimit uint64, maxSubmissionFee *big.Int, feeRefundAddress common.Address, beneficiary common.Address, retryTo common.Address, retryData []byte) (*types.Transaction, error) {
	return _ArbRetryableTx.Contract.SubmitRetryable(&_ArbRetryableTx.TransactOpts, requestId, l1BaseFee, deposit, callvalue, gasFeeCap, gasLimit, maxSubmissionFee, feeRefundAddress, beneficiary, retryTo, retryData)
}

// ArbRetryableTxCanceledIterator is returned from FilterCanceled and is used to iterate over the raw logs and unpacked data for Canceled events raised by the ArbRetryableTx contract.
type ArbRetryableTxCanceledIterator struct {
	Event *ArbRetryableTxCanceled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ArbRetryableTxCanceledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ArbRetryableTxCanceled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ArbRetryableTxCanceled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ArbRetryableTxCanceledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ArbRetryableTxCanceledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ArbRetryableTxCanceled represents a Canceled event raised by the ArbRetryableTx contract.
type ArbRetryableTxCanceled struct {
	TicketId [32]byte
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterCanceled is a free log retrieval operation binding the contract event 0x134fdd648feeaf30251f0157f9624ef8608ff9a042aad6d13e73f35d21d3f88d.
//
// Solidity: event Canceled(bytes32 indexed ticketId)
func (_ArbRetryableTx *ArbRetryableTxFilterer) FilterCanceled(opts *bind.FilterOpts, ticketId [][32]byte) (*ArbRetryableTxCanceledIterator, error) {

	var ticketIdRule []interface{}
	for _, ticketIdItem := range ticketId {
		ticketIdRule = append(ticketIdRule, ticketIdItem)
	}

	logs, sub, err := _ArbRetryableTx.contract.FilterLogs(opts, "Canceled", ticketIdRule)
	if err != nil {
		return nil, err
	}
	return &ArbRetryableTxCanceledIterator{contract: _ArbRetryableTx.contract, event: "Canceled", logs: logs, sub: sub}, nil
}

// WatchCanceled is a free log subscription operation binding the contract event 0x134fdd648feeaf30251f0157f9624ef8608ff9a042aad6d13e73f35d21d3f88d.
//
// Solidity: event Canceled(bytes32 indexed ticketId)
func (_ArbRetryableTx *ArbRetryableTxFilterer) WatchCanceled(opts *bind.WatchOpts, sink chan<- *ArbRetryableTxCanceled, ticketId [][32]byte) (event.Subscription, error) {

	var ticketIdRule []interface{}
	for _, ticketIdItem := range ticketId {
		ticketIdRule = append(ticketIdRule, ticketIdItem)
	}

	logs, sub, err := _ArbRetryableTx.contract.WatchLogs(opts, "Canceled", ticketIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ArbRetryableTxCanceled)
				if err := _ArbRetryableTx.contract.UnpackLog(event, "Canceled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCanceled is a log parse operation binding the contract event 0x134fdd648feeaf30251f0157f9624ef8608ff9a042aad6d13e73f35d21d3f88d.
//
// Solidity: event Canceled(bytes32 indexed ticketId)
func (_ArbRetryableTx *ArbRetryableTxFilterer) ParseCanceled(log types.Log) (*ArbRetryableTxCanceled, error) {
	event := new(ArbRetryableTxCanceled)
	if err := _ArbRetryableTx.contract.UnpackLog(event, "Canceled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ArbRetryableTxLifetimeExtendedIterator is returned from FilterLifetimeExtended and is used to iterate over the raw logs and unpacked data for LifetimeExtended events raised by the ArbRetryableTx contract.
type ArbRetryableTxLifetimeExtendedIterator struct {
	Event *ArbRetryableTxLifetimeExtended // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ArbRetryableTxLifetimeExtendedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ArbRetryableTxLifetimeExtended)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ArbRetryableTxLifetimeExtended)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ArbRetryableTxLifetimeExtendedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ArbRetryableTxLifetimeExtendedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ArbRetryableTxLifetimeExtended represents a LifetimeExtended event raised by the ArbRetryableTx contract.
type ArbRetryableTxLifetimeExtended struct {
	TicketId   [32]byte
	NewTimeout *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterLifetimeExtended is a free log retrieval operation binding the contract event 0xf4c40a5f930e1469fcc053bf25f045253a7bad2fcc9b88c05ec1fca8e2066b83.
//
// Solidity: event LifetimeExtended(bytes32 indexed ticketId, uint256 newTimeout)
func (_ArbRetryableTx *ArbRetryableTxFilterer) FilterLifetimeExtended(opts *bind.FilterOpts, ticketId [][32]byte) (*ArbRetryableTxLifetimeExtendedIterator, error) {

	var ticketIdRule []interface{}
	for _, ticketIdItem := range ticketId {
		ticketIdRule = append(ticketIdRule, ticketIdItem)
	}

	logs, sub, err := _ArbRetryableTx.contract.FilterLogs(opts, "LifetimeExtended", ticketIdRule)
	if err != nil {
		return nil, err
	}
	return &ArbRetryableTxLifetimeExtendedIterator{contract: _ArbRetryableTx.contract, event: "LifetimeExtended", logs: logs, sub: sub}, nil
}

// WatchLifetimeExtended is a free log subscription operation binding the contract event 0xf4c40a5f930e1469fcc053bf25f045253a7bad2fcc9b88c05ec1fca8e2066b83.
//
// Solidity: event LifetimeExtended(bytes32 indexed ticketId, uint256 newTimeout)
func (_ArbRetryableTx *ArbRetryableTxFilterer) WatchLifetimeExtended(opts *bind.WatchOpts, sink chan<- *ArbRetryableTxLifetimeExtended, ticketId [][32]byte) (event.Subscription, error) {

	var ticketIdRule []interface{}
	for _, ticketIdItem := range ticketId {
		ticketIdRule = append(ticketIdRule, ticketIdItem)
	}

	logs, sub, err := _ArbRetryableTx.contract.WatchLogs(opts, "LifetimeExtended", ticketIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ArbRetryableTxLifetimeExtended)
				if err := _ArbRetryableTx.contract.UnpackLog(event, "LifetimeExtended", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLifetimeExtended is a log parse operation binding the contract event 0xf4c40a5f930e1469fcc053bf25f045253a7bad2fcc9b88c05ec1fca8e2066b83.
//
// Solidity: event LifetimeExtended(bytes32 indexed ticketId, uint256 newTimeout)
func (_ArbRetryableTx *ArbRetryableTxFilterer) ParseLifetimeExtended(log types.Log) (*ArbRetryableTxLifetimeExtended, error) {
	event := new(ArbRetryableTxLifetimeExtended)
	if err := _ArbRetryableTx.contract.UnpackLog(event, "LifetimeExtended", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ArbRetryableTxRedeemScheduledIterator is returned from FilterRedeemScheduled and is used to iterate over the raw logs and unpacked data for RedeemScheduled events raised by the ArbRetryableTx contract.
type ArbRetryableTxRedeemScheduledIterator struct {
	Event *ArbRetryableTxRedeemScheduled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ArbRetryableTxRedeemScheduledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ArbRetryableTxRedeemScheduled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ArbRetryableTxRedeemScheduled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ArbRetryableTxRedeemScheduledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ArbRetryableTxRedeemScheduledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ArbRetryableTxRedeemScheduled represents a RedeemScheduled event raised by the ArbRetryableTx contract.
type ArbRetryableTxRedeemScheduled struct {
	TicketId            [32]byte
	RetryTxHash         [32]byte
	SequenceNum         uint64
	DonatedGas          uint64
	GasDonor            common.Address
	MaxRefund           *big.Int
	SubmissionFeeRefund *big.Int
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterRedeemScheduled is a free log retrieval operation binding the contract event 0x5ccd009502509cf28762c67858994d85b163bb6e451f5e9df7c5e18c9c2e123e.
//
// Solidity: event RedeemScheduled(bytes32 indexed ticketId, bytes32 indexed retryTxHash, uint64 indexed sequenceNum, uint64 donatedGas, address gasDonor, uint256 maxRefund, uint256 submissionFeeRefund)
func (_ArbRetryableTx *ArbRetryableTxFilterer) FilterRedeemScheduled(opts *bind.FilterOpts, ticketId [][32]byte, retryTxHash [][32]byte, sequenceNum []uint64) (*ArbRetryableTxRedeemScheduledIterator, error) {

	var ticketIdRule []interface{}
	for _, ticketIdItem := range ticketId {
		ticketIdRule = append(ticketIdRule, ticketIdItem)
	}
	var retryTxHashRule []interface{}
	for _, retryTxHashItem := range retryTxHash {
		retryTxHashRule = append(retryTxHashRule, retryTxHashItem)
	}
	var sequenceNumRule []interface{}
	for _, sequenceNumItem := range sequenceNum {
		sequenceNumRule = append(sequenceNumRule, sequenceNumItem)
	}

	logs, sub, err := _ArbRetryableTx.contract.FilterLogs(opts, "RedeemScheduled", ticketIdRule, retryTxHashRule, sequenceNumRule)
	if err != nil {
		return nil, err
	}
	return &ArbRetryableTxRedeemScheduledIterator{contract: _ArbRetryableTx.contract, event: "RedeemScheduled", logs: logs, sub: sub}, nil
}

// WatchRedeemScheduled is a free log subscription operation binding the contract event 0x5ccd009502509cf28762c67858994d85b163bb6e451f5e9df7c5e18c9c2e123e.
//
// Solidity: event RedeemScheduled(bytes32 indexed ticketId, bytes32 indexed retryTxHash, uint64 indexed sequenceNum, uint64 donatedGas, address gasDonor, uint256 maxRefund, uint256 submissionFeeRefund)
func (_ArbRetryableTx *ArbRetryableTxFilterer) WatchRedeemScheduled(opts *bind.WatchOpts, sink chan<- *ArbRetryableTxRedeemScheduled, ticketId [][32]byte, retryTxHash [][32]byte, sequenceNum []uint64) (event.Subscription, error) {

	var ticketIdRule []interface{}
	for _, ticketIdItem := range ticketId {
		ticketIdRule = append(ticketIdRule, ticketIdItem)
	}
	var retryTxHashRule []interface{}
	for _, retryTxHashItem := range retryTxHash {
		retryTxHashRule = append(retryTxHashRule, retryTxHashItem)
	}
	var sequenceNumRule []interface{}
	for _, sequenceNumItem := range sequenceNum {
		sequenceNumRule = append(sequenceNumRule, sequenceNumItem)
	}

	logs, sub, err := _ArbRetryableTx.contract.WatchLogs(opts, "RedeemScheduled", ticketIdRule, retryTxHashRule, sequenceNumRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ArbRetryableTxRedeemScheduled)
				if err := _ArbRetryableTx.contract.UnpackLog(event, "RedeemScheduled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRedeemScheduled is a log parse operation binding the contract event 0x5ccd009502509cf28762c67858994d85b163bb6e451f5e9df7c5e18c9c2e123e.
//
// Solidity: event RedeemScheduled(bytes32 indexed ticketId, bytes32 indexed retryTxHash, uint64 indexed sequenceNum, uint64 donatedGas, address gasDonor, uint256 maxRefund, uint256 submissionFeeRefund)
func (_ArbRetryableTx *ArbRetryableTxFilterer) ParseRedeemScheduled(log types.Log) (*ArbRetryableTxRedeemScheduled, error) {
	event := new(ArbRetryableTxRedeemScheduled)
	if err := _ArbRetryableTx.contract.UnpackLog(event, "RedeemScheduled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ArbRetryableTxRedeemedIterator is returned from FilterRedeemed and is used to iterate over the raw logs and unpacked data for Redeemed events raised by the ArbRetryableTx contract.
type ArbRetryableTxRedeemedIterator struct {
	Event *ArbRetryableTxRedeemed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ArbRetryableTxRedeemedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ArbRetryableTxRedeemed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ArbRetryableTxRedeemed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ArbRetryableTxRedeemedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ArbRetryableTxRedeemedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ArbRetryableTxRedeemed represents a Redeemed event raised by the ArbRetryableTx contract.
type ArbRetryableTxRedeemed struct {
	UserTxHash [32]byte
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterRedeemed is a free log retrieval operation binding the contract event 0x27fc6cca2a0e9eb6f4876c01fc7779b00cdeb7277a770ac2b844db5932449578.
//
// Solidity: event Redeemed(bytes32 indexed userTxHash)
func (_ArbRetryableTx *ArbRetryableTxFilterer) FilterRedeemed(opts *bind.FilterOpts, userTxHash [][32]byte) (*ArbRetryableTxRedeemedIterator, error) {

	var userTxHashRule []interface{}
	for _, userTxHashItem := range userTxHash {
		userTxHashRule = append(userTxHashRule, userTxHashItem)
	}

	logs, sub, err := _ArbRetryableTx.contract.FilterLogs(opts, "Redeemed", userTxHashRule)
	if err != nil {
		return nil, err
	}
	return &ArbRetryableTxRedeemedIterator{contract: _ArbRetryableTx.contract, event: "Redeemed", logs: logs, sub: sub}, nil
}

// WatchRedeemed is a free log subscription operation binding the contract event 0x27fc6cca2a0e9eb6f4876c01fc7779b00cdeb7277a770ac2b844db5932449578.
//
// Solidity: event Redeemed(bytes32 indexed userTxHash)
func (_ArbRetryableTx *ArbRetryableTxFilterer) WatchRedeemed(opts *bind.WatchOpts, sink chan<- *ArbRetryableTxRedeemed, userTxHash [][32]byte) (event.Subscription, error) {

	var userTxHashRule []interface{}
	for _, userTxHashItem := range userTxHash {
		userTxHashRule = append(userTxHashRule, userTxHashItem)
	}

	logs, sub, err := _ArbRetryableTx.contract.WatchLogs(opts, "Redeemed", userTxHashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ArbRetryableTxRedeemed)
				if err := _ArbRetryableTx.contract.UnpackLog(event, "Redeemed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRedeemed is a log parse operation binding the contract event 0x27fc6cca2a0e9eb6f4876c01fc7779b00cdeb7277a770ac2b844db5932449578.
//
// Solidity: event Redeemed(bytes32 indexed userTxHash)
func (_ArbRetryableTx *ArbRetryableTxFilterer) ParseRedeemed(log types.Log) (*ArbRetryableTxRedeemed, error) {
	event := new(ArbRetryableTxRedeemed)
	if err := _ArbRetryableTx.contract.UnpackLog(event, "Redeemed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ArbRetryableTxTicketCreatedIterator is returned from FilterTicketCreated and is used to iterate over the raw logs and unpacked data for TicketCreated events raised by the ArbRetryableTx contract.
type ArbRetryableTxTicketCreatedIterator struct {
	Event *ArbRetryableTxTicketCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ArbRetryableTxTicketCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ArbRetryableTxTicketCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ArbRetryableTxTicketCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ArbRetryableTxTicketCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ArbRetryableTxTicketCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ArbRetryableTxTicketCreated represents a TicketCreated event raised by the ArbRetryableTx contract.
type ArbRetryableTxTicketCreated struct {
	TicketId [32]byte
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterTicketCreated is a free log retrieval operation binding the contract event 0x7c793cced5743dc5f531bbe2bfb5a9fa3f40adef29231e6ab165c08a29e3dd89.
//
// Solidity: event TicketCreated(bytes32 indexed ticketId)
func (_ArbRetryableTx *ArbRetryableTxFilterer) FilterTicketCreated(opts *bind.FilterOpts, ticketId [][32]byte) (*ArbRetryableTxTicketCreatedIterator, error) {

	var ticketIdRule []interface{}
	for _, ticketIdItem := range ticketId {
		ticketIdRule = append(ticketIdRule, ticketIdItem)
	}

	logs, sub, err := _ArbRetryableTx.contract.FilterLogs(opts, "TicketCreated", ticketIdRule)
	if err != nil {
		return nil, err
	}
	return &ArbRetryableTxTicketCreatedIterator{contract: _ArbRetryableTx.contract, event: "TicketCreated", logs: logs, sub: sub}, nil
}

// WatchTicketCreated is a free log subscription operation binding the contract event 0x7c793cced5743dc5f531bbe2bfb5a9fa3f40adef29231e6ab165c08a29e3dd89.
//
// Solidity: event TicketCreated(bytes32 indexed ticketId)
func (_ArbRetryableTx *ArbRetryableTxFilterer) WatchTicketCreated(opts *bind.WatchOpts, sink chan<- *ArbRetryableTxTicketCreated, ticketId [][32]byte) (event.Subscription, error) {

	var ticketIdRule []interface{}
	for _, ticketIdItem := range ticketId {
		ticketIdRule = append(ticketIdRule, ticketIdItem)
	}

	logs, sub, err := _ArbRetryableTx.contract.WatchLogs(opts, "TicketCreated", ticketIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ArbRetryableTxTicketCreated)
				if err := _ArbRetryableTx.contract.UnpackLog(event, "TicketCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTicketCreated is a log parse operation binding the contract event 0x7c793cced5743dc5f531bbe2bfb5a9fa3f40adef29231e6ab165c08a29e3dd89.
//
// Solidity: event TicketCreated(bytes32 indexed ticketId)
func (_ArbRetryableTx *ArbRetryableTxFilterer) ParseTicketCreated(log types.Log) (*ArbRetryableTxTicketCreated, error) {
	event := new(ArbRetryableTxTicketCreated)
	if err := _ArbRetryableTx.contract.UnpackLog(event, "TicketCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ArbStatisticsMetaData contains all meta data concerning the ArbStatistics contract.
var ArbStatisticsMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"getStats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
}

// ArbStatisticsABI is the input ABI used to generate the binding from.
// Deprecated: Use ArbStatisticsMetaData.ABI instead.
var ArbStatisticsABI = ArbStatisticsMetaData.ABI

// ArbStatistics is an auto generated Go binding around an Ethereum contract.
type ArbStatistics struct {
	ArbStatisticsCaller     // Read-only binding to the contract
	ArbStatisticsTransactor // Write-only binding to the contract
	ArbStatisticsFilterer   // Log filterer for contract events
}

// ArbStatisticsCaller is an auto generated read-only Go binding around an Ethereum contract.
type ArbStatisticsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ArbStatisticsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ArbStatisticsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ArbStatisticsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ArbStatisticsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ArbStatisticsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ArbStatisticsSession struct {
	Contract     *ArbStatistics    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ArbStatisticsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ArbStatisticsCallerSession struct {
	Contract *ArbStatisticsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// ArbStatisticsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ArbStatisticsTransactorSession struct {
	Contract     *ArbStatisticsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// ArbStatisticsRaw is an auto generated low-level Go binding around an Ethereum contract.
type ArbStatisticsRaw struct {
	Contract *ArbStatistics // Generic contract binding to access the raw methods on
}

// ArbStatisticsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ArbStatisticsCallerRaw struct {
	Contract *ArbStatisticsCaller // Generic read-only contract binding to access the raw methods on
}

// ArbStatisticsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ArbStatisticsTransactorRaw struct {
	Contract *ArbStatisticsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewArbStatistics creates a new instance of ArbStatistics, bound to a specific deployed contract.
func NewArbStatistics(address common.Address, backend bind.ContractBackend) (*ArbStatistics, error) {
	contract, err := bindArbStatistics(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ArbStatistics{ArbStatisticsCaller: ArbStatisticsCaller{contract: contract}, ArbStatisticsTransactor: ArbStatisticsTransactor{contract: contract}, ArbStatisticsFilterer: ArbStatisticsFilterer{contract: contract}}, nil
}

// NewArbStatisticsCaller creates a new read-only instance of ArbStatistics, bound to a specific deployed contract.
func NewArbStatisticsCaller(address common.Address, caller bind.ContractCaller) (*ArbStatisticsCaller, error) {
	contract, err := bindArbStatistics(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ArbStatisticsCaller{contract: contract}, nil
}

// NewArbStatisticsTransactor creates a new write-only instance of ArbStatistics, bound to a specific deployed contract.
func NewArbStatisticsTransactor(address common.Address, transactor bind.ContractTransactor) (*ArbStatisticsTransactor, error) {
	contract, err := bindArbStatistics(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ArbStatisticsTransactor{contract: contract}, nil
}

// NewArbStatisticsFilterer creates a new log filterer instance of ArbStatistics, bound to a specific deployed contract.
func NewArbStatisticsFilterer(address common.Address, filterer bind.ContractFilterer) (*ArbStatisticsFilterer, error) {
	contract, err := bindArbStatistics(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ArbStatisticsFilterer{contract: contract}, nil
}

// bindArbStatistics binds a generic wrapper to an already deployed contract.
func bindArbStatistics(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ArbStatisticsMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ArbStatistics *ArbStatisticsRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ArbStatistics.Contract.ArbStatisticsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ArbStatistics *ArbStatisticsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ArbStatistics.Contract.ArbStatisticsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ArbStatistics *ArbStatisticsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ArbStatistics.Contract.ArbStatisticsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ArbStatistics *ArbStatisticsCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ArbStatistics.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ArbStatistics *ArbStatisticsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ArbStatistics.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ArbStatistics *ArbStatisticsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ArbStatistics.Contract.contract.Transact(opts, method, params...)
}

// GetStats is a free data retrieval call binding the contract method 0xc59d4847.
//
// Solidity: function getStats() view returns(uint256, uint256, uint256, uint256, uint256, uint256)
func (_ArbStatistics *ArbStatisticsCaller) GetStats(opts *bind.CallOpts) (*big.Int, *big.Int, *big.Int, *big.Int, *big.Int, *big.Int, error) {
	var out []interface{}
	err := _ArbStatistics.contract.Call(opts, &out, "getStats")

	if err != nil {
		return *new(*big.Int), *new(*big.Int), *new(*big.Int), *new(*big.Int), *new(*big.Int), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	out2 := *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	out3 := *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	out4 := *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)
	out5 := *abi.ConvertType(out[5], new(*big.Int)).(**big.Int)

	return out0, out1, out2, out3, out4, out5, err

}

// GetStats is a free data retrieval call binding the contract method 0xc59d4847.
//
// Solidity: function getStats() view returns(uint256, uint256, uint256, uint256, uint256, uint256)
func (_ArbStatistics *ArbStatisticsSession) GetStats() (*big.Int, *big.Int, *big.Int, *big.Int, *big.Int, *big.Int, error) {
	return _ArbStatistics.Contract.GetStats(&_ArbStatistics.CallOpts)
}

// GetStats is a free data retrieval call binding the contract method 0xc59d4847.
//
// Solidity: function getStats() view returns(uint256, uint256, uint256, uint256, uint256, uint256)
func (_ArbStatistics *ArbStatisticsCallerSession) GetStats() (*big.Int, *big.Int, *big.Int, *big.Int, *big.Int, *big.Int, error) {
	return _ArbStatistics.Contract.GetStats(&_ArbStatistics.CallOpts)
}

// ArbSysMetaData contains all meta data concerning the ArbSys contract.
var ArbSysMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"arbBlockNum\",\"type\":\"uint256\"}],\"name\":\"arbBlockHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"arbBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"arbChainID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"arbOSVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStorageGasAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTopLevelCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"unused\",\"type\":\"address\"}],\"name\":\"mapL1SenderContractAddressToL2Alias\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"myCallersAddressWithoutAliasing\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendMerkleTreeState\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"partials\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"sendTxToL1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wasMyCallersAddressAliased\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"withdrawEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"uniqueId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"batchNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"indexInBatch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"arbBlockNum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethBlockNum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"callvalue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"L2ToL1Transaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"hash\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"position\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"arbBlockNum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethBlockNum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"callvalue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"L2ToL1Tx\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"reserved\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"SendMerkleUpdate\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"current\",\"type\":\"uint256\"}],\"name\":\"InvalidBlockNumber\",\"type\":\"error\"}]",
}

// ArbSysABI is the input ABI used to generate the binding from.
// Deprecated: Use ArbSysMetaData.ABI instead.
var ArbSysABI = ArbSysMetaData.ABI

// ArbSys is an auto generated Go binding around an Ethereum contract.
type ArbSys struct {
	ArbSysCaller     // Read-only binding to the contract
	ArbSysTransactor // Write-only binding to the contract
	ArbSysFilterer   // Log filterer for contract events
}

// ArbSysCaller is an auto generated read-only Go binding around an Ethereum contract.
type ArbSysCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ArbSysTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ArbSysTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ArbSysFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ArbSysFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ArbSysSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ArbSysSession struct {
	Contract     *ArbSys           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ArbSysCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ArbSysCallerSession struct {
	Contract *ArbSysCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// ArbSysTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ArbSysTransactorSession struct {
	Contract     *ArbSysTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ArbSysRaw is an auto generated low-level Go binding around an Ethereum contract.
type ArbSysRaw struct {
	Contract *ArbSys // Generic contract binding to access the raw methods on
}

// ArbSysCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ArbSysCallerRaw struct {
	Contract *ArbSysCaller // Generic read-only contract binding to access the raw methods on
}

// ArbSysTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ArbSysTransactorRaw struct {
	Contract *ArbSysTransactor // Generic write-only contract binding to access the raw methods on
}

// NewArbSys creates a new instance of ArbSys, bound to a specific deployed contract.
func NewArbSys(address common.Address, backend bind.ContractBackend) (*ArbSys, error) {
	contract, err := bindArbSys(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ArbSys{ArbSysCaller: ArbSysCaller{contract: contract}, ArbSysTransactor: ArbSysTransactor{contract: contract}, ArbSysFilterer: ArbSysFilterer{contract: contract}}, nil
}

// NewArbSysCaller creates a new read-only instance of ArbSys, bound to a specific deployed contract.
func NewArbSysCaller(address common.Address, caller bind.ContractCaller) (*ArbSysCaller, error) {
	contract, err := bindArbSys(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ArbSysCaller{contract: contract}, nil
}

// NewArbSysTransactor creates a new write-only instance of ArbSys, bound to a specific deployed contract.
func NewArbSysTransactor(address common.Address, transactor bind.ContractTransactor) (*ArbSysTransactor, error) {
	contract, err := bindArbSys(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ArbSysTransactor{contract: contract}, nil
}

// NewArbSysFilterer creates a new log filterer instance of ArbSys, bound to a specific deployed contract.
func NewArbSysFilterer(address common.Address, filterer bind.ContractFilterer) (*ArbSysFilterer, error) {
	contract, err := bindArbSys(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ArbSysFilterer{contract: contract}, nil
}

// bindArbSys binds a generic wrapper to an already deployed contract.
func bindArbSys(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ArbSysMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ArbSys *ArbSysRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ArbSys.Contract.ArbSysCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ArbSys *ArbSysRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ArbSys.Contract.ArbSysTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ArbSys *ArbSysRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ArbSys.Contract.ArbSysTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ArbSys *ArbSysCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ArbSys.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ArbSys *ArbSysTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ArbSys.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ArbSys *ArbSysTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ArbSys.Contract.contract.Transact(opts, method, params...)
}

// ArbBlockHash is a free data retrieval call binding the contract method 0x2b407a82.
//
// Solidity: function arbBlockHash(uint256 arbBlockNum) view returns(bytes32)
func (_ArbSys *ArbSysCaller) ArbBlockHash(opts *bind.CallOpts, arbBlockNum *big.Int) ([32]byte, error) {
	var out []interface{}
	err := _ArbSys.contract.Call(opts, &out, "arbBlockHash", arbBlockNum)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ArbBlockHash is a free data retrieval call binding the contract method 0x2b407a82.
//
// Solidity: function arbBlockHash(uint256 arbBlockNum) view returns(bytes32)
func (_ArbSys *ArbSysSession) ArbBlockHash(arbBlockNum *big.Int) ([32]byte, error) {
	return _ArbSys.Contract.ArbBlockHash(&_ArbSys.CallOpts, arbBlockNum)
}

// ArbBlockHash is a free data retrieval call binding the contract method 0x2b407a82.
//
// Solidity: function arbBlockHash(uint256 arbBlockNum) view returns(bytes32)
func (_ArbSys *ArbSysCallerSession) ArbBlockHash(arbBlockNum *big.Int) ([32]byte, error) {
	return _ArbSys.Contract.ArbBlockHash(&_ArbSys.CallOpts, arbBlockNum)
}

// ArbBlockNumber is a free data retrieval call binding the contract method 0xa3b1b31d.
//
// Solidity: function arbBlockNumber() view returns(uint256)
func (_ArbSys *ArbSysCaller) ArbBlockNumber(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ArbSys.contract.Call(opts, &out, "arbBlockNumber")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ArbBlockNumber is a free data retrieval call binding the contract method 0xa3b1b31d.
//
// Solidity: function arbBlockNumber() view returns(uint256)
func (_ArbSys *ArbSysSession) ArbBlockNumber() (*big.Int, error) {
	return _ArbSys.Contract.ArbBlockNumber(&_ArbSys.CallOpts)
}

// ArbBlockNumber is a free data retrieval call binding the contract method 0xa3b1b31d.
//
// Solidity: function arbBlockNumber() view returns(uint256)
func (_ArbSys *ArbSysCallerSession) ArbBlockNumber() (*big.Int, error) {
	return _ArbSys.Contract.ArbBlockNumber(&_ArbSys.CallOpts)
}

// ArbChainID is a free data retrieval call binding the contract method 0xd127f54a.
//
// Solidity: function arbChainID() view returns(uint256)
func (_ArbSys *ArbSysCaller) ArbChainID(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ArbSys.contract.Call(opts, &out, "arbChainID")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ArbChainID is a free data retrieval call binding the contract method 0xd127f54a.
//
// Solidity: function arbChainID() view returns(uint256)
func (_ArbSys *ArbSysSession) ArbChainID() (*big.Int, error) {
	return _ArbSys.Contract.ArbChainID(&_ArbSys.CallOpts)
}

// ArbChainID is a free data retrieval call binding the contract method 0xd127f54a.
//
// Solidity: function arbChainID() view returns(uint256)
func (_ArbSys *ArbSysCallerSession) ArbChainID() (*big.Int, error) {
	return _ArbSys.Contract.ArbChainID(&_ArbSys.CallOpts)
}

// ArbOSVersion is a free data retrieval call binding the contract method 0x051038f2.
//
// Solidity: function arbOSVersion() view returns(uint256)
func (_ArbSys *ArbSysCaller) ArbOSVersion(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ArbSys.contract.Call(opts, &out, "arbOSVersion")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ArbOSVersion is a free data retrieval call binding the contract method 0x051038f2.
//
// Solidity: function arbOSVersion() view returns(uint256)
func (_ArbSys *ArbSysSession) ArbOSVersion() (*big.Int, error) {
	return _ArbSys.Contract.ArbOSVersion(&_ArbSys.CallOpts)
}

// ArbOSVersion is a free data retrieval call binding the contract method 0x051038f2.
//
// Solidity: function arbOSVersion() view returns(uint256)
func (_ArbSys *ArbSysCallerSession) ArbOSVersion() (*big.Int, error) {
	return _ArbSys.Contract.ArbOSVersion(&_ArbSys.CallOpts)
}

// GetStorageGasAvailable is a free data retrieval call binding the contract method 0xa94597ff.
//
// Solidity: function getStorageGasAvailable() view returns(uint256)
func (_ArbSys *ArbSysCaller) GetStorageGasAvailable(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ArbSys.contract.Call(opts, &out, "getStorageGasAvailable")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetStorageGasAvailable is a free data retrieval call binding the contract method 0xa94597ff.
//
// Solidity: function getStorageGasAvailable() view returns(uint256)
func (_ArbSys *ArbSysSession) GetStorageGasAvailable() (*big.Int, error) {
	return _ArbSys.Contract.GetStorageGasAvailable(&_ArbSys.CallOpts)
}

// GetStorageGasAvailable is a free data retrieval call binding the contract method 0xa94597ff.
//
// Solidity: function getStorageGasAvailable() view returns(uint256)
func (_ArbSys *ArbSysCallerSession) GetStorageGasAvailable() (*big.Int, error) {
	return _ArbSys.Contract.GetStorageGasAvailable(&_ArbSys.CallOpts)
}

// IsTopLevelCall is a free data retrieval call binding the contract method 0x08bd624c.
//
// Solidity: function isTopLevelCall() view returns(bool)
func (_ArbSys *ArbSysCaller) IsTopLevelCall(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _ArbSys.contract.Call(opts, &out, "isTopLevelCall")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsTopLevelCall is a free data retrieval call binding the contract method 0x08bd624c.
//
// Solidity: function isTopLevelCall() view returns(bool)
func (_ArbSys *ArbSysSession) IsTopLevelCall() (bool, error) {
	return _ArbSys.Contract.IsTopLevelCall(&_ArbSys.CallOpts)
}

// IsTopLevelCall is a free data retrieval call binding the contract method 0x08bd624c.
//
// Solidity: function isTopLevelCall() view returns(bool)
func (_ArbSys *ArbSysCallerSession) IsTopLevelCall() (bool, error) {
	return _ArbSys.Contract.IsTopLevelCall(&_ArbSys.CallOpts)
}

// MapL1SenderContractAddressToL2Alias is a free data retrieval call binding the contract method 0x4dbbd506.
//
// Solidity: function mapL1SenderContractAddressToL2Alias(address sender, address unused) pure returns(address)
func (_ArbSys *ArbSysCaller) MapL1SenderContractAddressToL2Alias(opts *bind.CallOpts, sender common.Address, unused common.Address) (common.Address, error) {
	var out []interface{}
	err := _ArbSys.contract.Call(opts, &out, "mapL1SenderContractAddressToL2Alias", sender, unused)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// MapL1SenderContractAddressToL2Alias is a free data retrieval call binding the contract method 0x4dbbd506.
//
// Solidity: function mapL1SenderContractAddressToL2Alias(address sender, address unused) pure returns(address)
func (_ArbSys *ArbSysSession) MapL1SenderContractAddressToL2Alias(sender common.Address, unused common.Address) (common.Address, error) {
	return _ArbSys.Contract.MapL1SenderContractAddressToL2Alias(&_ArbSys.CallOpts, sender, unused)
}

// MapL1SenderContractAddressToL2Alias is a free data retrieval call binding the contract method 0x4dbbd506.
//
// Solidity: function mapL1SenderContractAddressToL2Alias(address sender, address unused) pure returns(address)
func (_ArbSys *ArbSysCallerSession) MapL1SenderContractAddressToL2Alias(sender common.Address, unused common.Address) (common.Address, error) {
	return _ArbSys.Contract.MapL1SenderContractAddressToL2Alias(&_ArbSys.CallOpts, sender, unused)
}

// MyCallersAddressWithoutAliasing is a free data retrieval call binding the contract method 0xd74523b3.
//
// Solidity: function myCallersAddressWithoutAliasing() view returns(address)
func (_ArbSys *ArbSysCaller) MyCallersAddressWithoutAliasing(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ArbSys.contract.Call(opts, &out, "myCallersAddressWithoutAliasing")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// MyCallersAddressWithoutAliasing is a free data retrieval call binding the contract method 0xd74523b3.
//
// Solidity: function myCallersAddressWithoutAliasing() view returns(address)
func (_ArbSys *ArbSysSession) MyCallersAddressWithoutAliasing() (common.Address, error) {
	return _ArbSys.Contract.MyCallersAddressWithoutAliasing(&_ArbSys.CallOpts)
}

// MyCallersAddressWithoutAliasing is a free data retrieval call binding the contract method 0xd74523b3.
//
// Solidity: function myCallersAddressWithoutAliasing() view returns(address)
func (_ArbSys *ArbSysCallerSession) MyCallersAddressWithoutAliasing() (common.Address, error) {
	return _ArbSys.Contract.MyCallersAddressWithoutAliasing(&_ArbSys.CallOpts)
}

// SendMerkleTreeState is a free data retrieval call binding the contract method 0x7aeecd2a.
//
// Solidity: function sendMerkleTreeState() view returns(uint256 size, bytes32 root, bytes32[] partials)
func (_ArbSys *ArbSysCaller) SendMerkleTreeState(opts *bind.CallOpts) (struct {
	Size     *big.Int
	Root     [32]byte
	Partials [][32]byte
}, error) {
	var out []interface{}
	err := _ArbSys.contract.Call(opts, &out, "sendMerkleTreeState")

	outstruct := new(struct {
		Size     *big.Int
		Root     [32]byte
		Partials [][32]byte
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Size = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Root = *abi.ConvertType(out[1], new([32]byte)).(*[32]byte)
	outstruct.Partials = *abi.ConvertType(out[2], new([][32]byte)).(*[][32]byte)

	return *outstruct, err

}

// SendMerkleTreeState is a free data retrieval call binding the contract method 0x7aeecd2a.
//
// Solidity: function sendMerkleTreeState() view returns(uint256 size, bytes32 root, bytes32[] partials)
func (_ArbSys *ArbSysSession) SendMerkleTreeState() (struct {
	Size     *big.Int
	Root     [32]byte
	Partials [][32]byte
}, error) {
	return _ArbSys.Contract.SendMerkleTreeState(&_ArbSys.CallOpts)
}

// SendMerkleTreeState is a free data retrieval call binding the contract method 0x7aeecd2a.
//
// Solidity: function sendMerkleTreeState() view returns(uint256 size, bytes32 root, bytes32[] partials)
func (_ArbSys *ArbSysCallerSession) SendMerkleTreeState() (struct {
	Size     *big.Int
	Root     [32]byte
	Partials [][32]byte
}, error) {
	return _ArbSys.Contract.SendMerkleTreeState(&_ArbSys.CallOpts)
}

// WasMyCallersAddressAliased is a free data retrieval call binding the contract method 0x175a260b.
//
// Solidity: function wasMyCallersAddressAliased() view returns(bool)
func (_ArbSys *ArbSysCaller) WasMyCallersAddressAliased(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _ArbSys.contract.Call(opts, &out, "wasMyCallersAddressAliased")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// WasMyCallersAddressAliased is a free data retrieval call binding the contract method 0x175a260b.
//
// Solidity: function wasMyCallersAddressAliased() view returns(bool)
func (_ArbSys *ArbSysSession) WasMyCallersAddressAliased() (bool, error) {
	return _ArbSys.Contract.WasMyCallersAddressAliased(&_ArbSys.CallOpts)
}

// WasMyCallersAddressAliased is a free data retrieval call binding the contract method 0x175a260b.
//
// Solidity: function wasMyCallersAddressAliased() view returns(bool)
func (_ArbSys *ArbSysCallerSession) WasMyCallersAddressAliased() (bool, error) {
	return _ArbSys.Contract.WasMyCallersAddressAliased(&_ArbSys.CallOpts)
}

// SendTxToL1 is a paid mutator transaction binding the contract method 0x928c169a.
//
// Solidity: function sendTxToL1(address destination, bytes data) payable returns(uint256)
func (_ArbSys *ArbSysTransactor) SendTxToL1(opts *bind.TransactOpts, destination common.Address, data []byte) (*types.Transaction, error) {
	return _ArbSys.contract.Transact(opts, "sendTxToL1", destination, data)
}

// SendTxToL1 is a paid mutator transaction binding the contract method 0x928c169a.
//
// Solidity: function sendTxToL1(address destination, bytes data) payable returns(uint256)
func (_ArbSys *ArbSysSession) SendTxToL1(destination common.Address, data []byte) (*types.Transaction, error) {
	return _ArbSys.Contract.SendTxToL1(&_ArbSys.TransactOpts, destination, data)
}

// SendTxToL1 is a paid mutator transaction binding the contract method 0x928c169a.
//
// Solidity: function sendTxToL1(address destination, bytes data) payable returns(uint256)
func (_ArbSys *ArbSysTransactorSession) SendTxToL1(destination common.Address, data []byte) (*types.Transaction, error) {
	return _ArbSys.Contract.SendTxToL1(&_ArbSys.TransactOpts, destination, data)
}

// WithdrawEth is a paid mutator transaction binding the contract method 0x25e16063.
//
// Solidity: function withdrawEth(address destination) payable returns(uint256)
func (_ArbSys *ArbSysTransactor) WithdrawEth(opts *bind.TransactOpts, destination common.Address) (*types.Transaction, error) {
	return _ArbSys.contract.Transact(opts, "withdrawEth", destination)
}

// WithdrawEth is a paid mutator transaction binding the contract method 0x25e16063.
//
// Solidity: function withdrawEth(address destination) payable returns(uint256)
func (_ArbSys *ArbSysSession) WithdrawEth(destination common.Address) (*types.Transaction, error) {
	return _ArbSys.Contract.WithdrawEth(&_ArbSys.TransactOpts, destination)
}

// WithdrawEth is a paid mutator transaction binding the contract method 0x25e16063.
//
// Solidity: function withdrawEth(address destination) payable returns(uint256)
func (_ArbSys *ArbSysTransactorSession) WithdrawEth(destination common.Address) (*types.Transaction, error) {
	return _ArbSys.Contract.WithdrawEth(&_ArbSys.TransactOpts, destination)
}

// ArbSysL2ToL1TransactionIterator is returned from FilterL2ToL1Transaction and is used to iterate over the raw logs and unpacked data for L2ToL1Transaction events raised by the ArbSys contract.
type ArbSysL2ToL1TransactionIterator struct {
	Event *ArbSysL2ToL1Transaction // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ArbSysL2ToL1TransactionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ArbSysL2ToL1Transaction)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ArbSysL2ToL1Transaction)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ArbSysL2ToL1TransactionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ArbSysL2ToL1TransactionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ArbSysL2ToL1Transaction represents a L2ToL1Transaction event raised by the ArbSys contract.
type ArbSysL2ToL1Transaction struct {
	Caller       common.Address
	Destination  common.Address
	UniqueId     *big.Int
	BatchNumber  *big.Int
	IndexInBatch *big.Int
	ArbBlockNum  *big.Int
	EthBlockNum  *big.Int
	Timestamp    *big.Int
	Callvalue    *big.Int
	Data         []byte
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterL2ToL1Transaction is a free log retrieval operation binding the contract event 0x5baaa87db386365b5c161be377bc3d8e317e8d98d71a3ca7ed7d555340c8f767.
//
// Solidity: event L2ToL1Transaction(address caller, address indexed destination, uint256 indexed uniqueId, uint256 indexed batchNumber, uint256 indexInBatch, uint256 arbBlockNum, uint256 ethBlockNum, uint256 timestamp, uint256 callvalue, bytes data)
func (_ArbSys *ArbSysFilterer) FilterL2ToL1Transaction(opts *bind.FilterOpts, destination []common.Address, uniqueId []*big.Int, batchNumber []*big.Int) (*ArbSysL2ToL1TransactionIterator, error) {

	var destinationRule []interface{}
	for _, destinationItem := range destination {
		destinationRule = append(destinationRule, destinationItem)
	}
	var uniqueIdRule []interface{}
	for _, uniqueIdItem := range uniqueId {
		uniqueIdRule = append(uniqueIdRule, uniqueIdItem)
	}
	var batchNumberRule []interface{}
	for _, batchNumberItem := range batchNumber {
		batchNumberRule = append(batchNumberRule, batchNumberItem)
	}

	logs, sub, err := _ArbSys.contract.FilterLogs(opts, "L2ToL1Transaction", destinationRule, uniqueIdRule, batchNumberRule)
	if err != nil {
		return nil, err
	}
	return &ArbSysL2ToL1TransactionIterator{contract: _ArbSys.contract, event: "L2ToL1Transaction", logs: logs, sub: sub}, nil
}

// WatchL2ToL1Transaction is a free log subscription operation binding the contract event 0x5baaa87db386365b5c161be377bc3d8e317e8d98d71a3ca7ed7d555340c8f767.
//
// Solidity: event L2ToL1Transaction(address caller, address indexed destination, uint256 indexed uniqueId, uint256 indexed batchNumber, uint256 indexInBatch, uint256 arbBlockNum, uint256 ethBlockNum, uint256 timestamp, uint256 callvalue, bytes data)
func (_ArbSys *ArbSysFilterer) WatchL2ToL1Transaction(opts *bind.WatchOpts, sink chan<- *ArbSysL2ToL1Transaction, destination []common.Address, uniqueId []*big.Int, batchNumber []*big.Int) (event.Subscription, error) {

	var destinationRule []interface{}
	for _, destinationItem := range destination {
		destinationRule = append(destinationRule, destinationItem)
	}
	var uniqueIdRule []interface{}
	for _, uniqueIdItem := range uniqueId {
		uniqueIdRule = append(uniqueIdRule, uniqueIdItem)
	}
	var batchNumberRule []interface{}
	for _, batchNumberItem := range batchNumber {
		batchNumberRule = append(batchNumberRule, batchNumberItem)
	}

	logs, sub, err := _ArbSys.contract.WatchLogs(opts, "L2ToL1Transaction", destinationRule, uniqueIdRule, batchNumberRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ArbSysL2ToL1Transaction)
				if err := _ArbSys.contract.UnpackLog(event, "L2ToL1Transaction", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseL2ToL1Transaction is a log parse operation binding the contract event 0x5baaa87db386365b5c161be377bc3d8e317e8d98d71a3ca7ed7d555340c8f767.
//
// Solidity: event L2ToL1Transaction(address caller, address indexed destination, uint256 indexed uniqueId, uint256 indexed batchNumber, uint256 indexInBatch, uint256 arbBlockNum, uint256 ethBlockNum, uint256 timestamp, uint256 callvalue, bytes data)
func (_ArbSys *ArbSysFilterer) ParseL2ToL1Transaction(log types.Log) (*ArbSysL2ToL1Transaction, error) {
	event := new(ArbSysL2ToL1Transaction)
	if err := _ArbSys.contract.UnpackLog(event, "L2ToL1Transaction", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ArbSysL2ToL1TxIterator is returned from FilterL2ToL1Tx and is used to iterate over the raw logs and unpacked data for L2ToL1Tx events raised by the ArbSys contract.
type ArbSysL2ToL1TxIterator struct {
	Event *ArbSysL2ToL1Tx // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ArbSysL2ToL1TxIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ArbSysL2ToL1Tx)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ArbSysL2ToL1Tx)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ArbSysL2ToL1TxIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ArbSysL2ToL1TxIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ArbSysL2ToL1Tx represents a L2ToL1Tx event raised by the ArbSys contract.
type ArbSysL2ToL1Tx struct {
	Caller      common.Address
	Destination common.Address
	Hash        *big.Int
	Position    *big.Int
	ArbBlockNum *big.Int
	EthBlockNum *big.Int
	Timestamp   *big.Int
	Callvalue   *big.Int
	Data        []byte
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterL2ToL1Tx is a free log retrieval operation binding the contract event 0x3e7aafa77dbf186b7fd488006beff893744caa3c4f6f299e8a709fa2087374fc.
//
// Solidity: event L2ToL1Tx(address caller, address indexed destination, uint256 indexed hash, uint256 indexed position, uint256 arbBlockNum, uint256 ethBlockNum, uint256 timestamp, uint256 callvalue, bytes data)
func (_ArbSys *ArbSysFilterer) FilterL2ToL1Tx(opts *bind.FilterOpts, destination []common.Address, hash []*big.Int, position []*big.Int) (*ArbSysL2ToL1TxIterator, error) {

	var destinationRule []interface{}
	for _, destinationItem := range destination {
		destinationRule = append(destinationRule, destinationItem)
	}
	var hashRule []interface{}
	for _, hashItem := range hash {
		hashRule = append(hashRule, hashItem)
	}
	var positionRule []interface{}
	for _, positionItem := range position {
		positionRule = append(positionRule, positionItem)
	}

	logs, sub, err := _ArbSys.contract.FilterLogs(opts, "L2ToL1Tx", destinationRule, hashRule, positionRule)
	if err != nil {
		return nil, err
	}
	return &ArbSysL2ToL1TxIterator{contract: _ArbSys.contract, event: "L2ToL1Tx", logs: logs, sub: sub}, nil
}

// WatchL2ToL1Tx is a free log subscription operation binding the contract event 0x3e7aafa77dbf186b7fd488006beff893744caa3c4f6f299e8a709fa2087374fc.
//
// Solidity: event L2ToL1Tx(address caller, address indexed destination, uint256 indexed hash, uint256 indexed position, uint256 arbBlockNum, uint256 ethBlockNum, uint256 timestamp, uint256 callvalue, bytes data)
func (_ArbSys *ArbSysFilterer) WatchL2ToL1Tx(opts *bind.WatchOpts, sink chan<- *ArbSysL2ToL1Tx, destination []common.Address, hash []*big.Int, position []*big.Int) (event.Subscription, error) {

	var destinationRule []interface{}
	for _, destinationItem := range destination {
		destinationRule = append(destinationRule, destinationItem)
	}
	var hashRule []interface{}
	for _, hashItem := range hash {
		hashRule = append(hashRule, hashItem)
	}
	var positionRule []interface{}
	for _, positionItem := range position {
		positionRule = append(positionRule, positionItem)
	}

	logs, sub, err := _ArbSys.contract.WatchLogs(opts, "L2ToL1Tx", destinationRule, hashRule, positionRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ArbSysL2ToL1Tx)
				if err := _ArbSys.contract.UnpackLog(event, "L2ToL1Tx", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseL2ToL1Tx is a log parse operation binding the contract event 0x3e7aafa77dbf186b7fd488006beff893744caa3c4f6f299e8a709fa2087374fc.
//
// Solidity: event L2ToL1Tx(address caller, address indexed destination, uint256 indexed hash, uint256 indexed position, uint256 arbBlockNum, uint256 ethBlockNum, uint256 timestamp, uint256 callvalue, bytes data)
func (_ArbSys *ArbSysFilterer) ParseL2ToL1Tx(log types.Log) (*ArbSysL2ToL1Tx, error) {
	event := new(ArbSysL2ToL1Tx)
	if err := _ArbSys.contract.UnpackLog(event, "L2ToL1Tx", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ArbSysSendMerkleUpdateIterator is returned from FilterSendMerkleUpdate and is used to iterate over the raw logs and unpacked data for SendMerkleUpdate events raised by the ArbSys contract.
type ArbSysSendMerkleUpdateIterator struct {
	Event *ArbSysSendMerkleUpdate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ArbSysSendMerkleUpdateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ArbSysSendMerkleUpdate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ArbSysSendMerkleUpdate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ArbSysSendMerkleUpdateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ArbSysSendMerkleUpdateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ArbSysSendMerkleUpdate represents a SendMerkleUpdate event raised by the ArbSys contract.
type ArbSysSendMerkleUpdate struct {
	Reserved *big.Int
	Hash     [32]byte
	Position *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterSendMerkleUpdate is a free log retrieval operation binding the contract event 0xe9e13da364699fb5b0496ff5a0fc70760ad5836e93ba96568a4e42b9914a8b95.
//
// Solidity: event SendMerkleUpdate(uint256 indexed reserved, bytes32 indexed hash, uint256 indexed position)
func (_ArbSys *ArbSysFilterer) FilterSendMerkleUpdate(opts *bind.FilterOpts, reserved []*big.Int, hash [][32]byte, position []*big.Int) (*ArbSysSendMerkleUpdateIterator, error) {

	var reservedRule []interface{}
	for _, reservedItem := range reserved {
		reservedRule = append(reservedRule, reservedItem)
	}
	var hashRule []interface{}
	for _, hashItem := range hash {
		hashRule = append(hashRule, hashItem)
	}
	var positionRule []interface{}
	for _, positionItem := range position {
		positionRule = append(positionRule, positionItem)
	}

	logs, sub, err := _ArbSys.contract.FilterLogs(opts, "SendMerkleUpdate", reservedRule, hashRule, positionRule)
	if err != nil {
		return nil, err
	}
	return &ArbSysSendMerkleUpdateIterator{contract: _ArbSys.contract, event: "SendMerkleUpdate", logs: logs, sub: sub}, nil
}

// WatchSendMerkleUpdate is a free log subscription operation binding the contract event 0xe9e13da364699fb5b0496ff5a0fc70760ad5836e93ba96568a4e42b9914a8b95.
//
// Solidity: event SendMerkleUpdate(uint256 indexed reserved, bytes32 indexed hash, uint256 indexed position)
func (_ArbSys *ArbSysFilterer) WatchSendMerkleUpdate(opts *bind.WatchOpts, sink chan<- *ArbSysSendMerkleUpdate, reserved []*big.Int, hash [][32]byte, position []*big.Int) (event.Subscription, error) {

	var reservedRule []interface{}
	for _, reservedItem := range reserved {
		reservedRule = append(reservedRule, reservedItem)
	}
	var hashRule []interface{}
	for _, hashItem := range hash {
		hashRule = append(hashRule, hashItem)
	}
	var positionRule []interface{}
	for _, positionItem := range position {
		positionRule = append(positionRule, positionItem)
	}

	logs, sub, err := _ArbSys.contract.WatchLogs(opts, "SendMerkleUpdate", reservedRule, hashRule, positionRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ArbSysSendMerkleUpdate)
				if err := _ArbSys.contract.UnpackLog(event, "SendMerkleUpdate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSendMerkleUpdate is a log parse operation binding the contract event 0xe9e13da364699fb5b0496ff5a0fc70760ad5836e93ba96568a4e42b9914a8b95.
//
// Solidity: event SendMerkleUpdate(uint256 indexed reserved, bytes32 indexed hash, uint256 indexed position)
func (_ArbSys *ArbSysFilterer) ParseSendMerkleUpdate(log types.Log) (*ArbSysSendMerkleUpdate, error) {
	event := new(ArbSysSendMerkleUpdate)
	if err := _ArbSys.contract.UnpackLog(event, "SendMerkleUpdate", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ArbWasmMetaData contains all meta data concerning the ArbWasm contract.
var ArbWasmMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"program\",\"type\":\"address\"}],\"name\":\"activateProgram\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"version\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"dataFee\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockCacheSize\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"count\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"codehash\",\"type\":\"bytes32\"}],\"name\":\"codehashAsmSize\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"size\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"codehash\",\"type\":\"bytes32\"}],\"name\":\"codehashKeepalive\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"codehash\",\"type\":\"bytes32\"}],\"name\":\"codehashVersion\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"version\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expiryDays\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"_days\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freePages\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"pages\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initCostScalar\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"percent\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inkPrice\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"price\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keepaliveDays\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"_days\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxStackDepth\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"depth\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minInitGas\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"gas\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"cached\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pageGas\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"gas\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pageLimit\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"limit\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pageRamp\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"ramp\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"program\",\"type\":\"address\"}],\"name\":\"programInitGas\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"gas\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"gasWhenCached\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"program\",\"type\":\"address\"}],\"name\":\"programMemoryFootprint\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"footprint\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"program\",\"type\":\"address\"}],\"name\":\"programTimeLeft\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"_secs\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"program\",\"type\":\"address\"}],\"name\":\"programVersion\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"version\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stylusVersion\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"version\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"codehash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"moduleHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"program\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dataFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"version\",\"type\":\"uint16\"}],\"name\":\"ProgramActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"codehash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dataFee\",\"type\":\"uint256\"}],\"name\":\"ProgramLifetimeExtended\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"ageInSeconds\",\"type\":\"uint64\"}],\"name\":\"ProgramExpired\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"have\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"want\",\"type\":\"uint256\"}],\"name\":\"ProgramInsufficientValue\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"ageInSeconds\",\"type\":\"uint64\"}],\"name\":\"ProgramKeepaliveTooSoon\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"version\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"stylusVersion\",\"type\":\"uint16\"}],\"name\":\"ProgramNeedsUpgrade\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProgramNotActivated\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProgramNotWasm\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProgramUpToDate\",\"type\":\"error\"}]",
}

// ArbWasmABI is the input ABI used to generate the binding from.
// Deprecated: Use ArbWasmMetaData.ABI instead.
var ArbWasmABI = ArbWasmMetaData.ABI

// ArbWasm is an auto generated Go binding around an Ethereum contract.
type ArbWasm struct {
	ArbWasmCaller     // Read-only binding to the contract
	ArbWasmTransactor // Write-only binding to the contract
	ArbWasmFilterer   // Log filterer for contract events
}

// ArbWasmCaller is an auto generated read-only Go binding around an Ethereum contract.
type ArbWasmCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ArbWasmTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ArbWasmTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ArbWasmFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ArbWasmFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ArbWasmSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ArbWasmSession struct {
	Contract     *ArbWasm          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ArbWasmCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ArbWasmCallerSession struct {
	Contract *ArbWasmCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// ArbWasmTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ArbWasmTransactorSession struct {
	Contract     *ArbWasmTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// ArbWasmRaw is an auto generated low-level Go binding around an Ethereum contract.
type ArbWasmRaw struct {
	Contract *ArbWasm // Generic contract binding to access the raw methods on
}

// ArbWasmCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ArbWasmCallerRaw struct {
	Contract *ArbWasmCaller // Generic read-only contract binding to access the raw methods on
}

// ArbWasmTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ArbWasmTransactorRaw struct {
	Contract *ArbWasmTransactor // Generic write-only contract binding to access the raw methods on
}

// NewArbWasm creates a new instance of ArbWasm, bound to a specific deployed contract.
func NewArbWasm(address common.Address, backend bind.ContractBackend) (*ArbWasm, error) {
	contract, err := bindArbWasm(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ArbWasm{ArbWasmCaller: ArbWasmCaller{contract: contract}, ArbWasmTransactor: ArbWasmTransactor{contract: contract}, ArbWasmFilterer: ArbWasmFilterer{contract: contract}}, nil
}

// NewArbWasmCaller creates a new read-only instance of ArbWasm, bound to a specific deployed contract.
func NewArbWasmCaller(address common.Address, caller bind.ContractCaller) (*ArbWasmCaller, error) {
	contract, err := bindArbWasm(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ArbWasmCaller{contract: contract}, nil
}

// NewArbWasmTransactor creates a new write-only instance of ArbWasm, bound to a specific deployed contract.
func NewArbWasmTransactor(address common.Address, transactor bind.ContractTransactor) (*ArbWasmTransactor, error) {
	contract, err := bindArbWasm(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ArbWasmTransactor{contract: contract}, nil
}

// NewArbWasmFilterer creates a new log filterer instance of ArbWasm, bound to a specific deployed contract.
func NewArbWasmFilterer(address common.Address, filterer bind.ContractFilterer) (*ArbWasmFilterer, error) {
	contract, err := bindArbWasm(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ArbWasmFilterer{contract: contract}, nil
}

// bindArbWasm binds a generic wrapper to an already deployed contract.
func bindArbWasm(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ArbWasmMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ArbWasm *ArbWasmRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ArbWasm.Contract.ArbWasmCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ArbWasm *ArbWasmRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ArbWasm.Contract.ArbWasmTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ArbWasm *ArbWasmRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ArbWasm.Contract.ArbWasmTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ArbWasm *ArbWasmCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ArbWasm.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ArbWasm *ArbWasmTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ArbWasm.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ArbWasm *ArbWasmTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ArbWasm.Contract.contract.Transact(opts, method, params...)
}

// BlockCacheSize is a free data retrieval call binding the contract method 0x7af6e819.
//
// Solidity: function blockCacheSize() view returns(uint16 count)
func (_ArbWasm *ArbWasmCaller) BlockCacheSize(opts *bind.CallOpts) (uint16, error) {
	var out []interface{}
	err := _ArbWasm.contract.Call(opts, &out, "blockCacheSize")

	if err != nil {
		return *new(uint16), err
	}

	out0 := *abi.ConvertType(out[0], new(uint16)).(*uint16)

	return out0, err

}

// BlockCacheSize is a free data retrieval call binding the contract method 0x7af6e819.
//
// Solidity: function blockCacheSize() view returns(uint16 count)
func (_ArbWasm *ArbWasmSession) BlockCacheSize() (uint16, error) {
	return _ArbWasm.Contract.BlockCacheSize(&_ArbWasm.CallOpts)
}

// BlockCacheSize is a free data retrieval call binding the contract method 0x7af6e819.
//
// Solidity: function blockCacheSize() view returns(uint16 count)
func (_ArbWasm *ArbWasmCallerSession) BlockCacheSize() (uint16, error) {
	return _ArbWasm.Contract.BlockCacheSize(&_ArbWasm.CallOpts)
}

// CodehashAsmSize is a free data retrieval call binding the contract method 0x4089267f.
//
// Solidity: function codehashAsmSize(bytes32 codehash) view returns(uint32 size)
func (_ArbWasm *ArbWasmCaller) CodehashAsmSize(opts *bind.CallOpts, codehash [32]byte) (uint32, error) {
	var out []interface{}
	err := _ArbWasm.contract.Call(opts, &out, "codehashAsmSize", codehash)

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// CodehashAsmSize is a free data retrieval call binding the contract method 0x4089267f.
//
// Solidity: function codehashAsmSize(bytes32 codehash) view returns(uint32 size)
func (_ArbWasm *ArbWasmSession) CodehashAsmSize(codehash [32]byte) (uint32, error) {
	return _ArbWasm.Contract.CodehashAsmSize(&_ArbWasm.CallOpts, codehash)
}

// CodehashAsmSize is a free data retrieval call binding the contract method 0x4089267f.
//
// Solidity: function codehashAsmSize(bytes32 codehash) view returns(uint32 size)
func (_ArbWasm *ArbWasmCallerSession) CodehashAsmSize(codehash [32]byte) (uint32, error) {
	return _ArbWasm.Contract.CodehashAsmSize(&_ArbWasm.CallOpts, codehash)
}

// CodehashVersion is a free data retrieval call binding the contract method 0xd70c0ca7.
//
// Solidity: function codehashVersion(bytes32 codehash) view returns(uint16 version)
func (_ArbWasm *ArbWasmCaller) CodehashVersion(opts *bind.CallOpts, codehash [32]byte) (uint16, error) {
	var out []interface{}
	err := _ArbWasm.contract.Call(opts, &out, "codehashVersion", codehash)

	if err != nil {
		return *new(uint16), err
	}

	out0 := *abi.ConvertType(out[0], new(uint16)).(*uint16)

	return out0, err

}

// CodehashVersion is a free data retrieval call binding the contract method 0xd70c0ca7.
//
// Solidity: function codehashVersion(bytes32 codehash) view returns(uint16 version)
func (_ArbWasm *ArbWasmSession) CodehashVersion(codehash [32]byte) (uint16, error) {
	return _ArbWasm.Contract.CodehashVersion(&_ArbWasm.CallOpts, codehash)
}

// CodehashVersion is a free data retrieval call binding the contract method 0xd70c0ca7.
//
// Solidity: function codehashVersion(bytes32 codehash) view returns(uint16 version)
func (_ArbWasm *ArbWasmCallerSession) CodehashVersion(codehash [32]byte) (uint16, error) {
	return _ArbWasm.Contract.CodehashVersion(&_ArbWasm.CallOpts, codehash)
}

// ExpiryDays is a free data retrieval call binding the contract method 0x309f6555.
//
// Solidity: function expiryDays() view returns(uint16 _days)
func (_ArbWasm *ArbWasmCaller) ExpiryDays(opts *bind.CallOpts) (uint16, error) {
	var out []interface{}
	err := _ArbWasm.contract.Call(opts, &out, "expiryDays")

	if err != nil {
		return *new(uint16), err
	}

	out0 := *abi.ConvertType(out[0], new(uint16)).(*uint16)

	return out0, err

}

// ExpiryDays is a free data retrieval call binding the contract method 0x309f6555.
//
// Solidity: function expiryDays() view returns(uint16 _days)
func (_ArbWasm *ArbWasmSession) ExpiryDays() (uint16, error) {
	return _ArbWasm.Contract.ExpiryDays(&_ArbWasm.CallOpts)
}

// ExpiryDays is a free data retrieval call binding the contract method 0x309f6555.
//
// Solidity: function expiryDays() view returns(uint16 _days)
func (_ArbWasm *ArbWasmCallerSession) ExpiryDays() (uint16, error) {
	return _ArbWasm.Contract.ExpiryDays(&_ArbWasm.CallOpts)
}

// FreePages is a free data retrieval call binding the contract method 0x4490c19d.
//
// Solidity: function freePages() view returns(uint16 pages)
func (_ArbWasm *ArbWasmCaller) FreePages(opts *bind.CallOpts) (uint16, error) {
	var out []interface{}
	err := _ArbWasm.contract.Call(opts, &out, "freePages")

	if err != nil {
		return *new(uint16), err
	}

	out0 := *abi.ConvertType(out[0], new(uint16)).(*uint16)

	return out0, err

}

// FreePages is a free data retrieval call binding the contract method 0x4490c19d.
//
// Solidity: function freePages() view returns(uint16 pages)
func (_ArbWasm *ArbWasmSession) FreePages() (uint16, error) {
	return _ArbWasm.Contract.FreePages(&_ArbWasm.CallOpts)
}

// FreePages is a free data retrieval call binding the contract method 0x4490c19d.
//
// Solidity: function freePages() view returns(uint16 pages)
func (_ArbWasm *ArbWasmCallerSession) FreePages() (uint16, error) {
	return _ArbWasm.Contract.FreePages(&_ArbWasm.CallOpts)
}

// InitCostScalar is a free data retrieval call binding the contract method 0x5fc94c0b.
//
// Solidity: function initCostScalar() view returns(uint64 percent)
func (_ArbWasm *ArbWasmCaller) InitCostScalar(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _ArbWasm.contract.Call(opts, &out, "initCostScalar")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// InitCostScalar is a free data retrieval call binding the contract method 0x5fc94c0b.
//
// Solidity: function initCostScalar() view returns(uint64 percent)
func (_ArbWasm *ArbWasmSession) InitCostScalar() (uint64, error) {
	return _ArbWasm.Contract.InitCostScalar(&_ArbWasm.CallOpts)
}

// InitCostScalar is a free data retrieval call binding the contract method 0x5fc94c0b.
//
// Solidity: function initCostScalar() view returns(uint64 percent)
func (_ArbWasm *ArbWasmCallerSession) InitCostScalar() (uint64, error) {
	return _ArbWasm.Contract.InitCostScalar(&_ArbWasm.CallOpts)
}

// InkPrice is a free data retrieval call binding the contract method 0xd1c17abc.
//
// Solidity: function inkPrice() view returns(uint32 price)
func (_ArbWasm *ArbWasmCaller) InkPrice(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _ArbWasm.contract.Call(opts, &out, "inkPrice")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// InkPrice is a free data retrieval call binding the contract method 0xd1c17abc.
//
// Solidity: function inkPrice() view returns(uint32 price)
func (_ArbWasm *ArbWasmSession) InkPrice() (uint32, error) {
	return _ArbWasm.Contract.InkPrice(&_ArbWasm.CallOpts)
}

// InkPrice is a free data retrieval call binding the contract method 0xd1c17abc.
//
// Solidity: function inkPrice() view returns(uint32 price)
func (_ArbWasm *ArbWasmCallerSession) InkPrice() (uint32, error) {
	return _ArbWasm.Contract.InkPrice(&_ArbWasm.CallOpts)
}

// KeepaliveDays is a free data retrieval call binding the contract method 0x0a936455.
//
// Solidity: function keepaliveDays() view returns(uint16 _days)
func (_ArbWasm *ArbWasmCaller) KeepaliveDays(opts *bind.CallOpts) (uint16, error) {
	var out []interface{}
	err := _ArbWasm.contract.Call(opts, &out, "keepaliveDays")

	if err != nil {
		return *new(uint16), err
	}

	out0 := *abi.ConvertType(out[0], new(uint16)).(*uint16)

	return out0, err

}

// KeepaliveDays is a free data retrieval call binding the contract method 0x0a936455.
//
// Solidity: function keepaliveDays() view returns(uint16 _days)
func (_ArbWasm *ArbWasmSession) KeepaliveDays() (uint16, error) {
	return _ArbWasm.Contract.KeepaliveDays(&_ArbWasm.CallOpts)
}

// KeepaliveDays is a free data retrieval call binding the contract method 0x0a936455.
//
// Solidity: function keepaliveDays() view returns(uint16 _days)
func (_ArbWasm *ArbWasmCallerSession) KeepaliveDays() (uint16, error) {
	return _ArbWasm.Contract.KeepaliveDays(&_ArbWasm.CallOpts)
}

// MaxStackDepth is a free data retrieval call binding the contract method 0x8ccfaa70.
//
// Solidity: function maxStackDepth() view returns(uint32 depth)
func (_ArbWasm *ArbWasmCaller) MaxStackDepth(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _ArbWasm.contract.Call(opts, &out, "maxStackDepth")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// MaxStackDepth is a free data retrieval call binding the contract method 0x8ccfaa70.
//
// Solidity: function maxStackDepth() view returns(uint32 depth)
func (_ArbWasm *ArbWasmSession) MaxStackDepth() (uint32, error) {
	return _ArbWasm.Contract.MaxStackDepth(&_ArbWasm.CallOpts)
}

// MaxStackDepth is a free data retrieval call binding the contract method 0x8ccfaa70.
//
// Solidity: function maxStackDepth() view returns(uint32 depth)
func (_ArbWasm *ArbWasmCallerSession) MaxStackDepth() (uint32, error) {
	return _ArbWasm.Contract.MaxStackDepth(&_ArbWasm.CallOpts)
}

// MinInitGas is a free data retrieval call binding the contract method 0x99d0b38d.
//
// Solidity: function minInitGas() view returns(uint64 gas, uint64 cached)
func (_ArbWasm *ArbWasmCaller) MinInitGas(opts *bind.CallOpts) (struct {
	Gas    uint64
	Cached uint64
}, error) {
	var out []interface{}
	err := _ArbWasm.contract.Call(opts, &out, "minInitGas")

	outstruct := new(struct {
		Gas    uint64
		Cached uint64
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Gas = *abi.ConvertType(out[0], new(uint64)).(*uint64)
	outstruct.Cached = *abi.ConvertType(out[1], new(uint64)).(*uint64)

	return *outstruct, err

}

// MinInitGas is a free data retrieval call binding the contract method 0x99d0b38d.
//
// Solidity: function minInitGas() view returns(uint64 gas, uint64 cached)
func (_ArbWasm *ArbWasmSession) MinInitGas() (struct {
	Gas    uint64
	Cached uint64
}, error) {
	return _ArbWasm.Contract.MinInitGas(&_ArbWasm.CallOpts)
}

// MinInitGas is a free data retrieval call binding the contract method 0x99d0b38d.
//
// Solidity: function minInitGas() view returns(uint64 gas, uint64 cached)
func (_ArbWasm *ArbWasmCallerSession) MinInitGas() (struct {
	Gas    uint64
	Cached uint64
}, error) {
	return _ArbWasm.Contract.MinInitGas(&_ArbWasm.CallOpts)
}

// PageGas is a free data retrieval call binding the contract method 0x7af4ba49.
//
// Solidity: function pageGas() view returns(uint16 gas)
func (_ArbWasm *ArbWasmCaller) PageGas(opts *bind.CallOpts) (uint16, error) {
	var out []interface{}
	err := _ArbWasm.contract.Call(opts, &out, "pageGas")

	if err != nil {
		return *new(uint16), err
	}

	out0 := *abi.ConvertType(out[0], new(uint16)).(*uint16)

	return out0, err

}

// PageGas is a free data retrieval call binding the contract method 0x7af4ba49.
//
// Solidity: function pageGas() view returns(uint16 gas)
func (_ArbWasm *ArbWasmSession) PageGas() (uint16, error) {
	return _ArbWasm.Contract.PageGas(&_ArbWasm.CallOpts)
}

// PageGas is a free data retrieval call binding the contract method 0x7af4ba49.
//
// Solidity: function pageGas() view returns(uint16 gas)
func (_ArbWasm *ArbWasmCallerSession) PageGas() (uint16, error) {
	return _ArbWasm.Contract.PageGas(&_ArbWasm.CallOpts)
}

// PageLimit is a free data retrieval call binding the contract method 0x9786f96e.
//
// Solidity: function pageLimit() view returns(uint16 limit)
func (_ArbWasm *ArbWasmCaller) PageLimit(opts *bind.CallOpts) (uint16, error) {
	var out []interface{}
	err := _ArbWasm.contract.Call(opts, &out, "pageLimit")

	if err != nil {
		return *new(uint16), err
	}

	out0 := *abi.ConvertType(out[0], new(uint16)).(*uint16)

	return out0, err

}

// PageLimit is a free data retrieval call binding the contract method 0x9786f96e.
//
// Solidity: function pageLimit() view returns(uint16 limit)
func (_ArbWasm *ArbWasmSession) PageLimit() (uint16, error) {
	return _ArbWasm.Contract.PageLimit(&_ArbWasm.CallOpts)
}

// PageLimit is a free data retrieval call binding the contract method 0x9786f96e.
//
// Solidity: function pageLimit() view returns(uint16 limit)
func (_ArbWasm *ArbWasmCallerSession) PageLimit() (uint16, error) {
	return _ArbWasm.Contract.PageLimit(&_ArbWasm.CallOpts)
}

// PageRamp is a free data retrieval call binding the contract method 0x11c82ae8.
//
// Solidity: function pageRamp() view returns(uint64 ramp)
func (_ArbWasm *ArbWasmCaller) PageRamp(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _ArbWasm.contract.Call(opts, &out, "pageRamp")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// PageRamp is a free data retrieval call binding the contract method 0x11c82ae8.
//
// Solidity: function pageRamp() view returns(uint64 ramp)
func (_ArbWasm *ArbWasmSession) PageRamp() (uint64, error) {
	return _ArbWasm.Contract.PageRamp(&_ArbWasm.CallOpts)
}

// PageRamp is a free data retrieval call binding the contract method 0x11c82ae8.
//
// Solidity: function pageRamp() view returns(uint64 ramp)
func (_ArbWasm *ArbWasmCallerSession) PageRamp() (uint64, error) {
	return _ArbWasm.Contract.PageRamp(&_ArbWasm.CallOpts)
}

// ProgramInitGas is a free data retrieval call binding the contract method 0x62b688aa.
//
// Solidity: function programInitGas(address program) view returns(uint64 gas, uint64 gasWhenCached)
func (_ArbWasm *ArbWasmCaller) ProgramInitGas(opts *bind.CallOpts, program common.Address) (struct {
	Gas           uint64
	GasWhenCached uint64
}, error) {
	var out []interface{}
	err := _ArbWasm.contract.Call(opts, &out, "programInitGas", program)

	outstruct := new(struct {
		Gas           uint64
		GasWhenCached uint64
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Gas = *abi.ConvertType(out[0], new(uint64)).(*uint64)
	outstruct.GasWhenCached = *abi.ConvertType(out[1], new(uint64)).(*uint64)

	return *outstruct, err

}

// ProgramInitGas is a free data retrieval call binding the contract method 0x62b688aa.
//
// Solidity: function programInitGas(address program) view returns(uint64 gas, uint64 gasWhenCached)
func (_ArbWasm *ArbWasmSession) ProgramInitGas(program common.Address) (struct {
	Gas           uint64
	GasWhenCached uint64
}, error) {
	return _ArbWasm.Contract.ProgramInitGas(&_ArbWasm.CallOpts, program)
}

// ProgramInitGas is a free data retrieval call binding the contract method 0x62b688aa.
//
// Solidity: function programInitGas(address program) view returns(uint64 gas, uint64 gasWhenCached)
func (_ArbWasm *ArbWasmCallerSession) ProgramInitGas(program common.Address) (struct {
	Gas           uint64
	GasWhenCached uint64
}, error) {
	return _ArbWasm.Contract.ProgramInitGas(&_ArbWasm.CallOpts, program)
}

// ProgramMemoryFootprint is a free data retrieval call binding the contract method 0xaef36be3.
//
// Solidity: function programMemoryFootprint(address program) view returns(uint16 footprint)
func (_ArbWasm *ArbWasmCaller) ProgramMemoryFootprint(opts *bind.CallOpts, program common.Address) (uint16, error) {
	var out []interface{}
	err := _ArbWasm.contract.Call(opts, &out, "programMemoryFootprint", program)

	if err != nil {
		return *new(uint16), err
	}

	out0 := *abi.ConvertType(out[0], new(uint16)).(*uint16)

	return out0, err

}

// ProgramMemoryFootprint is a free data retrieval call binding the contract method 0xaef36be3.
//
// Solidity: function programMemoryFootprint(address program) view returns(uint16 footprint)
func (_ArbWasm *ArbWasmSession) ProgramMemoryFootprint(program common.Address) (uint16, error) {
	return _ArbWasm.Contract.ProgramMemoryFootprint(&_ArbWasm.CallOpts, program)
}

// ProgramMemoryFootprint is a free data retrieval call binding the contract method 0xaef36be3.
//
// Solidity: function programMemoryFootprint(address program) view returns(uint16 footprint)
func (_ArbWasm *ArbWasmCallerSession) ProgramMemoryFootprint(program common.Address) (uint16, error) {
	return _ArbWasm.Contract.ProgramMemoryFootprint(&_ArbWasm.CallOpts, program)
}

// ProgramTimeLeft is a free data retrieval call binding the contract method 0xc775a62a.
//
// Solidity: function programTimeLeft(address program) view returns(uint64 _secs)
func (_ArbWasm *ArbWasmCaller) ProgramTimeLeft(opts *bind.CallOpts, program common.Address) (uint64, error) {
	var out []interface{}
	err := _ArbWasm.contract.Call(opts, &out, "programTimeLeft", program)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ProgramTimeLeft is a free data retrieval call binding the contract method 0xc775a62a.
//
// Solidity: function programTimeLeft(address program) view returns(uint64 _secs)
func (_ArbWasm *ArbWasmSession) ProgramTimeLeft(program common.Address) (uint64, error) {
	return _ArbWasm.Contract.ProgramTimeLeft(&_ArbWasm.CallOpts, program)
}

// ProgramTimeLeft is a free data retrieval call binding the contract method 0xc775a62a.
//
// Solidity: function programTimeLeft(address program) view returns(uint64 _secs)
func (_ArbWasm *ArbWasmCallerSession) ProgramTimeLeft(program common.Address) (uint64, error) {
	return _ArbWasm.Contract.ProgramTimeLeft(&_ArbWasm.CallOpts, program)
}

// ProgramVersion is a free data retrieval call binding the contract method 0xcc8f4e88.
//
// Solidity: function programVersion(address program) view returns(uint16 version)
func (_ArbWasm *ArbWasmCaller) ProgramVersion(opts *bind.CallOpts, program common.Address) (uint16, error) {
	var out []interface{}
	err := _ArbWasm.contract.Call(opts, &out, "programVersion", program)

	if err != nil {
		return *new(uint16), err
	}

	out0 := *abi.ConvertType(out[0], new(uint16)).(*uint16)

	return out0, err

}

// ProgramVersion is a free data retrieval call binding the contract method 0xcc8f4e88.
//
// Solidity: function programVersion(address program) view returns(uint16 version)
func (_ArbWasm *ArbWasmSession) ProgramVersion(program common.Address) (uint16, error) {
	return _ArbWasm.Contract.ProgramVersion(&_ArbWasm.CallOpts, program)
}

// ProgramVersion is a free data retrieval call binding the contract method 0xcc8f4e88.
//
// Solidity: function programVersion(address program) view returns(uint16 version)
func (_ArbWasm *ArbWasmCallerSession) ProgramVersion(program common.Address) (uint16, error) {
	return _ArbWasm.Contract.ProgramVersion(&_ArbWasm.CallOpts, program)
}

// StylusVersion is a free data retrieval call binding the contract method 0xa996e0c2.
//
// Solidity: function stylusVersion() view returns(uint16 version)
func (_ArbWasm *ArbWasmCaller) StylusVersion(opts *bind.CallOpts) (uint16, error) {
	var out []interface{}
	err := _ArbWasm.contract.Call(opts, &out, "stylusVersion")

	if err != nil {
		return *new(uint16), err
	}

	out0 := *abi.ConvertType(out[0], new(uint16)).(*uint16)

	return out0, err

}

// StylusVersion is a free data retrieval call binding the contract method 0xa996e0c2.
//
// Solidity: function stylusVersion() view returns(uint16 version)
func (_ArbWasm *ArbWasmSession) StylusVersion() (uint16, error) {
	return _ArbWasm.Contract.StylusVersion(&_ArbWasm.CallOpts)
}

// StylusVersion is a free data retrieval call binding the contract method 0xa996e0c2.
//
// Solidity: function stylusVersion() view returns(uint16 version)
func (_ArbWasm *ArbWasmCallerSession) StylusVersion() (uint16, error) {
	return _ArbWasm.Contract.StylusVersion(&_ArbWasm.CallOpts)
}

// ActivateProgram is a paid mutator transaction binding the contract method 0x58c780c2.
//
// Solidity: function activateProgram(address program) payable returns(uint16 version, uint256 dataFee)
func (_ArbWasm *ArbWasmTransactor) ActivateProgram(opts *bind.TransactOpts, program common.Address) (*types.Transaction, error) {
	return _ArbWasm.contract.Transact(opts, "activateProgram", program)
}

// ActivateProgram is a paid mutator transaction binding the contract method 0x58c780c2.
//
// Solidity: function activateProgram(address program) payable returns(uint16 version, uint256 dataFee)
func (_ArbWasm *ArbWasmSession) ActivateProgram(program common.Address) (*types.Transaction, error) {
	return _ArbWasm.Contract.ActivateProgram(&_ArbWasm.TransactOpts, program)
}

// ActivateProgram is a paid mutator transaction binding the contract method 0x58c780c2.
//
// Solidity: function activateProgram(address program) payable returns(uint16 version, uint256 dataFee)
func (_ArbWasm *ArbWasmTransactorSession) ActivateProgram(program common.Address) (*types.Transaction, error) {
	return _ArbWasm.Contract.ActivateProgram(&_ArbWasm.TransactOpts, program)
}

// CodehashKeepalive is a paid mutator transaction binding the contract method 0xc689bad5.
//
// Solidity: function codehashKeepalive(bytes32 codehash) payable returns()
func (_ArbWasm *ArbWasmTransactor) CodehashKeepalive(opts *bind.TransactOpts, codehash [32]byte) (*types.Transaction, error) {
	return _ArbWasm.contract.Transact(opts, "codehashKeepalive", codehash)
}

// CodehashKeepalive is a paid mutator transaction binding the contract method 0xc689bad5.
//
// Solidity: function codehashKeepalive(bytes32 codehash) payable returns()
func (_ArbWasm *ArbWasmSession) CodehashKeepalive(codehash [32]byte) (*types.Transaction, error) {
	return _ArbWasm.Contract.CodehashKeepalive(&_ArbWasm.TransactOpts, codehash)
}

// CodehashKeepalive is a paid mutator transaction binding the contract method 0xc689bad5.
//
// Solidity: function codehashKeepalive(bytes32 codehash) payable returns()
func (_ArbWasm *ArbWasmTransactorSession) CodehashKeepalive(codehash [32]byte) (*types.Transaction, error) {
	return _ArbWasm.Contract.CodehashKeepalive(&_ArbWasm.TransactOpts, codehash)
}

// ArbWasmProgramActivatedIterator is returned from FilterProgramActivated and is used to iterate over the raw logs and unpacked data for ProgramActivated events raised by the ArbWasm contract.
type ArbWasmProgramActivatedIterator struct {
	Event *ArbWasmProgramActivated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ArbWasmProgramActivatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ArbWasmProgramActivated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ArbWasmProgramActivated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ArbWasmProgramActivatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ArbWasmProgramActivatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ArbWasmProgramActivated represents a ProgramActivated event raised by the ArbWasm contract.
type ArbWasmProgramActivated struct {
	Codehash   [32]byte
	ModuleHash [32]byte
	Program    common.Address
	DataFee    *big.Int
	Version    uint16
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterProgramActivated is a free log retrieval operation binding the contract event 0xc0e812780707128d9a180db8ee4d1c1f1300b6dd0626d577b5d9ac759b76253c.
//
// Solidity: event ProgramActivated(bytes32 indexed codehash, bytes32 moduleHash, address program, uint256 dataFee, uint16 version)
func (_ArbWasm *ArbWasmFilterer) FilterProgramActivated(opts *bind.FilterOpts, codehash [][32]byte) (*ArbWasmProgramActivatedIterator, error) {

	var codehashRule []interface{}
	for _, codehashItem := range codehash {
		codehashRule = append(codehashRule, codehashItem)
	}

	logs, sub, err := _ArbWasm.contract.FilterLogs(opts, "ProgramActivated", codehashRule)
	if err != nil {
		return nil, err
	}
	return &ArbWasmProgramActivatedIterator{contract: _ArbWasm.contract, event: "ProgramActivated", logs: logs, sub: sub}, nil
}

// WatchProgramActivated is a free log subscription operation binding the contract event 0xc0e812780707128d9a180db8ee4d1c1f1300b6dd0626d577b5d9ac759b76253c.
//
// Solidity: event ProgramActivated(bytes32 indexed codehash, bytes32 moduleHash, address program, uint256 dataFee, uint16 version)
func (_ArbWasm *ArbWasmFilterer) WatchProgramActivated(opts *bind.WatchOpts, sink chan<- *ArbWasmProgramActivated, codehash [][32]byte) (event.Subscription, error) {

	var codehashRule []interface{}
	for _, codehashItem := range codehash {
		codehashRule = append(codehashRule, codehashItem)
	}

	logs, sub, err := _ArbWasm.contract.WatchLogs(opts, "ProgramActivated", codehashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ArbWasmProgramActivated)
				if err := _ArbWasm.contract.UnpackLog(event, "ProgramActivated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseProgramActivated is a log parse operation binding the contract event 0xc0e812780707128d9a180db8ee4d1c1f1300b6dd0626d577b5d9ac759b76253c.
//
// Solidity: event ProgramActivated(bytes32 indexed codehash, bytes32 moduleHash, address program, uint256 dataFee, uint16 version)
func (_ArbWasm *ArbWasmFilterer) ParseProgramActivated(log types.Log) (*ArbWasmProgramActivated, error) {
	event := new(ArbWasmProgramActivated)
	if err := _ArbWasm.contract.UnpackLog(event, "ProgramActivated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ArbWasmProgramLifetimeExtendedIterator is returned from FilterProgramLifetimeExtended and is used to iterate over the raw logs and unpacked data for ProgramLifetimeExtended events raised by the ArbWasm contract.
type ArbWasmProgramLifetimeExtendedIterator struct {
	Event *ArbWasmProgramLifetimeExtended // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ArbWasmProgramLifetimeExtendedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ArbWasmProgramLifetimeExtended)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ArbWasmProgramLifetimeExtended)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ArbWasmProgramLifetimeExtendedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ArbWasmProgramLifetimeExtendedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ArbWasmProgramLifetimeExtended represents a ProgramLifetimeExtended event raised by the ArbWasm contract.
type ArbWasmProgramLifetimeExtended struct {
	Codehash [32]byte
	DataFee  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterProgramLifetimeExtended is a free log retrieval operation binding the contract event 0x03802ba32e3bd489d2ab04abb93d10687e0b6883bcb091206ca75172d248f2ec.
//
// Solidity: event ProgramLifetimeExtended(bytes32 indexed codehash, uint256 dataFee)
func (_ArbWasm *ArbWasmFilterer) FilterProgramLifetimeExtended(opts *bind.FilterOpts, codehash [][32]byte) (*ArbWasmProgramLifetimeExtendedIterator, error) {

	var codehashRule []interface{}
	for _, codehashItem := range codehash {
		codehashRule = append(codehashRule, codehashItem)
	}

	logs, sub, err := _ArbWasm.contract.FilterLogs(opts, "ProgramLifetimeExtended", codehashRule)
	if err != nil {
		return nil, err
	}
	return &ArbWasmProgramLifetimeExtendedIterator{contract: _ArbWasm.contract, event: "ProgramLifetimeExtended", logs: logs, sub: sub}, nil
}

// WatchProgramLifetimeExtended is a free log subscription operation binding the contract event 0x03802ba32e3bd489d2ab04abb93d10687e0b6883bcb091206ca75172d248f2ec.
//
// Solidity: event ProgramLifetimeExtended(bytes32 indexed codehash, uint256 dataFee)
func (_ArbWasm *ArbWasmFilterer) WatchProgramLifetimeExtended(opts *bind.WatchOpts, sink chan<- *ArbWasmProgramLifetimeExtended, codehash [][32]byte) (event.Subscription, error) {

	var codehashRule []interface{}
	for _, codehashItem := range codehash {
		codehashRule = append(codehashRule, codehashItem)
	}

	logs, sub, err := _ArbWasm.contract.WatchLogs(opts, "ProgramLifetimeExtended", codehashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ArbWasmProgramLifetimeExtended)
				if err := _ArbWasm.contract.UnpackLog(event, "ProgramLifetimeExtended", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseProgramLifetimeExtended is a log parse operation binding the contract event 0x03802ba32e3bd489d2ab04abb93d10687e0b6883bcb091206ca75172d248f2ec.
//
// Solidity: event ProgramLifetimeExtended(bytes32 indexed codehash, uint256 dataFee)
func (_ArbWasm *ArbWasmFilterer) ParseProgramLifetimeExtended(log types.Log) (*ArbWasmProgramLifetimeExtended, error) {
	event := new(ArbWasmProgramLifetimeExtended)
	if err := _ArbWasm.contract.UnpackLog(event, "ProgramLifetimeExtended", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ArbWasmCacheMetaData contains all meta data concerning the ArbWasmCache contract.
var ArbWasmCacheMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"allCacheManagers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"managers\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"codehash\",\"type\":\"bytes32\"}],\"name\":\"cacheCodehash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"cacheProgram\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"codehash\",\"type\":\"bytes32\"}],\"name\":\"codehashIsCached\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"codehash\",\"type\":\"bytes32\"}],\"name\":\"evictCodehash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"isCacheManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"codehash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"cached\",\"type\":\"bool\"}],\"name\":\"UpdateProgramCache\",\"type\":\"event\"}]",
}

// ArbWasmCacheABI is the input ABI used to generate the binding from.
// Deprecated: Use ArbWasmCacheMetaData.ABI instead.
var ArbWasmCacheABI = ArbWasmCacheMetaData.ABI

// ArbWasmCache is an auto generated Go binding around an Ethereum contract.
type ArbWasmCache struct {
	ArbWasmCacheCaller     // Read-only binding to the contract
	ArbWasmCacheTransactor // Write-only binding to the contract
	ArbWasmCacheFilterer   // Log filterer for contract events
}

// ArbWasmCacheCaller is an auto generated read-only Go binding around an Ethereum contract.
type ArbWasmCacheCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ArbWasmCacheTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ArbWasmCacheTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ArbWasmCacheFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ArbWasmCacheFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ArbWasmCacheSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ArbWasmCacheSession struct {
	Contract     *ArbWasmCache     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ArbWasmCacheCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ArbWasmCacheCallerSession struct {
	Contract *ArbWasmCacheCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// ArbWasmCacheTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ArbWasmCacheTransactorSession struct {
	Contract     *ArbWasmCacheTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// ArbWasmCacheRaw is an auto generated low-level Go binding around an Ethereum contract.
type ArbWasmCacheRaw struct {
	Contract *ArbWasmCache // Generic contract binding to access the raw methods on
}

// ArbWasmCacheCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ArbWasmCacheCallerRaw struct {
	Contract *ArbWasmCacheCaller // Generic read-only contract binding to access the raw methods on
}

// ArbWasmCacheTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ArbWasmCacheTransactorRaw struct {
	Contract *ArbWasmCacheTransactor // Generic write-only contract binding to access the raw methods on
}

// NewArbWasmCache creates a new instance of ArbWasmCache, bound to a specific deployed contract.
func NewArbWasmCache(address common.Address, backend bind.ContractBackend) (*ArbWasmCache, error) {
	contract, err := bindArbWasmCache(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ArbWasmCache{ArbWasmCacheCaller: ArbWasmCacheCaller{contract: contract}, ArbWasmCacheTransactor: ArbWasmCacheTransactor{contract: contract}, ArbWasmCacheFilterer: ArbWasmCacheFilterer{contract: contract}}, nil
}

// NewArbWasmCacheCaller creates a new read-only instance of ArbWasmCache, bound to a specific deployed contract.
func NewArbWasmCacheCaller(address common.Address, caller bind.ContractCaller) (*ArbWasmCacheCaller, error) {
	contract, err := bindArbWasmCache(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ArbWasmCacheCaller{contract: contract}, nil
}

// NewArbWasmCacheTransactor creates a new write-only instance of ArbWasmCache, bound to a specific deployed contract.
func NewArbWasmCacheTransactor(address common.Address, transactor bind.ContractTransactor) (*ArbWasmCacheTransactor, error) {
	contract, err := bindArbWasmCache(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ArbWasmCacheTransactor{contract: contract}, nil
}

// NewArbWasmCacheFilterer creates a new log filterer instance of ArbWasmCache, bound to a specific deployed contract.
func NewArbWasmCacheFilterer(address common.Address, filterer bind.ContractFilterer) (*ArbWasmCacheFilterer, error) {
	contract, err := bindArbWasmCache(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ArbWasmCacheFilterer{contract: contract}, nil
}

// bindArbWasmCache binds a generic wrapper to an already deployed contract.
func bindArbWasmCache(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ArbWasmCacheMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ArbWasmCache *ArbWasmCacheRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ArbWasmCache.Contract.ArbWasmCacheCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ArbWasmCache *ArbWasmCacheRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ArbWasmCache.Contract.ArbWasmCacheTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ArbWasmCache *ArbWasmCacheRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ArbWasmCache.Contract.ArbWasmCacheTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ArbWasmCache *ArbWasmCacheCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ArbWasmCache.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ArbWasmCache *ArbWasmCacheTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ArbWasmCache.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ArbWasmCache *ArbWasmCacheTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ArbWasmCache.Contract.contract.Transact(opts, method, params...)
}

// AllCacheManagers is a free data retrieval call binding the contract method 0x0ec1d773.
//
// Solidity: function allCacheManagers() view returns(address[] managers)
func (_ArbWasmCache *ArbWasmCacheCaller) AllCacheManagers(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _ArbWasmCache.contract.Call(opts, &out, "allCacheManagers")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// AllCacheManagers is a free data retrieval call binding the contract method 0x0ec1d773.
//
// Solidity: function allCacheManagers() view returns(address[] managers)
func (_ArbWasmCache *ArbWasmCacheSession) AllCacheManagers() ([]common.Address, error) {
	return _ArbWasmCache.Contract.AllCacheManagers(&_ArbWasmCache.CallOpts)
}

// AllCacheManagers is a free data retrieval call binding the contract method 0x0ec1d773.
//
// Solidity: function allCacheManagers() view returns(address[] managers)
func (_ArbWasmCache *ArbWasmCacheCallerSession) AllCacheManagers() ([]common.Address, error) {
	return _ArbWasmCache.Contract.AllCacheManagers(&_ArbWasmCache.CallOpts)
}

// CodehashIsCached is a free data retrieval call binding the contract method 0xa72f179b.
//
// Solidity: function codehashIsCached(bytes32 codehash) view returns(bool)
func (_ArbWasmCache *ArbWasmCacheCaller) CodehashIsCached(opts *bind.CallOpts, codehash [32]byte) (bool, error) {
	var out []interface{}
	err := _ArbWasmCache.contract.Call(opts, &out, "codehashIsCached", codehash)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CodehashIsCached is a free data retrieval call binding the contract method 0xa72f179b.
//
// Solidity: function codehashIsCached(bytes32 codehash) view returns(bool)
func (_ArbWasmCache *ArbWasmCacheSession) CodehashIsCached(codehash [32]byte) (bool, error) {
	return _ArbWasmCache.Contract.CodehashIsCached(&_ArbWasmCache.CallOpts, codehash)
}

// CodehashIsCached is a free data retrieval call binding the contract method 0xa72f179b.
//
// Solidity: function codehashIsCached(bytes32 codehash) view returns(bool)
func (_ArbWasmCache *ArbWasmCacheCallerSession) CodehashIsCached(codehash [32]byte) (bool, error) {
	return _ArbWasmCache.Contract.CodehashIsCached(&_ArbWasmCache.CallOpts, codehash)
}

// IsCacheManager is a free data retrieval call binding the contract method 0x85e2de85.
//
// Solidity: function isCacheManager(address manager) view returns(bool)
func (_ArbWasmCache *ArbWasmCacheCaller) IsCacheManager(opts *bind.CallOpts, manager common.Address) (bool, error) {
	var out []interface{}
	err := _ArbWasmCache.contract.Call(opts, &out, "isCacheManager", manager)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsCacheManager is a free data retrieval call binding the contract method 0x85e2de85.
//
// Solidity: function isCacheManager(address manager) view returns(bool)
func (_ArbWasmCache *ArbWasmCacheSession) IsCacheManager(manager common.Address) (bool, error) {
	return _ArbWasmCache.Contract.IsCacheManager(&_ArbWasmCache.CallOpts, manager)
}

// IsCacheManager is a free data retrieval call binding the contract method 0x85e2de85.
//
// Solidity: function isCacheManager(address manager) view returns(bool)
func (_ArbWasmCache *ArbWasmCacheCallerSession) IsCacheManager(manager common.Address) (bool, error) {
	return _ArbWasmCache.Contract.IsCacheManager(&_ArbWasmCache.CallOpts, manager)
}

// CacheCodehash is a paid mutator transaction binding the contract method 0x4ceac817.
//
// Solidity: function cacheCodehash(bytes32 codehash) returns()
func (_ArbWasmCache *ArbWasmCacheTransactor) CacheCodehash(opts *bind.TransactOpts, codehash [32]byte) (*types.Transaction, error) {
	return _ArbWasmCache.contract.Transact(opts, "cacheCodehash", codehash)
}

// CacheCodehash is a paid mutator transaction binding the contract method 0x4ceac817.
//
// Solidity: function cacheCodehash(bytes32 codehash) returns()
func (_ArbWasmCache *ArbWasmCacheSession) CacheCodehash(codehash [32]byte) (*types.Transaction, error) {
	return _ArbWasmCache.Contract.CacheCodehash(&_ArbWasmCache.TransactOpts, codehash)
}

// CacheCodehash is a paid mutator transaction binding the contract method 0x4ceac817.
//
// Solidity: function cacheCodehash(bytes32 codehash) returns()
func (_ArbWasmCache *ArbWasmCacheTransactorSession) CacheCodehash(codehash [32]byte) (*types.Transaction, error) {
	return _ArbWasmCache.Contract.CacheCodehash(&_ArbWasmCache.TransactOpts, codehash)
}

// CacheProgram is a paid mutator transaction binding the contract method 0xe73ac9f2.
//
// Solidity: function cacheProgram(address addr) returns()
func (_ArbWasmCache *ArbWasmCacheTransactor) CacheProgram(opts *bind.TransactOpts, addr common.Address) (*types.Transaction, error) {
	return _ArbWasmCache.contract.Transact(opts, "cacheProgram", addr)
}

// CacheProgram is a paid mutator transaction binding the contract method 0xe73ac9f2.
//
// Solidity: function cacheProgram(address addr) returns()
func (_ArbWasmCache *ArbWasmCacheSession) CacheProgram(addr common.Address) (*types.Transaction, error) {
	return _ArbWasmCache.Contract.CacheProgram(&_ArbWasmCache.TransactOpts, addr)
}

// CacheProgram is a paid mutator transaction binding the contract method 0xe73ac9f2.
//
// Solidity: function cacheProgram(address addr) returns()
func (_ArbWasmCache *ArbWasmCacheTransactorSession) CacheProgram(addr common.Address) (*types.Transaction, error) {
	return _ArbWasmCache.Contract.CacheProgram(&_ArbWasmCache.TransactOpts, addr)
}

// EvictCodehash is a paid mutator transaction binding the contract method 0xce972013.
//
// Solidity: function evictCodehash(bytes32 codehash) returns()
func (_ArbWasmCache *ArbWasmCacheTransactor) EvictCodehash(opts *bind.TransactOpts, codehash [32]byte) (*types.Transaction, error) {
	return _ArbWasmCache.contract.Transact(opts, "evictCodehash", codehash)
}

// EvictCodehash is a paid mutator transaction binding the contract method 0xce972013.
//
// Solidity: function evictCodehash(bytes32 codehash) returns()
func (_ArbWasmCache *ArbWasmCacheSession) EvictCodehash(codehash [32]byte) (*types.Transaction, error) {
	return _ArbWasmCache.Contract.EvictCodehash(&_ArbWasmCache.TransactOpts, codehash)
}

// EvictCodehash is a paid mutator transaction binding the contract method 0xce972013.
//
// Solidity: function evictCodehash(bytes32 codehash) returns()
func (_ArbWasmCache *ArbWasmCacheTransactorSession) EvictCodehash(codehash [32]byte) (*types.Transaction, error) {
	return _ArbWasmCache.Contract.EvictCodehash(&_ArbWasmCache.TransactOpts, codehash)
}

// ArbWasmCacheUpdateProgramCacheIterator is returned from FilterUpdateProgramCache and is used to iterate over the raw logs and unpacked data for UpdateProgramCache events raised by the ArbWasmCache contract.
type ArbWasmCacheUpdateProgramCacheIterator struct {
	Event *ArbWasmCacheUpdateProgramCache // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ArbWasmCacheUpdateProgramCacheIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ArbWasmCacheUpdateProgramCache)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ArbWasmCacheUpdateProgramCache)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ArbWasmCacheUpdateProgramCacheIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ArbWasmCacheUpdateProgramCacheIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ArbWasmCacheUpdateProgramCache represents a UpdateProgramCache event raised by the ArbWasmCache contract.
type ArbWasmCacheUpdateProgramCache struct {
	Manager  common.Address
	Codehash [32]byte
	Cached   bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterUpdateProgramCache is a free log retrieval operation binding the contract event 0x1bfaa29b4618e78f5b398027d530826dbb266dc976a5067f67fdad15434ecfab.
//
// Solidity: event UpdateProgramCache(address indexed manager, bytes32 indexed codehash, bool cached)
func (_ArbWasmCache *ArbWasmCacheFilterer) FilterUpdateProgramCache(opts *bind.FilterOpts, manager []common.Address, codehash [][32]byte) (*ArbWasmCacheUpdateProgramCacheIterator, error) {

	var managerRule []interface{}
	for _, managerItem := range manager {
		managerRule = append(managerRule, managerItem)
	}
	var codehashRule []interface{}
	for _, codehashItem := range codehash {
		codehashRule = append(codehashRule, codehashItem)
	}

	logs, sub, err := _ArbWasmCache.contract.FilterLogs(opts, "UpdateProgramCache", managerRule, codehashRule)
	if err != nil {
		return nil, err
	}
	return &ArbWasmCacheUpdateProgramCacheIterator{contract: _ArbWasmCache.contract, event: "UpdateProgramCache", logs: logs, sub: sub}, nil
}

// WatchUpdateProgramCache is a free log subscription operation binding the contract event 0x1bfaa29b4618e78f5b398027d530826dbb266dc976a5067f67fdad15434ecfab.
//
// Solidity: event UpdateProgramCache(address indexed manager, bytes32 indexed codehash, bool cached)
func (_ArbWasmCache *ArbWasmCacheFilterer) WatchUpdateProgramCache(opts *bind.WatchOpts, sink chan<- *ArbWasmCacheUpdateProgramCache, manager []common.Address, codehash [][32]byte) (event.Subscription, error) {

	var managerRule []interface{}
	for _, managerItem := range manager {
		managerRule = append(managerRule, managerItem)
	}
	var codehashRule []interface{}
	for _, codehashItem := range codehash {
		codehashRule = append(codehashRule, codehashItem)
	}

	logs, sub, err := _ArbWasmCache.contract.WatchLogs(opts, "UpdateProgramCache", managerRule, codehashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ArbWasmCacheUpdateProgramCache)
				if err := _ArbWasmCache.contract.UnpackLog(event, "UpdateProgramCache", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateProgramCache is a log parse operation binding the contract event 0x1bfaa29b4618e78f5b398027d530826dbb266dc976a5067f67fdad15434ecfab.
//
// Solidity: event UpdateProgramCache(address indexed manager, bytes32 indexed codehash, bool cached)
func (_ArbWasmCache *ArbWasmCacheFilterer) ParseUpdateProgramCache(log types.Log) (*ArbWasmCacheUpdateProgramCache, error) {
	event := new(ArbWasmCacheUpdateProgramCache)
	if err := _ArbWasmCache.contract.UnpackLog(event, "UpdateProgramCache", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ArbosActsMetaData contains all meta data concerning the ArbosActs contract.
var ArbosActsMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"batchTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"batchPosterAddress\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"batchNumber\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"batchDataGas\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"l1BaseFeeWei\",\"type\":\"uint256\"}],\"name\":\"batchPostingReport\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"l1BaseFee\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"l1BlockNumber\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"l2BlockNumber\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"timePassed\",\"type\":\"uint64\"}],\"name\":\"startBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CallerNotArbOS\",\"type\":\"error\"}]",
}

// ArbosActsABI is the input ABI used to generate the binding from.
// Deprecated: Use ArbosActsMetaData.ABI instead.
var ArbosActsABI = ArbosActsMetaData.ABI

// ArbosActs is an auto generated Go binding around an Ethereum contract.
type ArbosActs struct {
	ArbosActsCaller     // Read-only binding to the contract
	ArbosActsTransactor // Write-only binding to the contract
	ArbosActsFilterer   // Log filterer for contract events
}

// ArbosActsCaller is an auto generated read-only Go binding around an Ethereum contract.
type ArbosActsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ArbosActsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ArbosActsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ArbosActsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ArbosActsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ArbosActsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ArbosActsSession struct {
	Contract     *ArbosActs        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ArbosActsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ArbosActsCallerSession struct {
	Contract *ArbosActsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// ArbosActsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ArbosActsTransactorSession struct {
	Contract     *ArbosActsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// ArbosActsRaw is an auto generated low-level Go binding around an Ethereum contract.
type ArbosActsRaw struct {
	Contract *ArbosActs // Generic contract binding to access the raw methods on
}

// ArbosActsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ArbosActsCallerRaw struct {
	Contract *ArbosActsCaller // Generic read-only contract binding to access the raw methods on
}

// ArbosActsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ArbosActsTransactorRaw struct {
	Contract *ArbosActsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewArbosActs creates a new instance of ArbosActs, bound to a specific deployed contract.
func NewArbosActs(address common.Address, backend bind.ContractBackend) (*ArbosActs, error) {
	contract, err := bindArbosActs(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ArbosActs{ArbosActsCaller: ArbosActsCaller{contract: contract}, ArbosActsTransactor: ArbosActsTransactor{contract: contract}, ArbosActsFilterer: ArbosActsFilterer{contract: contract}}, nil
}

// NewArbosActsCaller creates a new read-only instance of ArbosActs, bound to a specific deployed contract.
func NewArbosActsCaller(address common.Address, caller bind.ContractCaller) (*ArbosActsCaller, error) {
	contract, err := bindArbosActs(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ArbosActsCaller{contract: contract}, nil
}

// NewArbosActsTransactor creates a new write-only instance of ArbosActs, bound to a specific deployed contract.
func NewArbosActsTransactor(address common.Address, transactor bind.ContractTransactor) (*ArbosActsTransactor, error) {
	contract, err := bindArbosActs(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ArbosActsTransactor{contract: contract}, nil
}

// NewArbosActsFilterer creates a new log filterer instance of ArbosActs, bound to a specific deployed contract.
func NewArbosActsFilterer(address common.Address, filterer bind.ContractFilterer) (*ArbosActsFilterer, error) {
	contract, err := bindArbosActs(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ArbosActsFilterer{contract: contract}, nil
}

// bindArbosActs binds a generic wrapper to an already deployed contract.
func bindArbosActs(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ArbosActsMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ArbosActs *ArbosActsRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ArbosActs.Contract.ArbosActsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ArbosActs *ArbosActsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ArbosActs.Contract.ArbosActsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ArbosActs *ArbosActsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ArbosActs.Contract.ArbosActsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ArbosActs *ArbosActsCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ArbosActs.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ArbosActs *ArbosActsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ArbosActs.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ArbosActs *ArbosActsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ArbosActs.Contract.contract.Transact(opts, method, params...)
}

// BatchPostingReport is a paid mutator transaction binding the contract method 0xb6693771.
//
// Solidity: function batchPostingReport(uint256 batchTimestamp, address batchPosterAddress, uint64 batchNumber, uint64 batchDataGas, uint256 l1BaseFeeWei) returns()
func (_ArbosActs *ArbosActsTransactor) BatchPostingReport(opts *bind.TransactOpts, batchTimestamp *big.Int, batchPosterAddress common.Address, batchNumber uint64, batchDataGas uint64, l1BaseFeeWei *big.Int) (*types.Transaction, error) {
	return _ArbosActs.contract.Transact(opts, "batchPostingReport", batchTimestamp, batchPosterAddress, batchNumber, batchDataGas, l1BaseFeeWei)
}

// BatchPostingReport is a paid mutator transaction binding the contract method 0xb6693771.
//
// Solidity: function batchPostingReport(uint256 batchTimestamp, address batchPosterAddress, uint64 batchNumber, uint64 batchDataGas, uint256 l1BaseFeeWei) returns()
func (_ArbosActs *ArbosActsSession) BatchPostingReport(batchTimestamp *big.Int, batchPosterAddress common.Address, batchNumber uint64, batchDataGas uint64, l1BaseFeeWei *big.Int) (*types.Transaction, error) {
	return _ArbosActs.Contract.BatchPostingReport(&_ArbosActs.TransactOpts, batchTimestamp, batchPosterAddress, batchNumber, batchDataGas, l1BaseFeeWei)
}

// BatchPostingReport is a paid mutator transaction binding the contract method 0xb6693771.
//
// Solidity: function batchPostingReport(uint256 batchTimestamp, address batchPosterAddress, uint64 batchNumber, uint64 batchDataGas, uint256 l1BaseFeeWei) returns()
func (_ArbosActs *ArbosActsTransactorSession) BatchPostingReport(batchTimestamp *big.Int, batchPosterAddress common.Address, batchNumber uint64, batchDataGas uint64, l1BaseFeeWei *big.Int) (*types.Transaction, error) {
	return _ArbosActs.Contract.BatchPostingReport(&_ArbosActs.TransactOpts, batchTimestamp, batchPosterAddress, batchNumber, batchDataGas, l1BaseFeeWei)
}

// StartBlock is a paid mutator transaction binding the contract method 0x6bf6a42d.
//
// Solidity: function startBlock(uint256 l1BaseFee, uint64 l1BlockNumber, uint64 l2BlockNumber, uint64 timePassed) returns()
func (_ArbosActs *ArbosActsTransactor) StartBlock(opts *bind.TransactOpts, l1BaseFee *big.Int, l1BlockNumber uint64, l2BlockNumber uint64, timePassed uint64) (*types.Transaction, error) {
	return _ArbosActs.contract.Transact(opts, "startBlock", l1BaseFee, l1BlockNumber, l2BlockNumber, timePassed)
}

// StartBlock is a paid mutator transaction binding the contract method 0x6bf6a42d.
//
// Solidity: function startBlock(uint256 l1BaseFee, uint64 l1BlockNumber, uint64 l2BlockNumber, uint64 timePassed) returns()
func (_ArbosActs *ArbosActsSession) StartBlock(l1BaseFee *big.Int, l1BlockNumber uint64, l2BlockNumber uint64, timePassed uint64) (*types.Transaction, error) {
	return _ArbosActs.Contract.StartBlock(&_ArbosActs.TransactOpts, l1BaseFee, l1BlockNumber, l2BlockNumber, timePassed)
}

// StartBlock is a paid mutator transaction binding the contract method 0x6bf6a42d.
//
// Solidity: function startBlock(uint256 l1BaseFee, uint64 l1BlockNumber, uint64 l2BlockNumber, uint64 timePassed) returns()
func (_ArbosActs *ArbosActsTransactorSession) StartBlock(l1BaseFee *big.Int, l1BlockNumber uint64, l2BlockNumber uint64, timePassed uint64) (*types.Transaction, error) {
	return _ArbosActs.Contract.StartBlock(&_ArbosActs.TransactOpts, l1BaseFee, l1BlockNumber, l2BlockNumber, timePassed)
}

// ArbosTestMetaData contains all meta data concerning the ArbosTest contract.
var ArbosTestMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gasAmount\",\"type\":\"uint256\"}],\"name\":\"burnArbGas\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"}]",
}

// ArbosTestABI is the input ABI used to generate the binding from.
// Deprecated: Use ArbosTestMetaData.ABI instead.
var ArbosTestABI = ArbosTestMetaData.ABI

// ArbosTest is an auto generated Go binding around an Ethereum contract.
type ArbosTest struct {
	ArbosTestCaller     // Read-only binding to the contract
	ArbosTestTransactor // Write-only binding to the contract
	ArbosTestFilterer   // Log filterer for contract events
}

// ArbosTestCaller is an auto generated read-only Go binding around an Ethereum contract.
type ArbosTestCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ArbosTestTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ArbosTestTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ArbosTestFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ArbosTestFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ArbosTestSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ArbosTestSession struct {
	Contract     *ArbosTest        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ArbosTestCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ArbosTestCallerSession struct {
	Contract *ArbosTestCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// ArbosTestTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ArbosTestTransactorSession struct {
	Contract     *ArbosTestTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// ArbosTestRaw is an auto generated low-level Go binding around an Ethereum contract.
type ArbosTestRaw struct {
	Contract *ArbosTest // Generic contract binding to access the raw methods on
}

// ArbosTestCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ArbosTestCallerRaw struct {
	Contract *ArbosTestCaller // Generic read-only contract binding to access the raw methods on
}

// ArbosTestTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ArbosTestTransactorRaw struct {
	Contract *ArbosTestTransactor // Generic write-only contract binding to access the raw methods on
}

// NewArbosTest creates a new instance of ArbosTest, bound to a specific deployed contract.
func NewArbosTest(address common.Address, backend bind.ContractBackend) (*ArbosTest, error) {
	contract, err := bindArbosTest(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ArbosTest{ArbosTestCaller: ArbosTestCaller{contract: contract}, ArbosTestTransactor: ArbosTestTransactor{contract: contract}, ArbosTestFilterer: ArbosTestFilterer{contract: contract}}, nil
}

// NewArbosTestCaller creates a new read-only instance of ArbosTest, bound to a specific deployed contract.
func NewArbosTestCaller(address common.Address, caller bind.ContractCaller) (*ArbosTestCaller, error) {
	contract, err := bindArbosTest(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ArbosTestCaller{contract: contract}, nil
}

// NewArbosTestTransactor creates a new write-only instance of ArbosTest, bound to a specific deployed contract.
func NewArbosTestTransactor(address common.Address, transactor bind.ContractTransactor) (*ArbosTestTransactor, error) {
	contract, err := bindArbosTest(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ArbosTestTransactor{contract: contract}, nil
}

// NewArbosTestFilterer creates a new log filterer instance of ArbosTest, bound to a specific deployed contract.
func NewArbosTestFilterer(address common.Address, filterer bind.ContractFilterer) (*ArbosTestFilterer, error) {
	contract, err := bindArbosTest(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ArbosTestFilterer{contract: contract}, nil
}

// bindArbosTest binds a generic wrapper to an already deployed contract.
func bindArbosTest(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ArbosTestMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ArbosTest *ArbosTestRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ArbosTest.Contract.ArbosTestCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ArbosTest *ArbosTestRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ArbosTest.Contract.ArbosTestTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ArbosTest *ArbosTestRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ArbosTest.Contract.ArbosTestTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ArbosTest *ArbosTestCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ArbosTest.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ArbosTest *ArbosTestTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ArbosTest.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ArbosTest *ArbosTestTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ArbosTest.Contract.contract.Transact(opts, method, params...)
}

// BurnArbGas is a free data retrieval call binding the contract method 0xbb3480f9.
//
// Solidity: function burnArbGas(uint256 gasAmount) pure returns()
func (_ArbosTest *ArbosTestCaller) BurnArbGas(opts *bind.CallOpts, gasAmount *big.Int) error {
	var out []interface{}
	err := _ArbosTest.contract.Call(opts, &out, "burnArbGas", gasAmount)

	if err != nil {
		return err
	}

	return err

}

// BurnArbGas is a free data retrieval call binding the contract method 0xbb3480f9.
//
// Solidity: function burnArbGas(uint256 gasAmount) pure returns()
func (_ArbosTest *ArbosTestSession) BurnArbGas(gasAmount *big.Int) error {
	return _ArbosTest.Contract.BurnArbGas(&_ArbosTest.CallOpts, gasAmount)
}

// BurnArbGas is a free data retrieval call binding the contract method 0xbb3480f9.
//
// Solidity: function burnArbGas(uint256 gasAmount) pure returns()
func (_ArbosTest *ArbosTestCallerSession) BurnArbGas(gasAmount *big.Int) error {
	return _ArbosTest.Contract.BurnArbGas(&_ArbosTest.CallOpts, gasAmount)
}

// BenchmarksMetaData contains all meta data concerning the Benchmarks contract.
var BenchmarksMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"fillBlockAdd\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fillBlockHash\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fillBlockMulMod\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fillBlockQuickStep\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fillBlockRecover\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50610321806100206000396000f3fe60806040526004361061005a5760003560e01c80636488e930116100435780636488e93014610071578063ea01a66f14610079578063fb721c181461008157600080fd5b80630b39d8e51461005f578063142ddcf914610069575b600080fd5b610067610089565b005b6100676101ff565b610067610229565b610067610296565b6100676102a0565b7feddecf107b5740cef7f5a01e3ea7e287665c4e75a8eb6afae2fda2e3d436778673361594f5429d23ece0a88e4fbe529e1c49d524d8601b7fc6178c2de1078cd36c3bd302cde755340d7f17fcb3fcc0b9c333ba03b217029f7f5fdbcefe2675e96219cdae57a7894280bf80fd40d44ce146a35e169ea6a78fd35b60408051600081526020810180835287905260ff851691810191909152606081018390526080810182905273ffffffffffffffffffffffffffffffffffffffff85169060019060a0016020604051602081039080840390855afa15801561016f573d6000803e3d6000fd5b5050506020604051035173ffffffffffffffffffffffffffffffffffffffff16146101fa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f57524f4e475f415242494e415554000000000000000000000000000000000000604482015260640160405180910390fd5b610104565b60005b7feddecf107b5740cef7f5a01e3ea7e287665c4e75a8eb6afae2fda2e3d436778601610202565b7feddecf107b5740cef7f5a01e3ea7e287665c4e75a8eb6afae2fda2e3d43677865b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f7fc6178c2de1078cd36c3bd302cde755340d7f17fcb3fcc0b9c333ba03b217029f8209905061024b565b60005b5034610299565b7feddecf107b5740cef7f5a01e3ea7e287665c4e75a8eb6afae2fda2e3d43677865b6040805160208101839052016040516020818303038152906040528051906020012090506102c256fea2646970667358221220d26cc9fb80b03f59ce43ad719377748504aacf3dc0b746dedf39fb84fa02c3e764736f6c63430008110033",
}

// BenchmarksABI is the input ABI used to generate the binding from.
// Deprecated: Use BenchmarksMetaData.ABI instead.
var BenchmarksABI = BenchmarksMetaData.ABI

// BenchmarksBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BenchmarksMetaData.Bin instead.
var BenchmarksBin = BenchmarksMetaData.Bin

// DeployBenchmarks deploys a new Ethereum contract, binding an instance of Benchmarks to it.
func DeployBenchmarks(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Benchmarks, error) {
	parsed, err := BenchmarksMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BenchmarksBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Benchmarks{BenchmarksCaller: BenchmarksCaller{contract: contract}, BenchmarksTransactor: BenchmarksTransactor{contract: contract}, BenchmarksFilterer: BenchmarksFilterer{contract: contract}}, nil
}

// Benchmarks is an auto generated Go binding around an Ethereum contract.
type Benchmarks struct {
	BenchmarksCaller     // Read-only binding to the contract
	BenchmarksTransactor // Write-only binding to the contract
	BenchmarksFilterer   // Log filterer for contract events
}

// BenchmarksCaller is an auto generated read-only Go binding around an Ethereum contract.
type BenchmarksCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BenchmarksTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BenchmarksTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BenchmarksFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BenchmarksFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BenchmarksSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BenchmarksSession struct {
	Contract     *Benchmarks       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BenchmarksCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BenchmarksCallerSession struct {
	Contract *BenchmarksCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// BenchmarksTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BenchmarksTransactorSession struct {
	Contract     *BenchmarksTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// BenchmarksRaw is an auto generated low-level Go binding around an Ethereum contract.
type BenchmarksRaw struct {
	Contract *Benchmarks // Generic contract binding to access the raw methods on
}

// BenchmarksCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BenchmarksCallerRaw struct {
	Contract *BenchmarksCaller // Generic read-only contract binding to access the raw methods on
}

// BenchmarksTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BenchmarksTransactorRaw struct {
	Contract *BenchmarksTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBenchmarks creates a new instance of Benchmarks, bound to a specific deployed contract.
func NewBenchmarks(address common.Address, backend bind.ContractBackend) (*Benchmarks, error) {
	contract, err := bindBenchmarks(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Benchmarks{BenchmarksCaller: BenchmarksCaller{contract: contract}, BenchmarksTransactor: BenchmarksTransactor{contract: contract}, BenchmarksFilterer: BenchmarksFilterer{contract: contract}}, nil
}

// NewBenchmarksCaller creates a new read-only instance of Benchmarks, bound to a specific deployed contract.
func NewBenchmarksCaller(address common.Address, caller bind.ContractCaller) (*BenchmarksCaller, error) {
	contract, err := bindBenchmarks(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BenchmarksCaller{contract: contract}, nil
}

// NewBenchmarksTransactor creates a new write-only instance of Benchmarks, bound to a specific deployed contract.
func NewBenchmarksTransactor(address common.Address, transactor bind.ContractTransactor) (*BenchmarksTransactor, error) {
	contract, err := bindBenchmarks(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BenchmarksTransactor{contract: contract}, nil
}

// NewBenchmarksFilterer creates a new log filterer instance of Benchmarks, bound to a specific deployed contract.
func NewBenchmarksFilterer(address common.Address, filterer bind.ContractFilterer) (*BenchmarksFilterer, error) {
	contract, err := bindBenchmarks(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BenchmarksFilterer{contract: contract}, nil
}

// bindBenchmarks binds a generic wrapper to an already deployed contract.
func bindBenchmarks(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := BenchmarksMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Benchmarks *BenchmarksRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Benchmarks.Contract.BenchmarksCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Benchmarks *BenchmarksRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Benchmarks.Contract.BenchmarksTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Benchmarks *BenchmarksRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Benchmarks.Contract.BenchmarksTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Benchmarks *BenchmarksCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Benchmarks.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Benchmarks *BenchmarksTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Benchmarks.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Benchmarks *BenchmarksTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Benchmarks.Contract.contract.Transact(opts, method, params...)
}

// FillBlockAdd is a paid mutator transaction binding the contract method 0x142ddcf9.
//
// Solidity: function fillBlockAdd() payable returns()
func (_Benchmarks *BenchmarksTransactor) FillBlockAdd(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Benchmarks.contract.Transact(opts, "fillBlockAdd")
}

// FillBlockAdd is a paid mutator transaction binding the contract method 0x142ddcf9.
//
// Solidity: function fillBlockAdd() payable returns()
func (_Benchmarks *BenchmarksSession) FillBlockAdd() (*types.Transaction, error) {
	return _Benchmarks.Contract.FillBlockAdd(&_Benchmarks.TransactOpts)
}

// FillBlockAdd is a paid mutator transaction binding the contract method 0x142ddcf9.
//
// Solidity: function fillBlockAdd() payable returns()
func (_Benchmarks *BenchmarksTransactorSession) FillBlockAdd() (*types.Transaction, error) {
	return _Benchmarks.Contract.FillBlockAdd(&_Benchmarks.TransactOpts)
}

// FillBlockHash is a paid mutator transaction binding the contract method 0xfb721c18.
//
// Solidity: function fillBlockHash() payable returns()
func (_Benchmarks *BenchmarksTransactor) FillBlockHash(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Benchmarks.contract.Transact(opts, "fillBlockHash")
}

// FillBlockHash is a paid mutator transaction binding the contract method 0xfb721c18.
//
// Solidity: function fillBlockHash() payable returns()
func (_Benchmarks *BenchmarksSession) FillBlockHash() (*types.Transaction, error) {
	return _Benchmarks.Contract.FillBlockHash(&_Benchmarks.TransactOpts)
}

// FillBlockHash is a paid mutator transaction binding the contract method 0xfb721c18.
//
// Solidity: function fillBlockHash() payable returns()
func (_Benchmarks *BenchmarksTransactorSession) FillBlockHash() (*types.Transaction, error) {
	return _Benchmarks.Contract.FillBlockHash(&_Benchmarks.TransactOpts)
}

// FillBlockMulMod is a paid mutator transaction binding the contract method 0x6488e930.
//
// Solidity: function fillBlockMulMod() payable returns()
func (_Benchmarks *BenchmarksTransactor) FillBlockMulMod(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Benchmarks.contract.Transact(opts, "fillBlockMulMod")
}

// FillBlockMulMod is a paid mutator transaction binding the contract method 0x6488e930.
//
// Solidity: function fillBlockMulMod() payable returns()
func (_Benchmarks *BenchmarksSession) FillBlockMulMod() (*types.Transaction, error) {
	return _Benchmarks.Contract.FillBlockMulMod(&_Benchmarks.TransactOpts)
}

// FillBlockMulMod is a paid mutator transaction binding the contract method 0x6488e930.
//
// Solidity: function fillBlockMulMod() payable returns()
func (_Benchmarks *BenchmarksTransactorSession) FillBlockMulMod() (*types.Transaction, error) {
	return _Benchmarks.Contract.FillBlockMulMod(&_Benchmarks.TransactOpts)
}

// FillBlockQuickStep is a paid mutator transaction binding the contract method 0xea01a66f.
//
// Solidity: function fillBlockQuickStep() payable returns()
func (_Benchmarks *BenchmarksTransactor) FillBlockQuickStep(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Benchmarks.contract.Transact(opts, "fillBlockQuickStep")
}

// FillBlockQuickStep is a paid mutator transaction binding the contract method 0xea01a66f.
//
// Solidity: function fillBlockQuickStep() payable returns()
func (_Benchmarks *BenchmarksSession) FillBlockQuickStep() (*types.Transaction, error) {
	return _Benchmarks.Contract.FillBlockQuickStep(&_Benchmarks.TransactOpts)
}

// FillBlockQuickStep is a paid mutator transaction binding the contract method 0xea01a66f.
//
// Solidity: function fillBlockQuickStep() payable returns()
func (_Benchmarks *BenchmarksTransactorSession) FillBlockQuickStep() (*types.Transaction, error) {
	return _Benchmarks.Contract.FillBlockQuickStep(&_Benchmarks.TransactOpts)
}

// FillBlockRecover is a paid mutator transaction binding the contract method 0x0b39d8e5.
//
// Solidity: function fillBlockRecover() payable returns()
func (_Benchmarks *BenchmarksTransactor) FillBlockRecover(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Benchmarks.contract.Transact(opts, "fillBlockRecover")
}

// FillBlockRecover is a paid mutator transaction binding the contract method 0x0b39d8e5.
//
// Solidity: function fillBlockRecover() payable returns()
func (_Benchmarks *BenchmarksSession) FillBlockRecover() (*types.Transaction, error) {
	return _Benchmarks.Contract.FillBlockRecover(&_Benchmarks.TransactOpts)
}

// FillBlockRecover is a paid mutator transaction binding the contract method 0x0b39d8e5.
//
// Solidity: function fillBlockRecover() payable returns()
func (_Benchmarks *BenchmarksTransactorSession) FillBlockRecover() (*types.Transaction, error) {
	return _Benchmarks.Contract.FillBlockRecover(&_Benchmarks.TransactOpts)
}

// BigMapMetaData contains all meta data concerning the BigMap contract.
var BigMapMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"clear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"add\",\"type\":\"uint256\"}],\"name\":\"clearAndAddValues\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"data\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b506101e9806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063a2fe30ff1461003b578063f0ba844014610050575b600080fd5b61004e6100493660046100f8565b610082565b005b61007061005e36600461011a565b60006020819052908152604090205481565b60405190815260200160405180910390f35b6001545b816001546100949190610162565b8110156100c157600081815260208190526040902062845fed9055806100b98161017b565b915050610086565b600181905560005b838110156100f257600081815260208190526040812055806100ea8161017b565b9150506100c9565b50505050565b6000806040838503121561010b57600080fd5b50508035926020909101359150565b60006020828403121561012c57600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8082018082111561017557610175610133565b92915050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036101ac576101ac610133565b506001019056fea264697066735822122065db5a11e2c05b881765fe16cbc41c23e4f0b51867adb1e3d9dbf14feaaec02664736f6c63430008110033",
}

// BigMapABI is the input ABI used to generate the binding from.
// Deprecated: Use BigMapMetaData.ABI instead.
var BigMapABI = BigMapMetaData.ABI

// BigMapBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BigMapMetaData.Bin instead.
var BigMapBin = BigMapMetaData.Bin

// DeployBigMap deploys a new Ethereum contract, binding an instance of BigMap to it.
func DeployBigMap(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *BigMap, error) {
	parsed, err := BigMapMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BigMapBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BigMap{BigMapCaller: BigMapCaller{contract: contract}, BigMapTransactor: BigMapTransactor{contract: contract}, BigMapFilterer: BigMapFilterer{contract: contract}}, nil
}

// BigMap is an auto generated Go binding around an Ethereum contract.
type BigMap struct {
	BigMapCaller     // Read-only binding to the contract
	BigMapTransactor // Write-only binding to the contract
	BigMapFilterer   // Log filterer for contract events
}

// BigMapCaller is an auto generated read-only Go binding around an Ethereum contract.
type BigMapCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BigMapTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BigMapTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BigMapFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BigMapFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BigMapSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BigMapSession struct {
	Contract     *BigMap           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BigMapCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BigMapCallerSession struct {
	Contract *BigMapCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// BigMapTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BigMapTransactorSession struct {
	Contract     *BigMapTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BigMapRaw is an auto generated low-level Go binding around an Ethereum contract.
type BigMapRaw struct {
	Contract *BigMap // Generic contract binding to access the raw methods on
}

// BigMapCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BigMapCallerRaw struct {
	Contract *BigMapCaller // Generic read-only contract binding to access the raw methods on
}

// BigMapTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BigMapTransactorRaw struct {
	Contract *BigMapTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBigMap creates a new instance of BigMap, bound to a specific deployed contract.
func NewBigMap(address common.Address, backend bind.ContractBackend) (*BigMap, error) {
	contract, err := bindBigMap(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BigMap{BigMapCaller: BigMapCaller{contract: contract}, BigMapTransactor: BigMapTransactor{contract: contract}, BigMapFilterer: BigMapFilterer{contract: contract}}, nil
}

// NewBigMapCaller creates a new read-only instance of BigMap, bound to a specific deployed contract.
func NewBigMapCaller(address common.Address, caller bind.ContractCaller) (*BigMapCaller, error) {
	contract, err := bindBigMap(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BigMapCaller{contract: contract}, nil
}

// NewBigMapTransactor creates a new write-only instance of BigMap, bound to a specific deployed contract.
func NewBigMapTransactor(address common.Address, transactor bind.ContractTransactor) (*BigMapTransactor, error) {
	contract, err := bindBigMap(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BigMapTransactor{contract: contract}, nil
}

// NewBigMapFilterer creates a new log filterer instance of BigMap, bound to a specific deployed contract.
func NewBigMapFilterer(address common.Address, filterer bind.ContractFilterer) (*BigMapFilterer, error) {
	contract, err := bindBigMap(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BigMapFilterer{contract: contract}, nil
}

// bindBigMap binds a generic wrapper to an already deployed contract.
func bindBigMap(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := BigMapMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BigMap *BigMapRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BigMap.Contract.BigMapCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BigMap *BigMapRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BigMap.Contract.BigMapTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BigMap *BigMapRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BigMap.Contract.BigMapTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BigMap *BigMapCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BigMap.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BigMap *BigMapTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BigMap.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BigMap *BigMapTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BigMap.Contract.contract.Transact(opts, method, params...)
}

// Data is a free data retrieval call binding the contract method 0xf0ba8440.
//
// Solidity: function data(uint256 ) view returns(uint256)
func (_BigMap *BigMapCaller) Data(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _BigMap.contract.Call(opts, &out, "data", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Data is a free data retrieval call binding the contract method 0xf0ba8440.
//
// Solidity: function data(uint256 ) view returns(uint256)
func (_BigMap *BigMapSession) Data(arg0 *big.Int) (*big.Int, error) {
	return _BigMap.Contract.Data(&_BigMap.CallOpts, arg0)
}

// Data is a free data retrieval call binding the contract method 0xf0ba8440.
//
// Solidity: function data(uint256 ) view returns(uint256)
func (_BigMap *BigMapCallerSession) Data(arg0 *big.Int) (*big.Int, error) {
	return _BigMap.Contract.Data(&_BigMap.CallOpts, arg0)
}

// ClearAndAddValues is a paid mutator transaction binding the contract method 0xa2fe30ff.
//
// Solidity: function clearAndAddValues(uint256 clear, uint256 add) returns()
func (_BigMap *BigMapTransactor) ClearAndAddValues(opts *bind.TransactOpts, clear *big.Int, add *big.Int) (*types.Transaction, error) {
	return _BigMap.contract.Transact(opts, "clearAndAddValues", clear, add)
}

// ClearAndAddValues is a paid mutator transaction binding the contract method 0xa2fe30ff.
//
// Solidity: function clearAndAddValues(uint256 clear, uint256 add) returns()
func (_BigMap *BigMapSession) ClearAndAddValues(clear *big.Int, add *big.Int) (*types.Transaction, error) {
	return _BigMap.Contract.ClearAndAddValues(&_BigMap.TransactOpts, clear, add)
}

// ClearAndAddValues is a paid mutator transaction binding the contract method 0xa2fe30ff.
//
// Solidity: function clearAndAddValues(uint256 clear, uint256 add) returns()
func (_BigMap *BigMapTransactorSession) ClearAndAddValues(clear *big.Int, add *big.Int) (*types.Transaction, error) {
	return _BigMap.Contract.ClearAndAddValues(&_BigMap.TransactOpts, clear, add)
}

// ContextMetaData contains all meta data concerning the Context contract.
var ContextMetaData = &bind.MetaData{
	ABI: "[]",
}

// ContextABI is the input ABI used to generate the binding from.
// Deprecated: Use ContextMetaData.ABI instead.
var ContextABI = ContextMetaData.ABI

// Context is an auto generated Go binding around an Ethereum contract.
type Context struct {
	ContextCaller     // Read-only binding to the contract
	ContextTransactor // Write-only binding to the contract
	ContextFilterer   // Log filterer for contract events
}

// ContextCaller is an auto generated read-only Go binding around an Ethereum contract.
type ContextCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContextTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ContextTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContextFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ContextFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContextSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ContextSession struct {
	Contract     *Context          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ContextCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ContextCallerSession struct {
	Contract *ContextCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// ContextTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ContextTransactorSession struct {
	Contract     *ContextTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// ContextRaw is an auto generated low-level Go binding around an Ethereum contract.
type ContextRaw struct {
	Contract *Context // Generic contract binding to access the raw methods on
}

// ContextCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ContextCallerRaw struct {
	Contract *ContextCaller // Generic read-only contract binding to access the raw methods on
}

// ContextTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ContextTransactorRaw struct {
	Contract *ContextTransactor // Generic write-only contract binding to access the raw methods on
}

// NewContext creates a new instance of Context, bound to a specific deployed contract.
func NewContext(address common.Address, backend bind.ContractBackend) (*Context, error) {
	contract, err := bindContext(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Context{ContextCaller: ContextCaller{contract: contract}, ContextTransactor: ContextTransactor{contract: contract}, ContextFilterer: ContextFilterer{contract: contract}}, nil
}

// NewContextCaller creates a new read-only instance of Context, bound to a specific deployed contract.
func NewContextCaller(address common.Address, caller bind.ContractCaller) (*ContextCaller, error) {
	contract, err := bindContext(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ContextCaller{contract: contract}, nil
}

// NewContextTransactor creates a new write-only instance of Context, bound to a specific deployed contract.
func NewContextTransactor(address common.Address, transactor bind.ContractTransactor) (*ContextTransactor, error) {
	contract, err := bindContext(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ContextTransactor{contract: contract}, nil
}

// NewContextFilterer creates a new log filterer instance of Context, bound to a specific deployed contract.
func NewContextFilterer(address common.Address, filterer bind.ContractFilterer) (*ContextFilterer, error) {
	contract, err := bindContext(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ContextFilterer{contract: contract}, nil
}

// bindContext binds a generic wrapper to an already deployed contract.
func bindContext(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ContextMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Context *ContextRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Context.Contract.ContextCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Context *ContextRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Context.Contract.ContextTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Context *ContextRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Context.Contract.ContextTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Context *ContextCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Context.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Context *ContextTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Context.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Context *ContextTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Context.Contract.contract.Transact(opts, method, params...)
}

// CreateTestMetaData contains all meta data concerning the CreateTest contract.
var CreateTestMetaData = &bind.MetaData{
	ABI: "[{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"}]",
	Bin: "0x608060405234801561001057600080fd5b506102d2806100206000396000f3fe608060405234801561001057600080fd5b50600036606060008383600081811061002b5761002b610206565b919091013560f81c915061004490508360018187610235565b909450925060006100586020828688610235565b6100619161025f565b90506100708460208188610235565b9450945060008260ff166002036100fb576000610090602082888a610235565b6100999161025f565b90506100a8866020818a610235565b96509650600087878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050825192935084929150506020830186f592505050610143565b600086868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505082519293505060208301905084f09150505b73ffffffffffffffffffffffffffffffffffffffff81166101c4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f6661696c656420746f2063726561746500000000000000000000000000000000604482015260640160405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16803b806020016040519081016040528181526000908060200190933c80519650602001945050505050f35b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000808585111561024557600080fd5b8386111561025257600080fd5b5050820193919092039150565b80356020831015610296577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff602084900360031b1b165b9291505056fea26469706673582212206a6f0b07e05a4d117e5f4b9b166a6266536925fba30e109d3958e8bbbbbb39cd64736f6c63430008110033",
}

// CreateTestABI is the input ABI used to generate the binding from.
// Deprecated: Use CreateTestMetaData.ABI instead.
var CreateTestABI = CreateTestMetaData.ABI

// CreateTestBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use CreateTestMetaData.Bin instead.
var CreateTestBin = CreateTestMetaData.Bin

// DeployCreateTest deploys a new Ethereum contract, binding an instance of CreateTest to it.
func DeployCreateTest(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *CreateTest, error) {
	parsed, err := CreateTestMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(CreateTestBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &CreateTest{CreateTestCaller: CreateTestCaller{contract: contract}, CreateTestTransactor: CreateTestTransactor{contract: contract}, CreateTestFilterer: CreateTestFilterer{contract: contract}}, nil
}

// CreateTest is an auto generated Go binding around an Ethereum contract.
type CreateTest struct {
	CreateTestCaller     // Read-only binding to the contract
	CreateTestTransactor // Write-only binding to the contract
	CreateTestFilterer   // Log filterer for contract events
}

// CreateTestCaller is an auto generated read-only Go binding around an Ethereum contract.
type CreateTestCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CreateTestTransactor is an auto generated write-only Go binding around an Ethereum contract.
type CreateTestTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CreateTestFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type CreateTestFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CreateTestSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type CreateTestSession struct {
	Contract     *CreateTest       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// CreateTestCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type CreateTestCallerSession struct {
	Contract *CreateTestCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// CreateTestTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type CreateTestTransactorSession struct {
	Contract     *CreateTestTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// CreateTestRaw is an auto generated low-level Go binding around an Ethereum contract.
type CreateTestRaw struct {
	Contract *CreateTest // Generic contract binding to access the raw methods on
}

// CreateTestCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type CreateTestCallerRaw struct {
	Contract *CreateTestCaller // Generic read-only contract binding to access the raw methods on
}

// CreateTestTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type CreateTestTransactorRaw struct {
	Contract *CreateTestTransactor // Generic write-only contract binding to access the raw methods on
}

// NewCreateTest creates a new instance of CreateTest, bound to a specific deployed contract.
func NewCreateTest(address common.Address, backend bind.ContractBackend) (*CreateTest, error) {
	contract, err := bindCreateTest(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &CreateTest{CreateTestCaller: CreateTestCaller{contract: contract}, CreateTestTransactor: CreateTestTransactor{contract: contract}, CreateTestFilterer: CreateTestFilterer{contract: contract}}, nil
}

// NewCreateTestCaller creates a new read-only instance of CreateTest, bound to a specific deployed contract.
func NewCreateTestCaller(address common.Address, caller bind.ContractCaller) (*CreateTestCaller, error) {
	contract, err := bindCreateTest(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &CreateTestCaller{contract: contract}, nil
}

// NewCreateTestTransactor creates a new write-only instance of CreateTest, bound to a specific deployed contract.
func NewCreateTestTransactor(address common.Address, transactor bind.ContractTransactor) (*CreateTestTransactor, error) {
	contract, err := bindCreateTest(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &CreateTestTransactor{contract: contract}, nil
}

// NewCreateTestFilterer creates a new log filterer instance of CreateTest, bound to a specific deployed contract.
func NewCreateTestFilterer(address common.Address, filterer bind.ContractFilterer) (*CreateTestFilterer, error) {
	contract, err := bindCreateTest(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &CreateTestFilterer{contract: contract}, nil
}

// bindCreateTest binds a generic wrapper to an already deployed contract.
func bindCreateTest(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := CreateTestMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CreateTest *CreateTestRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CreateTest.Contract.CreateTestCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CreateTest *CreateTestRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CreateTest.Contract.CreateTestTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CreateTest *CreateTestRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CreateTest.Contract.CreateTestTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CreateTest *CreateTestCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CreateTest.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CreateTest *CreateTestTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CreateTest.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CreateTest *CreateTestTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CreateTest.Contract.contract.Transact(opts, method, params...)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() returns()
func (_CreateTest *CreateTestTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _CreateTest.contract.RawTransact(opts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() returns()
func (_CreateTest *CreateTestSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _CreateTest.Contract.Fallback(&_CreateTest.TransactOpts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() returns()
func (_CreateTest *CreateTestTransactorSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _CreateTest.Contract.Fallback(&_CreateTest.TransactOpts, calldata)
}

// ERC1967ProxyMetaData contains all meta data concerning the ERC1967Proxy contract.
var ERC1967ProxyMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_logic\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"}]",
	Bin: "0x60806040526040516107aa3803806107aa8339810160408190526100229161030c565b61002e82826000610035565b5050610429565b61003e8361006b565b60008251118061004b5750805b156100665761006483836100ab60201b6100291760201c565b505b505050565b610074816100d7565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606100d08383604051806060016040528060278152602001610783602791396101a9565b9392505050565b6100ea8161028760201b6100551760201c565b6101515760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084015b60405180910390fd5b806101887f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b61029660201b6100711760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b60606001600160a01b0384163b6102115760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610148565b600080856001600160a01b03168560405161022c91906103da565b600060405180830381855af49150503d8060008114610267576040519150601f19603f3d011682016040523d82523d6000602084013e61026c565b606091505b50909250905061027d828286610299565b9695505050505050565b6001600160a01b03163b151590565b90565b606083156102a85750816100d0565b8251156102b85782518084602001fd5b8160405162461bcd60e51b815260040161014891906103f6565b634e487b7160e01b600052604160045260246000fd5b60005b838110156103035781810151838201526020016102eb565b50506000910152565b6000806040838503121561031f57600080fd5b82516001600160a01b038116811461033657600080fd5b60208401519092506001600160401b038082111561035357600080fd5b818501915085601f83011261036757600080fd5b815181811115610379576103796102d2565b604051601f8201601f19908116603f011681019083821181831017156103a1576103a16102d2565b816040528281528860208487010111156103ba57600080fd5b6103cb8360208301602088016102e8565b80955050505050509250929050565b600082516103ec8184602087016102e8565b9190910192915050565b60208152600082518060208401526104158160408501602087016102e8565b601f01601f19169190910160400192915050565b61034b806104386000396000f3fe60806040523661001357610011610017565b005b6100115b610027610022610074565b6100b9565b565b606061004e83836040518060600160405280602781526020016102ef602791396100dd565b9392505050565b73ffffffffffffffffffffffffffffffffffffffff163b151590565b90565b60006100b47f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b3660008037600080366000845af43d6000803e8080156100d8573d6000f35b3d6000fd5b606073ffffffffffffffffffffffffffffffffffffffff84163b610188576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e7472616374000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff16856040516101b09190610281565b600060405180830381855af49150503d80600081146101eb576040519150601f19603f3d011682016040523d82523d6000602084013e6101f0565b606091505b509150915061020082828661020a565b9695505050505050565b6060831561021957508161004e565b8251156102295782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161017f919061029d565b60005b83811015610278578181015183820152602001610260565b50506000910152565b6000825161029381846020870161025d565b9190910192915050565b60208152600082518060208401526102bc81604085016020870161025d565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220150af4752d161f3c63ceed35dc1ac53302c46e0833f49ce85c85fc527ef765c864736f6c63430008110033416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564",
}

// ERC1967ProxyABI is the input ABI used to generate the binding from.
// Deprecated: Use ERC1967ProxyMetaData.ABI instead.
var ERC1967ProxyABI = ERC1967ProxyMetaData.ABI

// ERC1967ProxyBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ERC1967ProxyMetaData.Bin instead.
var ERC1967ProxyBin = ERC1967ProxyMetaData.Bin

// DeployERC1967Proxy deploys a new Ethereum contract, binding an instance of ERC1967Proxy to it.
func DeployERC1967Proxy(auth *bind.TransactOpts, backend bind.ContractBackend, _logic common.Address, _data []byte) (common.Address, *types.Transaction, *ERC1967Proxy, error) {
	parsed, err := ERC1967ProxyMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ERC1967ProxyBin), backend, _logic, _data)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ERC1967Proxy{ERC1967ProxyCaller: ERC1967ProxyCaller{contract: contract}, ERC1967ProxyTransactor: ERC1967ProxyTransactor{contract: contract}, ERC1967ProxyFilterer: ERC1967ProxyFilterer{contract: contract}}, nil
}

// ERC1967Proxy is an auto generated Go binding around an Ethereum contract.
type ERC1967Proxy struct {
	ERC1967ProxyCaller     // Read-only binding to the contract
	ERC1967ProxyTransactor // Write-only binding to the contract
	ERC1967ProxyFilterer   // Log filterer for contract events
}

// ERC1967ProxyCaller is an auto generated read-only Go binding around an Ethereum contract.
type ERC1967ProxyCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC1967ProxyTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ERC1967ProxyTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC1967ProxyFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ERC1967ProxyFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC1967ProxySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ERC1967ProxySession struct {
	Contract     *ERC1967Proxy     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ERC1967ProxyCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ERC1967ProxyCallerSession struct {
	Contract *ERC1967ProxyCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// ERC1967ProxyTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ERC1967ProxyTransactorSession struct {
	Contract     *ERC1967ProxyTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// ERC1967ProxyRaw is an auto generated low-level Go binding around an Ethereum contract.
type ERC1967ProxyRaw struct {
	Contract *ERC1967Proxy // Generic contract binding to access the raw methods on
}

// ERC1967ProxyCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ERC1967ProxyCallerRaw struct {
	Contract *ERC1967ProxyCaller // Generic read-only contract binding to access the raw methods on
}

// ERC1967ProxyTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ERC1967ProxyTransactorRaw struct {
	Contract *ERC1967ProxyTransactor // Generic write-only contract binding to access the raw methods on
}

// NewERC1967Proxy creates a new instance of ERC1967Proxy, bound to a specific deployed contract.
func NewERC1967Proxy(address common.Address, backend bind.ContractBackend) (*ERC1967Proxy, error) {
	contract, err := bindERC1967Proxy(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ERC1967Proxy{ERC1967ProxyCaller: ERC1967ProxyCaller{contract: contract}, ERC1967ProxyTransactor: ERC1967ProxyTransactor{contract: contract}, ERC1967ProxyFilterer: ERC1967ProxyFilterer{contract: contract}}, nil
}

// NewERC1967ProxyCaller creates a new read-only instance of ERC1967Proxy, bound to a specific deployed contract.
func NewERC1967ProxyCaller(address common.Address, caller bind.ContractCaller) (*ERC1967ProxyCaller, error) {
	contract, err := bindERC1967Proxy(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ERC1967ProxyCaller{contract: contract}, nil
}

// NewERC1967ProxyTransactor creates a new write-only instance of ERC1967Proxy, bound to a specific deployed contract.
func NewERC1967ProxyTransactor(address common.Address, transactor bind.ContractTransactor) (*ERC1967ProxyTransactor, error) {
	contract, err := bindERC1967Proxy(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ERC1967ProxyTransactor{contract: contract}, nil
}

// NewERC1967ProxyFilterer creates a new log filterer instance of ERC1967Proxy, bound to a specific deployed contract.
func NewERC1967ProxyFilterer(address common.Address, filterer bind.ContractFilterer) (*ERC1967ProxyFilterer, error) {
	contract, err := bindERC1967Proxy(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ERC1967ProxyFilterer{contract: contract}, nil
}

// bindERC1967Proxy binds a generic wrapper to an already deployed contract.
func bindERC1967Proxy(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ERC1967ProxyMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC1967Proxy *ERC1967ProxyRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ERC1967Proxy.Contract.ERC1967ProxyCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC1967Proxy *ERC1967ProxyRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC1967Proxy.Contract.ERC1967ProxyTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC1967Proxy *ERC1967ProxyRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC1967Proxy.Contract.ERC1967ProxyTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC1967Proxy *ERC1967ProxyCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ERC1967Proxy.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC1967Proxy *ERC1967ProxyTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC1967Proxy.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC1967Proxy *ERC1967ProxyTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC1967Proxy.Contract.contract.Transact(opts, method, params...)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_ERC1967Proxy *ERC1967ProxyTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _ERC1967Proxy.contract.RawTransact(opts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_ERC1967Proxy *ERC1967ProxySession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _ERC1967Proxy.Contract.Fallback(&_ERC1967Proxy.TransactOpts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_ERC1967Proxy *ERC1967ProxyTransactorSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _ERC1967Proxy.Contract.Fallback(&_ERC1967Proxy.TransactOpts, calldata)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_ERC1967Proxy *ERC1967ProxyTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC1967Proxy.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_ERC1967Proxy *ERC1967ProxySession) Receive() (*types.Transaction, error) {
	return _ERC1967Proxy.Contract.Receive(&_ERC1967Proxy.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_ERC1967Proxy *ERC1967ProxyTransactorSession) Receive() (*types.Transaction, error) {
	return _ERC1967Proxy.Contract.Receive(&_ERC1967Proxy.TransactOpts)
}

// ERC1967ProxyAdminChangedIterator is returned from FilterAdminChanged and is used to iterate over the raw logs and unpacked data for AdminChanged events raised by the ERC1967Proxy contract.
type ERC1967ProxyAdminChangedIterator struct {
	Event *ERC1967ProxyAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC1967ProxyAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC1967ProxyAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC1967ProxyAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC1967ProxyAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC1967ProxyAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC1967ProxyAdminChanged represents a AdminChanged event raised by the ERC1967Proxy contract.
type ERC1967ProxyAdminChanged struct {
	PreviousAdmin common.Address
	NewAdmin      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAdminChanged is a free log retrieval operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_ERC1967Proxy *ERC1967ProxyFilterer) FilterAdminChanged(opts *bind.FilterOpts) (*ERC1967ProxyAdminChangedIterator, error) {

	logs, sub, err := _ERC1967Proxy.contract.FilterLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return &ERC1967ProxyAdminChangedIterator{contract: _ERC1967Proxy.contract, event: "AdminChanged", logs: logs, sub: sub}, nil
}

// WatchAdminChanged is a free log subscription operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_ERC1967Proxy *ERC1967ProxyFilterer) WatchAdminChanged(opts *bind.WatchOpts, sink chan<- *ERC1967ProxyAdminChanged) (event.Subscription, error) {

	logs, sub, err := _ERC1967Proxy.contract.WatchLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC1967ProxyAdminChanged)
				if err := _ERC1967Proxy.contract.UnpackLog(event, "AdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAdminChanged is a log parse operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_ERC1967Proxy *ERC1967ProxyFilterer) ParseAdminChanged(log types.Log) (*ERC1967ProxyAdminChanged, error) {
	event := new(ERC1967ProxyAdminChanged)
	if err := _ERC1967Proxy.contract.UnpackLog(event, "AdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC1967ProxyBeaconUpgradedIterator is returned from FilterBeaconUpgraded and is used to iterate over the raw logs and unpacked data for BeaconUpgraded events raised by the ERC1967Proxy contract.
type ERC1967ProxyBeaconUpgradedIterator struct {
	Event *ERC1967ProxyBeaconUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC1967ProxyBeaconUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC1967ProxyBeaconUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC1967ProxyBeaconUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC1967ProxyBeaconUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC1967ProxyBeaconUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC1967ProxyBeaconUpgraded represents a BeaconUpgraded event raised by the ERC1967Proxy contract.
type ERC1967ProxyBeaconUpgraded struct {
	Beacon common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBeaconUpgraded is a free log retrieval operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_ERC1967Proxy *ERC1967ProxyFilterer) FilterBeaconUpgraded(opts *bind.FilterOpts, beacon []common.Address) (*ERC1967ProxyBeaconUpgradedIterator, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _ERC1967Proxy.contract.FilterLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return &ERC1967ProxyBeaconUpgradedIterator{contract: _ERC1967Proxy.contract, event: "BeaconUpgraded", logs: logs, sub: sub}, nil
}

// WatchBeaconUpgraded is a free log subscription operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_ERC1967Proxy *ERC1967ProxyFilterer) WatchBeaconUpgraded(opts *bind.WatchOpts, sink chan<- *ERC1967ProxyBeaconUpgraded, beacon []common.Address) (event.Subscription, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _ERC1967Proxy.contract.WatchLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC1967ProxyBeaconUpgraded)
				if err := _ERC1967Proxy.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBeaconUpgraded is a log parse operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_ERC1967Proxy *ERC1967ProxyFilterer) ParseBeaconUpgraded(log types.Log) (*ERC1967ProxyBeaconUpgraded, error) {
	event := new(ERC1967ProxyBeaconUpgraded)
	if err := _ERC1967Proxy.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC1967ProxyUpgradedIterator is returned from FilterUpgraded and is used to iterate over the raw logs and unpacked data for Upgraded events raised by the ERC1967Proxy contract.
type ERC1967ProxyUpgradedIterator struct {
	Event *ERC1967ProxyUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC1967ProxyUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC1967ProxyUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC1967ProxyUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC1967ProxyUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC1967ProxyUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC1967ProxyUpgraded represents a Upgraded event raised by the ERC1967Proxy contract.
type ERC1967ProxyUpgraded struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgraded is a free log retrieval operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_ERC1967Proxy *ERC1967ProxyFilterer) FilterUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*ERC1967ProxyUpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _ERC1967Proxy.contract.FilterLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &ERC1967ProxyUpgradedIterator{contract: _ERC1967Proxy.contract, event: "Upgraded", logs: logs, sub: sub}, nil
}

// WatchUpgraded is a free log subscription operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_ERC1967Proxy *ERC1967ProxyFilterer) WatchUpgraded(opts *bind.WatchOpts, sink chan<- *ERC1967ProxyUpgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _ERC1967Proxy.contract.WatchLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC1967ProxyUpgraded)
				if err := _ERC1967Proxy.contract.UnpackLog(event, "Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgraded is a log parse operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_ERC1967Proxy *ERC1967ProxyFilterer) ParseUpgraded(log types.Log) (*ERC1967ProxyUpgraded, error) {
	event := new(ERC1967ProxyUpgraded)
	if err := _ERC1967Proxy.contract.UnpackLog(event, "Upgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC1967UpgradeMetaData contains all meta data concerning the ERC1967Upgrade contract.
var ERC1967UpgradeMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"}]",
}

// ERC1967UpgradeABI is the input ABI used to generate the binding from.
// Deprecated: Use ERC1967UpgradeMetaData.ABI instead.
var ERC1967UpgradeABI = ERC1967UpgradeMetaData.ABI

// ERC1967Upgrade is an auto generated Go binding around an Ethereum contract.
type ERC1967Upgrade struct {
	ERC1967UpgradeCaller     // Read-only binding to the contract
	ERC1967UpgradeTransactor // Write-only binding to the contract
	ERC1967UpgradeFilterer   // Log filterer for contract events
}

// ERC1967UpgradeCaller is an auto generated read-only Go binding around an Ethereum contract.
type ERC1967UpgradeCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC1967UpgradeTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ERC1967UpgradeTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC1967UpgradeFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ERC1967UpgradeFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC1967UpgradeSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ERC1967UpgradeSession struct {
	Contract     *ERC1967Upgrade   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ERC1967UpgradeCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ERC1967UpgradeCallerSession struct {
	Contract *ERC1967UpgradeCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// ERC1967UpgradeTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ERC1967UpgradeTransactorSession struct {
	Contract     *ERC1967UpgradeTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// ERC1967UpgradeRaw is an auto generated low-level Go binding around an Ethereum contract.
type ERC1967UpgradeRaw struct {
	Contract *ERC1967Upgrade // Generic contract binding to access the raw methods on
}

// ERC1967UpgradeCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ERC1967UpgradeCallerRaw struct {
	Contract *ERC1967UpgradeCaller // Generic read-only contract binding to access the raw methods on
}

// ERC1967UpgradeTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ERC1967UpgradeTransactorRaw struct {
	Contract *ERC1967UpgradeTransactor // Generic write-only contract binding to access the raw methods on
}

// NewERC1967Upgrade creates a new instance of ERC1967Upgrade, bound to a specific deployed contract.
func NewERC1967Upgrade(address common.Address, backend bind.ContractBackend) (*ERC1967Upgrade, error) {
	contract, err := bindERC1967Upgrade(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ERC1967Upgrade{ERC1967UpgradeCaller: ERC1967UpgradeCaller{contract: contract}, ERC1967UpgradeTransactor: ERC1967UpgradeTransactor{contract: contract}, ERC1967UpgradeFilterer: ERC1967UpgradeFilterer{contract: contract}}, nil
}

// NewERC1967UpgradeCaller creates a new read-only instance of ERC1967Upgrade, bound to a specific deployed contract.
func NewERC1967UpgradeCaller(address common.Address, caller bind.ContractCaller) (*ERC1967UpgradeCaller, error) {
	contract, err := bindERC1967Upgrade(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ERC1967UpgradeCaller{contract: contract}, nil
}

// NewERC1967UpgradeTransactor creates a new write-only instance of ERC1967Upgrade, bound to a specific deployed contract.
func NewERC1967UpgradeTransactor(address common.Address, transactor bind.ContractTransactor) (*ERC1967UpgradeTransactor, error) {
	contract, err := bindERC1967Upgrade(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ERC1967UpgradeTransactor{contract: contract}, nil
}

// NewERC1967UpgradeFilterer creates a new log filterer instance of ERC1967Upgrade, bound to a specific deployed contract.
func NewERC1967UpgradeFilterer(address common.Address, filterer bind.ContractFilterer) (*ERC1967UpgradeFilterer, error) {
	contract, err := bindERC1967Upgrade(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ERC1967UpgradeFilterer{contract: contract}, nil
}

// bindERC1967Upgrade binds a generic wrapper to an already deployed contract.
func bindERC1967Upgrade(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ERC1967UpgradeMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC1967Upgrade *ERC1967UpgradeRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ERC1967Upgrade.Contract.ERC1967UpgradeCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC1967Upgrade *ERC1967UpgradeRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC1967Upgrade.Contract.ERC1967UpgradeTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC1967Upgrade *ERC1967UpgradeRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC1967Upgrade.Contract.ERC1967UpgradeTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC1967Upgrade *ERC1967UpgradeCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ERC1967Upgrade.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC1967Upgrade *ERC1967UpgradeTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC1967Upgrade.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC1967Upgrade *ERC1967UpgradeTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC1967Upgrade.Contract.contract.Transact(opts, method, params...)
}

// ERC1967UpgradeAdminChangedIterator is returned from FilterAdminChanged and is used to iterate over the raw logs and unpacked data for AdminChanged events raised by the ERC1967Upgrade contract.
type ERC1967UpgradeAdminChangedIterator struct {
	Event *ERC1967UpgradeAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC1967UpgradeAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC1967UpgradeAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC1967UpgradeAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC1967UpgradeAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC1967UpgradeAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC1967UpgradeAdminChanged represents a AdminChanged event raised by the ERC1967Upgrade contract.
type ERC1967UpgradeAdminChanged struct {
	PreviousAdmin common.Address
	NewAdmin      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAdminChanged is a free log retrieval operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_ERC1967Upgrade *ERC1967UpgradeFilterer) FilterAdminChanged(opts *bind.FilterOpts) (*ERC1967UpgradeAdminChangedIterator, error) {

	logs, sub, err := _ERC1967Upgrade.contract.FilterLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return &ERC1967UpgradeAdminChangedIterator{contract: _ERC1967Upgrade.contract, event: "AdminChanged", logs: logs, sub: sub}, nil
}

// WatchAdminChanged is a free log subscription operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_ERC1967Upgrade *ERC1967UpgradeFilterer) WatchAdminChanged(opts *bind.WatchOpts, sink chan<- *ERC1967UpgradeAdminChanged) (event.Subscription, error) {

	logs, sub, err := _ERC1967Upgrade.contract.WatchLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC1967UpgradeAdminChanged)
				if err := _ERC1967Upgrade.contract.UnpackLog(event, "AdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAdminChanged is a log parse operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_ERC1967Upgrade *ERC1967UpgradeFilterer) ParseAdminChanged(log types.Log) (*ERC1967UpgradeAdminChanged, error) {
	event := new(ERC1967UpgradeAdminChanged)
	if err := _ERC1967Upgrade.contract.UnpackLog(event, "AdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC1967UpgradeBeaconUpgradedIterator is returned from FilterBeaconUpgraded and is used to iterate over the raw logs and unpacked data for BeaconUpgraded events raised by the ERC1967Upgrade contract.
type ERC1967UpgradeBeaconUpgradedIterator struct {
	Event *ERC1967UpgradeBeaconUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC1967UpgradeBeaconUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC1967UpgradeBeaconUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC1967UpgradeBeaconUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC1967UpgradeBeaconUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC1967UpgradeBeaconUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC1967UpgradeBeaconUpgraded represents a BeaconUpgraded event raised by the ERC1967Upgrade contract.
type ERC1967UpgradeBeaconUpgraded struct {
	Beacon common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBeaconUpgraded is a free log retrieval operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_ERC1967Upgrade *ERC1967UpgradeFilterer) FilterBeaconUpgraded(opts *bind.FilterOpts, beacon []common.Address) (*ERC1967UpgradeBeaconUpgradedIterator, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _ERC1967Upgrade.contract.FilterLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return &ERC1967UpgradeBeaconUpgradedIterator{contract: _ERC1967Upgrade.contract, event: "BeaconUpgraded", logs: logs, sub: sub}, nil
}

// WatchBeaconUpgraded is a free log subscription operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_ERC1967Upgrade *ERC1967UpgradeFilterer) WatchBeaconUpgraded(opts *bind.WatchOpts, sink chan<- *ERC1967UpgradeBeaconUpgraded, beacon []common.Address) (event.Subscription, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _ERC1967Upgrade.contract.WatchLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC1967UpgradeBeaconUpgraded)
				if err := _ERC1967Upgrade.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBeaconUpgraded is a log parse operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_ERC1967Upgrade *ERC1967UpgradeFilterer) ParseBeaconUpgraded(log types.Log) (*ERC1967UpgradeBeaconUpgraded, error) {
	event := new(ERC1967UpgradeBeaconUpgraded)
	if err := _ERC1967Upgrade.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC1967UpgradeUpgradedIterator is returned from FilterUpgraded and is used to iterate over the raw logs and unpacked data for Upgraded events raised by the ERC1967Upgrade contract.
type ERC1967UpgradeUpgradedIterator struct {
	Event *ERC1967UpgradeUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC1967UpgradeUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC1967UpgradeUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC1967UpgradeUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC1967UpgradeUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC1967UpgradeUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC1967UpgradeUpgraded represents a Upgraded event raised by the ERC1967Upgrade contract.
type ERC1967UpgradeUpgraded struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgraded is a free log retrieval operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_ERC1967Upgrade *ERC1967UpgradeFilterer) FilterUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*ERC1967UpgradeUpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _ERC1967Upgrade.contract.FilterLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &ERC1967UpgradeUpgradedIterator{contract: _ERC1967Upgrade.contract, event: "Upgraded", logs: logs, sub: sub}, nil
}

// WatchUpgraded is a free log subscription operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_ERC1967Upgrade *ERC1967UpgradeFilterer) WatchUpgraded(opts *bind.WatchOpts, sink chan<- *ERC1967UpgradeUpgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _ERC1967Upgrade.contract.WatchLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC1967UpgradeUpgraded)
				if err := _ERC1967Upgrade.contract.UnpackLog(event, "Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgraded is a log parse operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_ERC1967Upgrade *ERC1967UpgradeFilterer) ParseUpgraded(log types.Log) (*ERC1967UpgradeUpgraded, error) {
	event := new(ERC1967UpgradeUpgraded)
	if err := _ERC1967Upgrade.contract.UnpackLog(event, "Upgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC20MetaData contains all meta data concerning the ERC20 contract.
var ERC20MetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
	Bin: "0x60806040523480156200001157600080fd5b5060405162000cda38038062000cda83398101604081905262000034916200011f565b600362000042838262000218565b50600462000051828262000218565b505050620002e4565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200008257600080fd5b81516001600160401b03808211156200009f576200009f6200005a565b604051601f8301601f19908116603f01168101908282118183101715620000ca57620000ca6200005a565b81604052838152602092508683858801011115620000e757600080fd5b600091505b838210156200010b5785820183015181830184015290820190620000ec565b600093810190920192909252949350505050565b600080604083850312156200013357600080fd5b82516001600160401b03808211156200014b57600080fd5b620001598683870162000070565b935060208501519150808211156200017057600080fd5b506200017f8582860162000070565b9150509250929050565b600181811c908216806200019e57607f821691505b602082108103620001bf57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200021357600081815260208120601f850160051c81016020861015620001ee5750805b601f850160051c820191505b818110156200020f57828155600101620001fa565b5050505b505050565b81516001600160401b038111156200023457620002346200005a565b6200024c8162000245845462000189565b84620001c5565b602080601f8311600181146200028457600084156200026b5750858301515b600019600386901b1c1916600185901b1785556200020f565b600085815260208120601f198616915b82811015620002b55788860151825594840194600190910190840162000294565b5085821015620002d45787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6109e680620002f46000396000f3fe608060405234801561001057600080fd5b50600436106100c95760003560e01c80633950935111610081578063a457c2d71161005b578063a457c2d714610187578063a9059cbb1461019a578063dd62ed3e146101ad57600080fd5b8063395093511461014357806370a082311461015657806395d89b411461017f57600080fd5b806318160ddd116100b257806318160ddd1461010f57806323b872dd14610121578063313ce5671461013457600080fd5b806306fdde03146100ce578063095ea7b3146100ec575b600080fd5b6100d66101e6565b6040516100e391906107e0565b60405180910390f35b6100ff6100fa366004610868565b610278565b60405190151581526020016100e3565b6002545b6040519081526020016100e3565b6100ff61012f366004610892565b610292565b604051601281526020016100e3565b6100ff610151366004610868565b6102b6565b6101136101643660046108ce565b6001600160a01b031660009081526020819052604090205490565b6100d66102f5565b6100ff610195366004610868565b610304565b6100ff6101a8366004610868565b6103b3565b6101136101bb3660046108f0565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6060600380546101f590610923565b80601f016020809104026020016040519081016040528092919081815260200182805461022190610923565b801561026e5780601f106102435761010080835404028352916020019161026e565b820191906000526020600020905b81548152906001019060200180831161025157829003601f168201915b5050505050905090565b6000336102868185856103c1565b60019150505b92915050565b6000336102a0858285610519565b6102ab8585856105c9565b506001949350505050565b3360008181526001602090815260408083206001600160a01b038716845290915281205490919061028690829086906102f0908790610976565b6103c1565b6060600480546101f590610923565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909190838110156103a65760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f00000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6102ab82868684036103c1565b6000336102868185856105c9565b6001600160a01b03831661043c5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f7265737300000000000000000000000000000000000000000000000000000000606482015260840161039d565b6001600160a01b0382166104b85760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f7373000000000000000000000000000000000000000000000000000000000000606482015260840161039d565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038381166000908152600160209081526040808320938616835292905220547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146105c357818110156105b65760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640161039d565b6105c384848484036103c1565b50505050565b6001600160a01b0383166106455760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f6472657373000000000000000000000000000000000000000000000000000000606482015260840161039d565b6001600160a01b0382166106c15760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f6573730000000000000000000000000000000000000000000000000000000000606482015260840161039d565b6001600160a01b038316600090815260208190526040902054818110156107505760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e63650000000000000000000000000000000000000000000000000000606482015260840161039d565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290610787908490610976565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516107d391815260200190565b60405180910390a36105c3565b600060208083528351808285015260005b8181101561080d578581018301518582016040015282016107f1565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168501019250505092915050565b80356001600160a01b038116811461086357600080fd5b919050565b6000806040838503121561087b57600080fd5b6108848361084c565b946020939093013593505050565b6000806000606084860312156108a757600080fd5b6108b08461084c565b92506108be6020850161084c565b9150604084013590509250925092565b6000602082840312156108e057600080fd5b6108e98261084c565b9392505050565b6000806040838503121561090357600080fd5b61090c8361084c565b915061091a6020840161084c565b90509250929050565b600181811c9082168061093757607f821691505b602082108103610970577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b8082018082111561028c577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fdfea2646970667358221220f314400beab5efa79f0d7d11cb767f83e76364356d7572c6e853a8c3e8b38c8d64736f6c63430008110033",
}

// ERC20ABI is the input ABI used to generate the binding from.
// Deprecated: Use ERC20MetaData.ABI instead.
var ERC20ABI = ERC20MetaData.ABI

// ERC20Bin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ERC20MetaData.Bin instead.
var ERC20Bin = ERC20MetaData.Bin

// DeployERC20 deploys a new Ethereum contract, binding an instance of ERC20 to it.
func DeployERC20(auth *bind.TransactOpts, backend bind.ContractBackend, name_ string, symbol_ string) (common.Address, *types.Transaction, *ERC20, error) {
	parsed, err := ERC20MetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ERC20Bin), backend, name_, symbol_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ERC20{ERC20Caller: ERC20Caller{contract: contract}, ERC20Transactor: ERC20Transactor{contract: contract}, ERC20Filterer: ERC20Filterer{contract: contract}}, nil
}

// ERC20 is an auto generated Go binding around an Ethereum contract.
type ERC20 struct {
	ERC20Caller     // Read-only binding to the contract
	ERC20Transactor // Write-only binding to the contract
	ERC20Filterer   // Log filterer for contract events
}

// ERC20Caller is an auto generated read-only Go binding around an Ethereum contract.
type ERC20Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20Transactor is an auto generated write-only Go binding around an Ethereum contract.
type ERC20Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ERC20Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ERC20Session struct {
	Contract     *ERC20            // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ERC20CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ERC20CallerSession struct {
	Contract *ERC20Caller  // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// ERC20TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ERC20TransactorSession struct {
	Contract     *ERC20Transactor  // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ERC20Raw is an auto generated low-level Go binding around an Ethereum contract.
type ERC20Raw struct {
	Contract *ERC20 // Generic contract binding to access the raw methods on
}

// ERC20CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ERC20CallerRaw struct {
	Contract *ERC20Caller // Generic read-only contract binding to access the raw methods on
}

// ERC20TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ERC20TransactorRaw struct {
	Contract *ERC20Transactor // Generic write-only contract binding to access the raw methods on
}

// NewERC20 creates a new instance of ERC20, bound to a specific deployed contract.
func NewERC20(address common.Address, backend bind.ContractBackend) (*ERC20, error) {
	contract, err := bindERC20(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ERC20{ERC20Caller: ERC20Caller{contract: contract}, ERC20Transactor: ERC20Transactor{contract: contract}, ERC20Filterer: ERC20Filterer{contract: contract}}, nil
}

// NewERC20Caller creates a new read-only instance of ERC20, bound to a specific deployed contract.
func NewERC20Caller(address common.Address, caller bind.ContractCaller) (*ERC20Caller, error) {
	contract, err := bindERC20(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ERC20Caller{contract: contract}, nil
}

// NewERC20Transactor creates a new write-only instance of ERC20, bound to a specific deployed contract.
func NewERC20Transactor(address common.Address, transactor bind.ContractTransactor) (*ERC20Transactor, error) {
	contract, err := bindERC20(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ERC20Transactor{contract: contract}, nil
}

// NewERC20Filterer creates a new log filterer instance of ERC20, bound to a specific deployed contract.
func NewERC20Filterer(address common.Address, filterer bind.ContractFilterer) (*ERC20Filterer, error) {
	contract, err := bindERC20(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ERC20Filterer{contract: contract}, nil
}

// bindERC20 binds a generic wrapper to an already deployed contract.
func bindERC20(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ERC20MetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC20 *ERC20Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ERC20.Contract.ERC20Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC20 *ERC20Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC20.Contract.ERC20Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC20 *ERC20Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC20.Contract.ERC20Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC20 *ERC20CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ERC20.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC20 *ERC20TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC20.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC20 *ERC20TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC20.Contract.contract.Transact(opts, method, params...)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_ERC20 *ERC20Caller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ERC20.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_ERC20 *ERC20Session) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _ERC20.Contract.Allowance(&_ERC20.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_ERC20 *ERC20CallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _ERC20.Contract.Allowance(&_ERC20.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_ERC20 *ERC20Caller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ERC20.contract.Call(opts, &out, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_ERC20 *ERC20Session) BalanceOf(account common.Address) (*big.Int, error) {
	return _ERC20.Contract.BalanceOf(&_ERC20.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_ERC20 *ERC20CallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _ERC20.Contract.BalanceOf(&_ERC20.CallOpts, account)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_ERC20 *ERC20Caller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _ERC20.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_ERC20 *ERC20Session) Decimals() (uint8, error) {
	return _ERC20.Contract.Decimals(&_ERC20.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_ERC20 *ERC20CallerSession) Decimals() (uint8, error) {
	return _ERC20.Contract.Decimals(&_ERC20.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ERC20 *ERC20Caller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ERC20.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ERC20 *ERC20Session) Name() (string, error) {
	return _ERC20.Contract.Name(&_ERC20.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ERC20 *ERC20CallerSession) Name() (string, error) {
	return _ERC20.Contract.Name(&_ERC20.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ERC20 *ERC20Caller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ERC20.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ERC20 *ERC20Session) Symbol() (string, error) {
	return _ERC20.Contract.Symbol(&_ERC20.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ERC20 *ERC20CallerSession) Symbol() (string, error) {
	return _ERC20.Contract.Symbol(&_ERC20.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_ERC20 *ERC20Caller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ERC20.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_ERC20 *ERC20Session) TotalSupply() (*big.Int, error) {
	return _ERC20.Contract.TotalSupply(&_ERC20.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_ERC20 *ERC20CallerSession) TotalSupply() (*big.Int, error) {
	return _ERC20.Contract.TotalSupply(&_ERC20.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_ERC20 *ERC20Transactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_ERC20 *ERC20Session) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20.Contract.Approve(&_ERC20.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_ERC20 *ERC20TransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20.Contract.Approve(&_ERC20.TransactOpts, spender, amount)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_ERC20 *ERC20Transactor) DecreaseAllowance(opts *bind.TransactOpts, spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _ERC20.contract.Transact(opts, "decreaseAllowance", spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_ERC20 *ERC20Session) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _ERC20.Contract.DecreaseAllowance(&_ERC20.TransactOpts, spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_ERC20 *ERC20TransactorSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _ERC20.Contract.DecreaseAllowance(&_ERC20.TransactOpts, spender, subtractedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_ERC20 *ERC20Transactor) IncreaseAllowance(opts *bind.TransactOpts, spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _ERC20.contract.Transact(opts, "increaseAllowance", spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_ERC20 *ERC20Session) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _ERC20.Contract.IncreaseAllowance(&_ERC20.TransactOpts, spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_ERC20 *ERC20TransactorSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _ERC20.Contract.IncreaseAllowance(&_ERC20.TransactOpts, spender, addedValue)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_ERC20 *ERC20Transactor) Transfer(opts *bind.TransactOpts, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20.contract.Transact(opts, "transfer", to, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_ERC20 *ERC20Session) Transfer(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20.Contract.Transfer(&_ERC20.TransactOpts, to, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_ERC20 *ERC20TransactorSession) Transfer(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20.Contract.Transfer(&_ERC20.TransactOpts, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_ERC20 *ERC20Transactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20.contract.Transact(opts, "transferFrom", from, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_ERC20 *ERC20Session) TransferFrom(from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20.Contract.TransferFrom(&_ERC20.TransactOpts, from, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_ERC20 *ERC20TransactorSession) TransferFrom(from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20.Contract.TransferFrom(&_ERC20.TransactOpts, from, to, amount)
}

// ERC20ApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the ERC20 contract.
type ERC20ApprovalIterator struct {
	Event *ERC20Approval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20ApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20Approval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20Approval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20ApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20ApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20Approval represents a Approval event raised by the ERC20 contract.
type ERC20Approval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_ERC20 *ERC20Filterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*ERC20ApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _ERC20.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &ERC20ApprovalIterator{contract: _ERC20.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_ERC20 *ERC20Filterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *ERC20Approval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _ERC20.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20Approval)
				if err := _ERC20.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_ERC20 *ERC20Filterer) ParseApproval(log types.Log) (*ERC20Approval, error) {
	event := new(ERC20Approval)
	if err := _ERC20.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC20TransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the ERC20 contract.
type ERC20TransferIterator struct {
	Event *ERC20Transfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20TransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20Transfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20Transfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20TransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20TransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20Transfer represents a Transfer event raised by the ERC20 contract.
type ERC20Transfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_ERC20 *ERC20Filterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*ERC20TransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ERC20.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &ERC20TransferIterator{contract: _ERC20.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_ERC20 *ERC20Filterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *ERC20Transfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ERC20.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20Transfer)
				if err := _ERC20.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_ERC20 *ERC20Filterer) ParseTransfer(log types.Log) (*ERC20Transfer, error) {
	event := new(ERC20Transfer)
	if err := _ERC20.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// HostioTestMetaData contains all meta data concerning the HostioTest contract.
var HostioTestMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"accountBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"accountCode\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"accountCodeSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"accountCodehash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockBasefee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockCoinbase\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockGasLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"int8\",\"name\":\"n\",\"type\":\"int8\"},{\"internalType\":\"bytes32\",\"name\":\"t1\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"t2\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"t3\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"t4\",\"type\":\"bytes32\"}],\"name\":\"emitLog\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"evmGasLeft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"evmInkLeft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exitEarly\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"preimage\",\"type\":\"bytes\"}],\"name\":\"keccak\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"c\",\"type\":\"uint256\"}],\"name\":\"mathAddMod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"mathDiv\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"mathMod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"c\",\"type\":\"uint256\"}],\"name\":\"mathMulMod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"mathPow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"msgSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"msgValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"returnDataSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"transientLoadBytes32\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"value\",\"type\":\"bytes32\"}],\"name\":\"transientStoreBytes32\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txGasPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txInkPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txOrigin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561000f575f80fd5b506108488061001d5f395ff3fe60806040526004361061017e575f3560e01c806398071112116100d4578063d294cb0f11610083578063d294cb0f1461039c578063d737d0c7146103c3578063ddf363d7146103d5578063e5c47e1d146103db578063e6334eea146103ed578063f6b4dfb4146103fe578063f7be3e8d14610410578063f96757d11461042f575f80fd5b806398071112146102cb5780639c16cfe8146102f7578063a520508f14610315578063a83ede1c14610333578063adb6183214610352578063cd84980e14610364578063cebcbba914610376575f80fd5b806357e871e71161013057806357e871e7146102385780636417b4d51461024a5780637877a797146102695780637c6aa4661461027b5780637d00629614610226578063860e61991461029a57806389995319146102ac575f80fd5b8063131260d0146101825780632233a918146101b457806323fc7ef3146101d257806328ed15d5146101f15780632dc26516146101f157806334eb2d6b14610205578063534ca05414610226575b5f80fd5b34801561018d575f80fd5b506101a161019c3660046105fa565b610441565b6040519081526020015b60405180910390f35b3480156101bf575f80fd5b506101a16101ce366004610623565b3f90565b3480156101dd575f80fd5b506101a16101ec36600461068e565b61045b565b3480156101fc575f80fd5b506101a161047c565b348015610210575f80fd5b5061022461021f3660046106cd565b610483565b005b348015610231575f80fd5b503a6101a1565b348015610243575f80fd5b50436101a1565b348015610255575f80fd5b506102246102643660046106ed565b61048a565b348015610274575f80fd5b50456101a1565b348015610286575f80fd5b506101a16102953660046106cd565b610588565b3480156102a5575f80fd5b503d6101a1565b3480156102b7575f80fd5b506101a16102c63660046106cd565b900a90565b3480156102d6575f80fd5b506102ea6102e5366004610623565b61059a565b6040516101ab9190610766565b348015610302575f80fd5b506101a16103113660046107b2565b5c90565b348015610320575f80fd5b506101a161032f366004610623565b3b90565b34801561033e575f80fd5b506101a161034d3660046105fa565b6105d5565b34801561035d575f80fd5b50426101a1565b34801561036f575f80fd5b50466101a1565b348015610381575f80fd5b50415b6040516001600160a01b0390911681526020016101ab565b3480156103a7575f80fd5b506101a16103b6366004610623565b6001600160a01b03163190565b3480156103ce575f80fd5b5033610384565b346101a1565b3480156103e6575f80fd5b50486101a1565b3480156103f8575f80fd5b50610224005b348015610409575f80fd5b5030610384565b34801561041b575f80fd5b506101a161042a3660046106cd565b6105ef565b34801561043a575f80fd5b5032610384565b5f8180610450576104506107c9565b838509949350505050565b5f828260405161046c9291906107dd565b6040518091039020905092915050565b5f5a905090565b80825d5050565b5f87878080601f0160208091040260200160405190810160405280939291908181526020018383808284375f92018290525093945050505086810b90036104d757805160208201a061057e565b855f0b6001036104ee5784815160208301a161057e565b855f0b600203610506578385825160208401a261057e565b855f0b60030361051f57828486835160208501a361057e565b855f0b6004036105395781838587845160208601a461057e565b60405162461bcd60e51b8152602060048201526016602482015275696e76616c6964206e20666f7220656d6974206c6f6760501b604482015260640160405180910390fd5b5050505050505050565b5f61059382846107ec565b9392505050565b604080516127108082526127408201909252606091905f9082602082018180368337019050509050815f60208301863c923b83525090919050565b5f81806105e4576105e46107c9565b838508949350505050565b5f61059382846107ff565b5f805f6060848603121561060c575f80fd5b505081359360208301359350604090920135919050565b5f60208284031215610633575f80fd5b81356001600160a01b0381168114610593575f80fd5b5f8083601f840112610659575f80fd5b50813567ffffffffffffffff811115610670575f80fd5b602083019150836020828501011115610687575f80fd5b9250929050565b5f806020838503121561069f575f80fd5b823567ffffffffffffffff8111156106b5575f80fd5b6106c185828601610649565b90969095509350505050565b5f80604083850312156106de575f80fd5b50508035926020909101359150565b5f805f805f805f60c0888a031215610703575f80fd5b873567ffffffffffffffff811115610719575f80fd5b6107258a828b01610649565b90985096505060208801355f81900b811461073e575f80fd5b96999598509596604081013596506060810135956080820135955060a0909101359350915050565b5f602080835283518060208501525f5b8181101561079257858101830151858201604001528201610776565b505f604082860101526040601f19601f8301168501019250505092915050565b5f602082840312156107c2575f80fd5b5035919050565b634e487b7160e01b5f52601260045260245ffd5b818382375f9101908152919050565b5f826107fa576107fa6107c9565b500490565b5f8261080d5761080d6107c9565b50069056fea2646970667358221220f0ddccbcbb76f4625c4f0dfec28faa7568dbbfba6dd6a7e9062fd3023a9a501264736f6c63430008180033",
}

// HostioTestABI is the input ABI used to generate the binding from.
// Deprecated: Use HostioTestMetaData.ABI instead.
var HostioTestABI = HostioTestMetaData.ABI

// HostioTestBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use HostioTestMetaData.Bin instead.
var HostioTestBin = HostioTestMetaData.Bin

// DeployHostioTest deploys a new Ethereum contract, binding an instance of HostioTest to it.
func DeployHostioTest(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *HostioTest, error) {
	parsed, err := HostioTestMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(HostioTestBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &HostioTest{HostioTestCaller: HostioTestCaller{contract: contract}, HostioTestTransactor: HostioTestTransactor{contract: contract}, HostioTestFilterer: HostioTestFilterer{contract: contract}}, nil
}

// HostioTest is an auto generated Go binding around an Ethereum contract.
type HostioTest struct {
	HostioTestCaller     // Read-only binding to the contract
	HostioTestTransactor // Write-only binding to the contract
	HostioTestFilterer   // Log filterer for contract events
}

// HostioTestCaller is an auto generated read-only Go binding around an Ethereum contract.
type HostioTestCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// HostioTestTransactor is an auto generated write-only Go binding around an Ethereum contract.
type HostioTestTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// HostioTestFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type HostioTestFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// HostioTestSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type HostioTestSession struct {
	Contract     *HostioTest       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// HostioTestCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type HostioTestCallerSession struct {
	Contract *HostioTestCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// HostioTestTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type HostioTestTransactorSession struct {
	Contract     *HostioTestTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// HostioTestRaw is an auto generated low-level Go binding around an Ethereum contract.
type HostioTestRaw struct {
	Contract *HostioTest // Generic contract binding to access the raw methods on
}

// HostioTestCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type HostioTestCallerRaw struct {
	Contract *HostioTestCaller // Generic read-only contract binding to access the raw methods on
}

// HostioTestTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type HostioTestTransactorRaw struct {
	Contract *HostioTestTransactor // Generic write-only contract binding to access the raw methods on
}

// NewHostioTest creates a new instance of HostioTest, bound to a specific deployed contract.
func NewHostioTest(address common.Address, backend bind.ContractBackend) (*HostioTest, error) {
	contract, err := bindHostioTest(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &HostioTest{HostioTestCaller: HostioTestCaller{contract: contract}, HostioTestTransactor: HostioTestTransactor{contract: contract}, HostioTestFilterer: HostioTestFilterer{contract: contract}}, nil
}

// NewHostioTestCaller creates a new read-only instance of HostioTest, bound to a specific deployed contract.
func NewHostioTestCaller(address common.Address, caller bind.ContractCaller) (*HostioTestCaller, error) {
	contract, err := bindHostioTest(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &HostioTestCaller{contract: contract}, nil
}

// NewHostioTestTransactor creates a new write-only instance of HostioTest, bound to a specific deployed contract.
func NewHostioTestTransactor(address common.Address, transactor bind.ContractTransactor) (*HostioTestTransactor, error) {
	contract, err := bindHostioTest(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &HostioTestTransactor{contract: contract}, nil
}

// NewHostioTestFilterer creates a new log filterer instance of HostioTest, bound to a specific deployed contract.
func NewHostioTestFilterer(address common.Address, filterer bind.ContractFilterer) (*HostioTestFilterer, error) {
	contract, err := bindHostioTest(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &HostioTestFilterer{contract: contract}, nil
}

// bindHostioTest binds a generic wrapper to an already deployed contract.
func bindHostioTest(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := HostioTestMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_HostioTest *HostioTestRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _HostioTest.Contract.HostioTestCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_HostioTest *HostioTestRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _HostioTest.Contract.HostioTestTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_HostioTest *HostioTestRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _HostioTest.Contract.HostioTestTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_HostioTest *HostioTestCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _HostioTest.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_HostioTest *HostioTestTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _HostioTest.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_HostioTest *HostioTestTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _HostioTest.Contract.contract.Transact(opts, method, params...)
}

// AccountBalance is a free data retrieval call binding the contract method 0xd294cb0f.
//
// Solidity: function accountBalance(address account) view returns(uint256)
func (_HostioTest *HostioTestCaller) AccountBalance(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _HostioTest.contract.Call(opts, &out, "accountBalance", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AccountBalance is a free data retrieval call binding the contract method 0xd294cb0f.
//
// Solidity: function accountBalance(address account) view returns(uint256)
func (_HostioTest *HostioTestSession) AccountBalance(account common.Address) (*big.Int, error) {
	return _HostioTest.Contract.AccountBalance(&_HostioTest.CallOpts, account)
}

// AccountBalance is a free data retrieval call binding the contract method 0xd294cb0f.
//
// Solidity: function accountBalance(address account) view returns(uint256)
func (_HostioTest *HostioTestCallerSession) AccountBalance(account common.Address) (*big.Int, error) {
	return _HostioTest.Contract.AccountBalance(&_HostioTest.CallOpts, account)
}

// AccountCode is a free data retrieval call binding the contract method 0x98071112.
//
// Solidity: function accountCode(address account) view returns(bytes)
func (_HostioTest *HostioTestCaller) AccountCode(opts *bind.CallOpts, account common.Address) ([]byte, error) {
	var out []interface{}
	err := _HostioTest.contract.Call(opts, &out, "accountCode", account)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// AccountCode is a free data retrieval call binding the contract method 0x98071112.
//
// Solidity: function accountCode(address account) view returns(bytes)
func (_HostioTest *HostioTestSession) AccountCode(account common.Address) ([]byte, error) {
	return _HostioTest.Contract.AccountCode(&_HostioTest.CallOpts, account)
}

// AccountCode is a free data retrieval call binding the contract method 0x98071112.
//
// Solidity: function accountCode(address account) view returns(bytes)
func (_HostioTest *HostioTestCallerSession) AccountCode(account common.Address) ([]byte, error) {
	return _HostioTest.Contract.AccountCode(&_HostioTest.CallOpts, account)
}

// AccountCodeSize is a free data retrieval call binding the contract method 0xa520508f.
//
// Solidity: function accountCodeSize(address account) view returns(uint256)
func (_HostioTest *HostioTestCaller) AccountCodeSize(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _HostioTest.contract.Call(opts, &out, "accountCodeSize", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AccountCodeSize is a free data retrieval call binding the contract method 0xa520508f.
//
// Solidity: function accountCodeSize(address account) view returns(uint256)
func (_HostioTest *HostioTestSession) AccountCodeSize(account common.Address) (*big.Int, error) {
	return _HostioTest.Contract.AccountCodeSize(&_HostioTest.CallOpts, account)
}

// AccountCodeSize is a free data retrieval call binding the contract method 0xa520508f.
//
// Solidity: function accountCodeSize(address account) view returns(uint256)
func (_HostioTest *HostioTestCallerSession) AccountCodeSize(account common.Address) (*big.Int, error) {
	return _HostioTest.Contract.AccountCodeSize(&_HostioTest.CallOpts, account)
}

// AccountCodehash is a free data retrieval call binding the contract method 0x2233a918.
//
// Solidity: function accountCodehash(address account) view returns(bytes32)
func (_HostioTest *HostioTestCaller) AccountCodehash(opts *bind.CallOpts, account common.Address) ([32]byte, error) {
	var out []interface{}
	err := _HostioTest.contract.Call(opts, &out, "accountCodehash", account)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// AccountCodehash is a free data retrieval call binding the contract method 0x2233a918.
//
// Solidity: function accountCodehash(address account) view returns(bytes32)
func (_HostioTest *HostioTestSession) AccountCodehash(account common.Address) ([32]byte, error) {
	return _HostioTest.Contract.AccountCodehash(&_HostioTest.CallOpts, account)
}

// AccountCodehash is a free data retrieval call binding the contract method 0x2233a918.
//
// Solidity: function accountCodehash(address account) view returns(bytes32)
func (_HostioTest *HostioTestCallerSession) AccountCodehash(account common.Address) ([32]byte, error) {
	return _HostioTest.Contract.AccountCodehash(&_HostioTest.CallOpts, account)
}

// BlockBasefee is a free data retrieval call binding the contract method 0xe5c47e1d.
//
// Solidity: function blockBasefee() view returns(uint256)
func (_HostioTest *HostioTestCaller) BlockBasefee(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _HostioTest.contract.Call(opts, &out, "blockBasefee")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BlockBasefee is a free data retrieval call binding the contract method 0xe5c47e1d.
//
// Solidity: function blockBasefee() view returns(uint256)
func (_HostioTest *HostioTestSession) BlockBasefee() (*big.Int, error) {
	return _HostioTest.Contract.BlockBasefee(&_HostioTest.CallOpts)
}

// BlockBasefee is a free data retrieval call binding the contract method 0xe5c47e1d.
//
// Solidity: function blockBasefee() view returns(uint256)
func (_HostioTest *HostioTestCallerSession) BlockBasefee() (*big.Int, error) {
	return _HostioTest.Contract.BlockBasefee(&_HostioTest.CallOpts)
}

// BlockCoinbase is a free data retrieval call binding the contract method 0xcebcbba9.
//
// Solidity: function blockCoinbase() view returns(address)
func (_HostioTest *HostioTestCaller) BlockCoinbase(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _HostioTest.contract.Call(opts, &out, "blockCoinbase")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// BlockCoinbase is a free data retrieval call binding the contract method 0xcebcbba9.
//
// Solidity: function blockCoinbase() view returns(address)
func (_HostioTest *HostioTestSession) BlockCoinbase() (common.Address, error) {
	return _HostioTest.Contract.BlockCoinbase(&_HostioTest.CallOpts)
}

// BlockCoinbase is a free data retrieval call binding the contract method 0xcebcbba9.
//
// Solidity: function blockCoinbase() view returns(address)
func (_HostioTest *HostioTestCallerSession) BlockCoinbase() (common.Address, error) {
	return _HostioTest.Contract.BlockCoinbase(&_HostioTest.CallOpts)
}

// BlockGasLimit is a free data retrieval call binding the contract method 0x7877a797.
//
// Solidity: function blockGasLimit() view returns(uint256)
func (_HostioTest *HostioTestCaller) BlockGasLimit(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _HostioTest.contract.Call(opts, &out, "blockGasLimit")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BlockGasLimit is a free data retrieval call binding the contract method 0x7877a797.
//
// Solidity: function blockGasLimit() view returns(uint256)
func (_HostioTest *HostioTestSession) BlockGasLimit() (*big.Int, error) {
	return _HostioTest.Contract.BlockGasLimit(&_HostioTest.CallOpts)
}

// BlockGasLimit is a free data retrieval call binding the contract method 0x7877a797.
//
// Solidity: function blockGasLimit() view returns(uint256)
func (_HostioTest *HostioTestCallerSession) BlockGasLimit() (*big.Int, error) {
	return _HostioTest.Contract.BlockGasLimit(&_HostioTest.CallOpts)
}

// BlockNumber is a free data retrieval call binding the contract method 0x57e871e7.
//
// Solidity: function blockNumber() view returns(uint256)
func (_HostioTest *HostioTestCaller) BlockNumber(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _HostioTest.contract.Call(opts, &out, "blockNumber")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BlockNumber is a free data retrieval call binding the contract method 0x57e871e7.
//
// Solidity: function blockNumber() view returns(uint256)
func (_HostioTest *HostioTestSession) BlockNumber() (*big.Int, error) {
	return _HostioTest.Contract.BlockNumber(&_HostioTest.CallOpts)
}

// BlockNumber is a free data retrieval call binding the contract method 0x57e871e7.
//
// Solidity: function blockNumber() view returns(uint256)
func (_HostioTest *HostioTestCallerSession) BlockNumber() (*big.Int, error) {
	return _HostioTest.Contract.BlockNumber(&_HostioTest.CallOpts)
}

// BlockTimestamp is a free data retrieval call binding the contract method 0xadb61832.
//
// Solidity: function blockTimestamp() view returns(uint256)
func (_HostioTest *HostioTestCaller) BlockTimestamp(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _HostioTest.contract.Call(opts, &out, "blockTimestamp")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BlockTimestamp is a free data retrieval call binding the contract method 0xadb61832.
//
// Solidity: function blockTimestamp() view returns(uint256)
func (_HostioTest *HostioTestSession) BlockTimestamp() (*big.Int, error) {
	return _HostioTest.Contract.BlockTimestamp(&_HostioTest.CallOpts)
}

// BlockTimestamp is a free data retrieval call binding the contract method 0xadb61832.
//
// Solidity: function blockTimestamp() view returns(uint256)
func (_HostioTest *HostioTestCallerSession) BlockTimestamp() (*big.Int, error) {
	return _HostioTest.Contract.BlockTimestamp(&_HostioTest.CallOpts)
}

// Chainid is a free data retrieval call binding the contract method 0xcd84980e.
//
// Solidity: function chainid() view returns(uint256)
func (_HostioTest *HostioTestCaller) Chainid(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _HostioTest.contract.Call(opts, &out, "chainid")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Chainid is a free data retrieval call binding the contract method 0xcd84980e.
//
// Solidity: function chainid() view returns(uint256)
func (_HostioTest *HostioTestSession) Chainid() (*big.Int, error) {
	return _HostioTest.Contract.Chainid(&_HostioTest.CallOpts)
}

// Chainid is a free data retrieval call binding the contract method 0xcd84980e.
//
// Solidity: function chainid() view returns(uint256)
func (_HostioTest *HostioTestCallerSession) Chainid() (*big.Int, error) {
	return _HostioTest.Contract.Chainid(&_HostioTest.CallOpts)
}

// ContractAddress is a free data retrieval call binding the contract method 0xf6b4dfb4.
//
// Solidity: function contractAddress() view returns(address)
func (_HostioTest *HostioTestCaller) ContractAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _HostioTest.contract.Call(opts, &out, "contractAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ContractAddress is a free data retrieval call binding the contract method 0xf6b4dfb4.
//
// Solidity: function contractAddress() view returns(address)
func (_HostioTest *HostioTestSession) ContractAddress() (common.Address, error) {
	return _HostioTest.Contract.ContractAddress(&_HostioTest.CallOpts)
}

// ContractAddress is a free data retrieval call binding the contract method 0xf6b4dfb4.
//
// Solidity: function contractAddress() view returns(address)
func (_HostioTest *HostioTestCallerSession) ContractAddress() (common.Address, error) {
	return _HostioTest.Contract.ContractAddress(&_HostioTest.CallOpts)
}

// EvmGasLeft is a free data retrieval call binding the contract method 0x28ed15d5.
//
// Solidity: function evmGasLeft() view returns(uint256)
func (_HostioTest *HostioTestCaller) EvmGasLeft(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _HostioTest.contract.Call(opts, &out, "evmGasLeft")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// EvmGasLeft is a free data retrieval call binding the contract method 0x28ed15d5.
//
// Solidity: function evmGasLeft() view returns(uint256)
func (_HostioTest *HostioTestSession) EvmGasLeft() (*big.Int, error) {
	return _HostioTest.Contract.EvmGasLeft(&_HostioTest.CallOpts)
}

// EvmGasLeft is a free data retrieval call binding the contract method 0x28ed15d5.
//
// Solidity: function evmGasLeft() view returns(uint256)
func (_HostioTest *HostioTestCallerSession) EvmGasLeft() (*big.Int, error) {
	return _HostioTest.Contract.EvmGasLeft(&_HostioTest.CallOpts)
}

// EvmInkLeft is a free data retrieval call binding the contract method 0x2dc26516.
//
// Solidity: function evmInkLeft() view returns(uint256)
func (_HostioTest *HostioTestCaller) EvmInkLeft(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _HostioTest.contract.Call(opts, &out, "evmInkLeft")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// EvmInkLeft is a free data retrieval call binding the contract method 0x2dc26516.
//
// Solidity: function evmInkLeft() view returns(uint256)
func (_HostioTest *HostioTestSession) EvmInkLeft() (*big.Int, error) {
	return _HostioTest.Contract.EvmInkLeft(&_HostioTest.CallOpts)
}

// EvmInkLeft is a free data retrieval call binding the contract method 0x2dc26516.
//
// Solidity: function evmInkLeft() view returns(uint256)
func (_HostioTest *HostioTestCallerSession) EvmInkLeft() (*big.Int, error) {
	return _HostioTest.Contract.EvmInkLeft(&_HostioTest.CallOpts)
}

// ExitEarly is a free data retrieval call binding the contract method 0xe6334eea.
//
// Solidity: function exitEarly() pure returns()
func (_HostioTest *HostioTestCaller) ExitEarly(opts *bind.CallOpts) error {
	var out []interface{}
	err := _HostioTest.contract.Call(opts, &out, "exitEarly")

	if err != nil {
		return err
	}

	return err

}

// ExitEarly is a free data retrieval call binding the contract method 0xe6334eea.
//
// Solidity: function exitEarly() pure returns()
func (_HostioTest *HostioTestSession) ExitEarly() error {
	return _HostioTest.Contract.ExitEarly(&_HostioTest.CallOpts)
}

// ExitEarly is a free data retrieval call binding the contract method 0xe6334eea.
//
// Solidity: function exitEarly() pure returns()
func (_HostioTest *HostioTestCallerSession) ExitEarly() error {
	return _HostioTest.Contract.ExitEarly(&_HostioTest.CallOpts)
}

// Keccak is a free data retrieval call binding the contract method 0x23fc7ef3.
//
// Solidity: function keccak(bytes preimage) pure returns(bytes32)
func (_HostioTest *HostioTestCaller) Keccak(opts *bind.CallOpts, preimage []byte) ([32]byte, error) {
	var out []interface{}
	err := _HostioTest.contract.Call(opts, &out, "keccak", preimage)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// Keccak is a free data retrieval call binding the contract method 0x23fc7ef3.
//
// Solidity: function keccak(bytes preimage) pure returns(bytes32)
func (_HostioTest *HostioTestSession) Keccak(preimage []byte) ([32]byte, error) {
	return _HostioTest.Contract.Keccak(&_HostioTest.CallOpts, preimage)
}

// Keccak is a free data retrieval call binding the contract method 0x23fc7ef3.
//
// Solidity: function keccak(bytes preimage) pure returns(bytes32)
func (_HostioTest *HostioTestCallerSession) Keccak(preimage []byte) ([32]byte, error) {
	return _HostioTest.Contract.Keccak(&_HostioTest.CallOpts, preimage)
}

// MathAddMod is a free data retrieval call binding the contract method 0xa83ede1c.
//
// Solidity: function mathAddMod(uint256 a, uint256 b, uint256 c) pure returns(uint256)
func (_HostioTest *HostioTestCaller) MathAddMod(opts *bind.CallOpts, a *big.Int, b *big.Int, c *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _HostioTest.contract.Call(opts, &out, "mathAddMod", a, b, c)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MathAddMod is a free data retrieval call binding the contract method 0xa83ede1c.
//
// Solidity: function mathAddMod(uint256 a, uint256 b, uint256 c) pure returns(uint256)
func (_HostioTest *HostioTestSession) MathAddMod(a *big.Int, b *big.Int, c *big.Int) (*big.Int, error) {
	return _HostioTest.Contract.MathAddMod(&_HostioTest.CallOpts, a, b, c)
}

// MathAddMod is a free data retrieval call binding the contract method 0xa83ede1c.
//
// Solidity: function mathAddMod(uint256 a, uint256 b, uint256 c) pure returns(uint256)
func (_HostioTest *HostioTestCallerSession) MathAddMod(a *big.Int, b *big.Int, c *big.Int) (*big.Int, error) {
	return _HostioTest.Contract.MathAddMod(&_HostioTest.CallOpts, a, b, c)
}

// MathDiv is a free data retrieval call binding the contract method 0x7c6aa466.
//
// Solidity: function mathDiv(uint256 a, uint256 b) pure returns(uint256)
func (_HostioTest *HostioTestCaller) MathDiv(opts *bind.CallOpts, a *big.Int, b *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _HostioTest.contract.Call(opts, &out, "mathDiv", a, b)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MathDiv is a free data retrieval call binding the contract method 0x7c6aa466.
//
// Solidity: function mathDiv(uint256 a, uint256 b) pure returns(uint256)
func (_HostioTest *HostioTestSession) MathDiv(a *big.Int, b *big.Int) (*big.Int, error) {
	return _HostioTest.Contract.MathDiv(&_HostioTest.CallOpts, a, b)
}

// MathDiv is a free data retrieval call binding the contract method 0x7c6aa466.
//
// Solidity: function mathDiv(uint256 a, uint256 b) pure returns(uint256)
func (_HostioTest *HostioTestCallerSession) MathDiv(a *big.Int, b *big.Int) (*big.Int, error) {
	return _HostioTest.Contract.MathDiv(&_HostioTest.CallOpts, a, b)
}

// MathMod is a free data retrieval call binding the contract method 0xf7be3e8d.
//
// Solidity: function mathMod(uint256 a, uint256 b) pure returns(uint256)
func (_HostioTest *HostioTestCaller) MathMod(opts *bind.CallOpts, a *big.Int, b *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _HostioTest.contract.Call(opts, &out, "mathMod", a, b)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MathMod is a free data retrieval call binding the contract method 0xf7be3e8d.
//
// Solidity: function mathMod(uint256 a, uint256 b) pure returns(uint256)
func (_HostioTest *HostioTestSession) MathMod(a *big.Int, b *big.Int) (*big.Int, error) {
	return _HostioTest.Contract.MathMod(&_HostioTest.CallOpts, a, b)
}

// MathMod is a free data retrieval call binding the contract method 0xf7be3e8d.
//
// Solidity: function mathMod(uint256 a, uint256 b) pure returns(uint256)
func (_HostioTest *HostioTestCallerSession) MathMod(a *big.Int, b *big.Int) (*big.Int, error) {
	return _HostioTest.Contract.MathMod(&_HostioTest.CallOpts, a, b)
}

// MathMulMod is a free data retrieval call binding the contract method 0x131260d0.
//
// Solidity: function mathMulMod(uint256 a, uint256 b, uint256 c) pure returns(uint256)
func (_HostioTest *HostioTestCaller) MathMulMod(opts *bind.CallOpts, a *big.Int, b *big.Int, c *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _HostioTest.contract.Call(opts, &out, "mathMulMod", a, b, c)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MathMulMod is a free data retrieval call binding the contract method 0x131260d0.
//
// Solidity: function mathMulMod(uint256 a, uint256 b, uint256 c) pure returns(uint256)
func (_HostioTest *HostioTestSession) MathMulMod(a *big.Int, b *big.Int, c *big.Int) (*big.Int, error) {
	return _HostioTest.Contract.MathMulMod(&_HostioTest.CallOpts, a, b, c)
}

// MathMulMod is a free data retrieval call binding the contract method 0x131260d0.
//
// Solidity: function mathMulMod(uint256 a, uint256 b, uint256 c) pure returns(uint256)
func (_HostioTest *HostioTestCallerSession) MathMulMod(a *big.Int, b *big.Int, c *big.Int) (*big.Int, error) {
	return _HostioTest.Contract.MathMulMod(&_HostioTest.CallOpts, a, b, c)
}

// MathPow is a free data retrieval call binding the contract method 0x89995319.
//
// Solidity: function mathPow(uint256 a, uint256 b) pure returns(uint256)
func (_HostioTest *HostioTestCaller) MathPow(opts *bind.CallOpts, a *big.Int, b *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _HostioTest.contract.Call(opts, &out, "mathPow", a, b)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MathPow is a free data retrieval call binding the contract method 0x89995319.
//
// Solidity: function mathPow(uint256 a, uint256 b) pure returns(uint256)
func (_HostioTest *HostioTestSession) MathPow(a *big.Int, b *big.Int) (*big.Int, error) {
	return _HostioTest.Contract.MathPow(&_HostioTest.CallOpts, a, b)
}

// MathPow is a free data retrieval call binding the contract method 0x89995319.
//
// Solidity: function mathPow(uint256 a, uint256 b) pure returns(uint256)
func (_HostioTest *HostioTestCallerSession) MathPow(a *big.Int, b *big.Int) (*big.Int, error) {
	return _HostioTest.Contract.MathPow(&_HostioTest.CallOpts, a, b)
}

// MsgSender is a free data retrieval call binding the contract method 0xd737d0c7.
//
// Solidity: function msgSender() view returns(address)
func (_HostioTest *HostioTestCaller) MsgSender(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _HostioTest.contract.Call(opts, &out, "msgSender")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// MsgSender is a free data retrieval call binding the contract method 0xd737d0c7.
//
// Solidity: function msgSender() view returns(address)
func (_HostioTest *HostioTestSession) MsgSender() (common.Address, error) {
	return _HostioTest.Contract.MsgSender(&_HostioTest.CallOpts)
}

// MsgSender is a free data retrieval call binding the contract method 0xd737d0c7.
//
// Solidity: function msgSender() view returns(address)
func (_HostioTest *HostioTestCallerSession) MsgSender() (common.Address, error) {
	return _HostioTest.Contract.MsgSender(&_HostioTest.CallOpts)
}

// ReturnDataSize is a free data retrieval call binding the contract method 0x860e6199.
//
// Solidity: function returnDataSize() pure returns(uint256)
func (_HostioTest *HostioTestCaller) ReturnDataSize(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _HostioTest.contract.Call(opts, &out, "returnDataSize")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ReturnDataSize is a free data retrieval call binding the contract method 0x860e6199.
//
// Solidity: function returnDataSize() pure returns(uint256)
func (_HostioTest *HostioTestSession) ReturnDataSize() (*big.Int, error) {
	return _HostioTest.Contract.ReturnDataSize(&_HostioTest.CallOpts)
}

// ReturnDataSize is a free data retrieval call binding the contract method 0x860e6199.
//
// Solidity: function returnDataSize() pure returns(uint256)
func (_HostioTest *HostioTestCallerSession) ReturnDataSize() (*big.Int, error) {
	return _HostioTest.Contract.ReturnDataSize(&_HostioTest.CallOpts)
}

// TransientLoadBytes32 is a free data retrieval call binding the contract method 0x9c16cfe8.
//
// Solidity: function transientLoadBytes32(bytes32 key) view returns(bytes32)
func (_HostioTest *HostioTestCaller) TransientLoadBytes32(opts *bind.CallOpts, key [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _HostioTest.contract.Call(opts, &out, "transientLoadBytes32", key)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// TransientLoadBytes32 is a free data retrieval call binding the contract method 0x9c16cfe8.
//
// Solidity: function transientLoadBytes32(bytes32 key) view returns(bytes32)
func (_HostioTest *HostioTestSession) TransientLoadBytes32(key [32]byte) ([32]byte, error) {
	return _HostioTest.Contract.TransientLoadBytes32(&_HostioTest.CallOpts, key)
}

// TransientLoadBytes32 is a free data retrieval call binding the contract method 0x9c16cfe8.
//
// Solidity: function transientLoadBytes32(bytes32 key) view returns(bytes32)
func (_HostioTest *HostioTestCallerSession) TransientLoadBytes32(key [32]byte) ([32]byte, error) {
	return _HostioTest.Contract.TransientLoadBytes32(&_HostioTest.CallOpts, key)
}

// TxGasPrice is a free data retrieval call binding the contract method 0x534ca054.
//
// Solidity: function txGasPrice() view returns(uint256)
func (_HostioTest *HostioTestCaller) TxGasPrice(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _HostioTest.contract.Call(opts, &out, "txGasPrice")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TxGasPrice is a free data retrieval call binding the contract method 0x534ca054.
//
// Solidity: function txGasPrice() view returns(uint256)
func (_HostioTest *HostioTestSession) TxGasPrice() (*big.Int, error) {
	return _HostioTest.Contract.TxGasPrice(&_HostioTest.CallOpts)
}

// TxGasPrice is a free data retrieval call binding the contract method 0x534ca054.
//
// Solidity: function txGasPrice() view returns(uint256)
func (_HostioTest *HostioTestCallerSession) TxGasPrice() (*big.Int, error) {
	return _HostioTest.Contract.TxGasPrice(&_HostioTest.CallOpts)
}

// TxInkPrice is a free data retrieval call binding the contract method 0x7d006296.
//
// Solidity: function txInkPrice() view returns(uint256)
func (_HostioTest *HostioTestCaller) TxInkPrice(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _HostioTest.contract.Call(opts, &out, "txInkPrice")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TxInkPrice is a free data retrieval call binding the contract method 0x7d006296.
//
// Solidity: function txInkPrice() view returns(uint256)
func (_HostioTest *HostioTestSession) TxInkPrice() (*big.Int, error) {
	return _HostioTest.Contract.TxInkPrice(&_HostioTest.CallOpts)
}

// TxInkPrice is a free data retrieval call binding the contract method 0x7d006296.
//
// Solidity: function txInkPrice() view returns(uint256)
func (_HostioTest *HostioTestCallerSession) TxInkPrice() (*big.Int, error) {
	return _HostioTest.Contract.TxInkPrice(&_HostioTest.CallOpts)
}

// TxOrigin is a free data retrieval call binding the contract method 0xf96757d1.
//
// Solidity: function txOrigin() view returns(address)
func (_HostioTest *HostioTestCaller) TxOrigin(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _HostioTest.contract.Call(opts, &out, "txOrigin")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// TxOrigin is a free data retrieval call binding the contract method 0xf96757d1.
//
// Solidity: function txOrigin() view returns(address)
func (_HostioTest *HostioTestSession) TxOrigin() (common.Address, error) {
	return _HostioTest.Contract.TxOrigin(&_HostioTest.CallOpts)
}

// TxOrigin is a free data retrieval call binding the contract method 0xf96757d1.
//
// Solidity: function txOrigin() view returns(address)
func (_HostioTest *HostioTestCallerSession) TxOrigin() (common.Address, error) {
	return _HostioTest.Contract.TxOrigin(&_HostioTest.CallOpts)
}

// EmitLog is a paid mutator transaction binding the contract method 0x6417b4d5.
//
// Solidity: function emitLog(bytes _data, int8 n, bytes32 t1, bytes32 t2, bytes32 t3, bytes32 t4) returns()
func (_HostioTest *HostioTestTransactor) EmitLog(opts *bind.TransactOpts, _data []byte, n int8, t1 [32]byte, t2 [32]byte, t3 [32]byte, t4 [32]byte) (*types.Transaction, error) {
	return _HostioTest.contract.Transact(opts, "emitLog", _data, n, t1, t2, t3, t4)
}

// EmitLog is a paid mutator transaction binding the contract method 0x6417b4d5.
//
// Solidity: function emitLog(bytes _data, int8 n, bytes32 t1, bytes32 t2, bytes32 t3, bytes32 t4) returns()
func (_HostioTest *HostioTestSession) EmitLog(_data []byte, n int8, t1 [32]byte, t2 [32]byte, t3 [32]byte, t4 [32]byte) (*types.Transaction, error) {
	return _HostioTest.Contract.EmitLog(&_HostioTest.TransactOpts, _data, n, t1, t2, t3, t4)
}

// EmitLog is a paid mutator transaction binding the contract method 0x6417b4d5.
//
// Solidity: function emitLog(bytes _data, int8 n, bytes32 t1, bytes32 t2, bytes32 t3, bytes32 t4) returns()
func (_HostioTest *HostioTestTransactorSession) EmitLog(_data []byte, n int8, t1 [32]byte, t2 [32]byte, t3 [32]byte, t4 [32]byte) (*types.Transaction, error) {
	return _HostioTest.Contract.EmitLog(&_HostioTest.TransactOpts, _data, n, t1, t2, t3, t4)
}

// MsgValue is a paid mutator transaction binding the contract method 0xddf363d7.
//
// Solidity: function msgValue() payable returns(uint256)
func (_HostioTest *HostioTestTransactor) MsgValue(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _HostioTest.contract.Transact(opts, "msgValue")
}

// MsgValue is a paid mutator transaction binding the contract method 0xddf363d7.
//
// Solidity: function msgValue() payable returns(uint256)
func (_HostioTest *HostioTestSession) MsgValue() (*types.Transaction, error) {
	return _HostioTest.Contract.MsgValue(&_HostioTest.TransactOpts)
}

// MsgValue is a paid mutator transaction binding the contract method 0xddf363d7.
//
// Solidity: function msgValue() payable returns(uint256)
func (_HostioTest *HostioTestTransactorSession) MsgValue() (*types.Transaction, error) {
	return _HostioTest.Contract.MsgValue(&_HostioTest.TransactOpts)
}

// TransientStoreBytes32 is a paid mutator transaction binding the contract method 0x34eb2d6b.
//
// Solidity: function transientStoreBytes32(bytes32 key, bytes32 value) returns()
func (_HostioTest *HostioTestTransactor) TransientStoreBytes32(opts *bind.TransactOpts, key [32]byte, value [32]byte) (*types.Transaction, error) {
	return _HostioTest.contract.Transact(opts, "transientStoreBytes32", key, value)
}

// TransientStoreBytes32 is a paid mutator transaction binding the contract method 0x34eb2d6b.
//
// Solidity: function transientStoreBytes32(bytes32 key, bytes32 value) returns()
func (_HostioTest *HostioTestSession) TransientStoreBytes32(key [32]byte, value [32]byte) (*types.Transaction, error) {
	return _HostioTest.Contract.TransientStoreBytes32(&_HostioTest.TransactOpts, key, value)
}

// TransientStoreBytes32 is a paid mutator transaction binding the contract method 0x34eb2d6b.
//
// Solidity: function transientStoreBytes32(bytes32 key, bytes32 value) returns()
func (_HostioTest *HostioTestTransactorSession) TransientStoreBytes32(key [32]byte, value [32]byte) (*types.Transaction, error) {
	return _HostioTest.Contract.TransientStoreBytes32(&_HostioTest.TransactOpts, key, value)
}

// IBeaconMetaData contains all meta data concerning the IBeacon contract.
var IBeaconMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
}

// IBeaconABI is the input ABI used to generate the binding from.
// Deprecated: Use IBeaconMetaData.ABI instead.
var IBeaconABI = IBeaconMetaData.ABI

// IBeacon is an auto generated Go binding around an Ethereum contract.
type IBeacon struct {
	IBeaconCaller     // Read-only binding to the contract
	IBeaconTransactor // Write-only binding to the contract
	IBeaconFilterer   // Log filterer for contract events
}

// IBeaconCaller is an auto generated read-only Go binding around an Ethereum contract.
type IBeaconCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IBeaconTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IBeaconTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IBeaconFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IBeaconFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IBeaconSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IBeaconSession struct {
	Contract     *IBeacon          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IBeaconCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IBeaconCallerSession struct {
	Contract *IBeaconCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// IBeaconTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IBeaconTransactorSession struct {
	Contract     *IBeaconTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// IBeaconRaw is an auto generated low-level Go binding around an Ethereum contract.
type IBeaconRaw struct {
	Contract *IBeacon // Generic contract binding to access the raw methods on
}

// IBeaconCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IBeaconCallerRaw struct {
	Contract *IBeaconCaller // Generic read-only contract binding to access the raw methods on
}

// IBeaconTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IBeaconTransactorRaw struct {
	Contract *IBeaconTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIBeacon creates a new instance of IBeacon, bound to a specific deployed contract.
func NewIBeacon(address common.Address, backend bind.ContractBackend) (*IBeacon, error) {
	contract, err := bindIBeacon(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IBeacon{IBeaconCaller: IBeaconCaller{contract: contract}, IBeaconTransactor: IBeaconTransactor{contract: contract}, IBeaconFilterer: IBeaconFilterer{contract: contract}}, nil
}

// NewIBeaconCaller creates a new read-only instance of IBeacon, bound to a specific deployed contract.
func NewIBeaconCaller(address common.Address, caller bind.ContractCaller) (*IBeaconCaller, error) {
	contract, err := bindIBeacon(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IBeaconCaller{contract: contract}, nil
}

// NewIBeaconTransactor creates a new write-only instance of IBeacon, bound to a specific deployed contract.
func NewIBeaconTransactor(address common.Address, transactor bind.ContractTransactor) (*IBeaconTransactor, error) {
	contract, err := bindIBeacon(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IBeaconTransactor{contract: contract}, nil
}

// NewIBeaconFilterer creates a new log filterer instance of IBeacon, bound to a specific deployed contract.
func NewIBeaconFilterer(address common.Address, filterer bind.ContractFilterer) (*IBeaconFilterer, error) {
	contract, err := bindIBeacon(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IBeaconFilterer{contract: contract}, nil
}

// bindIBeacon binds a generic wrapper to an already deployed contract.
func bindIBeacon(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := IBeaconMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IBeacon *IBeaconRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IBeacon.Contract.IBeaconCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IBeacon *IBeaconRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IBeacon.Contract.IBeaconTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IBeacon *IBeaconRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IBeacon.Contract.IBeaconTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IBeacon *IBeaconCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IBeacon.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IBeacon *IBeaconTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IBeacon.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IBeacon *IBeaconTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IBeacon.Contract.contract.Transact(opts, method, params...)
}

// Implementation is a free data retrieval call binding the contract method 0x5c60da1b.
//
// Solidity: function implementation() view returns(address)
func (_IBeacon *IBeaconCaller) Implementation(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IBeacon.contract.Call(opts, &out, "implementation")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Implementation is a free data retrieval call binding the contract method 0x5c60da1b.
//
// Solidity: function implementation() view returns(address)
func (_IBeacon *IBeaconSession) Implementation() (common.Address, error) {
	return _IBeacon.Contract.Implementation(&_IBeacon.CallOpts)
}

// Implementation is a free data retrieval call binding the contract method 0x5c60da1b.
//
// Solidity: function implementation() view returns(address)
func (_IBeacon *IBeaconCallerSession) Implementation() (common.Address, error) {
	return _IBeacon.Contract.Implementation(&_IBeacon.CallOpts)
}

// IERC1822ProxiableMetaData contains all meta data concerning the IERC1822Proxiable contract.
var IERC1822ProxiableMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
}

// IERC1822ProxiableABI is the input ABI used to generate the binding from.
// Deprecated: Use IERC1822ProxiableMetaData.ABI instead.
var IERC1822ProxiableABI = IERC1822ProxiableMetaData.ABI

// IERC1822Proxiable is an auto generated Go binding around an Ethereum contract.
type IERC1822Proxiable struct {
	IERC1822ProxiableCaller     // Read-only binding to the contract
	IERC1822ProxiableTransactor // Write-only binding to the contract
	IERC1822ProxiableFilterer   // Log filterer for contract events
}

// IERC1822ProxiableCaller is an auto generated read-only Go binding around an Ethereum contract.
type IERC1822ProxiableCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC1822ProxiableTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IERC1822ProxiableTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC1822ProxiableFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IERC1822ProxiableFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC1822ProxiableSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IERC1822ProxiableSession struct {
	Contract     *IERC1822Proxiable // Generic contract binding to set the session for
	CallOpts     bind.CallOpts      // Call options to use throughout this session
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// IERC1822ProxiableCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IERC1822ProxiableCallerSession struct {
	Contract *IERC1822ProxiableCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts            // Call options to use throughout this session
}

// IERC1822ProxiableTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IERC1822ProxiableTransactorSession struct {
	Contract     *IERC1822ProxiableTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts            // Transaction auth options to use throughout this session
}

// IERC1822ProxiableRaw is an auto generated low-level Go binding around an Ethereum contract.
type IERC1822ProxiableRaw struct {
	Contract *IERC1822Proxiable // Generic contract binding to access the raw methods on
}

// IERC1822ProxiableCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IERC1822ProxiableCallerRaw struct {
	Contract *IERC1822ProxiableCaller // Generic read-only contract binding to access the raw methods on
}

// IERC1822ProxiableTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IERC1822ProxiableTransactorRaw struct {
	Contract *IERC1822ProxiableTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIERC1822Proxiable creates a new instance of IERC1822Proxiable, bound to a specific deployed contract.
func NewIERC1822Proxiable(address common.Address, backend bind.ContractBackend) (*IERC1822Proxiable, error) {
	contract, err := bindIERC1822Proxiable(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IERC1822Proxiable{IERC1822ProxiableCaller: IERC1822ProxiableCaller{contract: contract}, IERC1822ProxiableTransactor: IERC1822ProxiableTransactor{contract: contract}, IERC1822ProxiableFilterer: IERC1822ProxiableFilterer{contract: contract}}, nil
}

// NewIERC1822ProxiableCaller creates a new read-only instance of IERC1822Proxiable, bound to a specific deployed contract.
func NewIERC1822ProxiableCaller(address common.Address, caller bind.ContractCaller) (*IERC1822ProxiableCaller, error) {
	contract, err := bindIERC1822Proxiable(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IERC1822ProxiableCaller{contract: contract}, nil
}

// NewIERC1822ProxiableTransactor creates a new write-only instance of IERC1822Proxiable, bound to a specific deployed contract.
func NewIERC1822ProxiableTransactor(address common.Address, transactor bind.ContractTransactor) (*IERC1822ProxiableTransactor, error) {
	contract, err := bindIERC1822Proxiable(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IERC1822ProxiableTransactor{contract: contract}, nil
}

// NewIERC1822ProxiableFilterer creates a new log filterer instance of IERC1822Proxiable, bound to a specific deployed contract.
func NewIERC1822ProxiableFilterer(address common.Address, filterer bind.ContractFilterer) (*IERC1822ProxiableFilterer, error) {
	contract, err := bindIERC1822Proxiable(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IERC1822ProxiableFilterer{contract: contract}, nil
}

// bindIERC1822Proxiable binds a generic wrapper to an already deployed contract.
func bindIERC1822Proxiable(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := IERC1822ProxiableMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC1822Proxiable *IERC1822ProxiableRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC1822Proxiable.Contract.IERC1822ProxiableCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC1822Proxiable *IERC1822ProxiableRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC1822Proxiable.Contract.IERC1822ProxiableTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC1822Proxiable *IERC1822ProxiableRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC1822Proxiable.Contract.IERC1822ProxiableTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC1822Proxiable *IERC1822ProxiableCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC1822Proxiable.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC1822Proxiable *IERC1822ProxiableTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC1822Proxiable.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC1822Proxiable *IERC1822ProxiableTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC1822Proxiable.Contract.contract.Transact(opts, method, params...)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_IERC1822Proxiable *IERC1822ProxiableCaller) ProxiableUUID(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _IERC1822Proxiable.contract.Call(opts, &out, "proxiableUUID")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_IERC1822Proxiable *IERC1822ProxiableSession) ProxiableUUID() ([32]byte, error) {
	return _IERC1822Proxiable.Contract.ProxiableUUID(&_IERC1822Proxiable.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_IERC1822Proxiable *IERC1822ProxiableCallerSession) ProxiableUUID() ([32]byte, error) {
	return _IERC1822Proxiable.Contract.ProxiableUUID(&_IERC1822Proxiable.CallOpts)
}

// IERC20MetaData contains all meta data concerning the IERC20 contract.
var IERC20MetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
}

// IERC20ABI is the input ABI used to generate the binding from.
// Deprecated: Use IERC20MetaData.ABI instead.
var IERC20ABI = IERC20MetaData.ABI

// IERC20 is an auto generated Go binding around an Ethereum contract.
type IERC20 struct {
	IERC20Caller     // Read-only binding to the contract
	IERC20Transactor // Write-only binding to the contract
	IERC20Filterer   // Log filterer for contract events
}

// IERC20Caller is an auto generated read-only Go binding around an Ethereum contract.
type IERC20Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC20Transactor is an auto generated write-only Go binding around an Ethereum contract.
type IERC20Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC20Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IERC20Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC20Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IERC20Session struct {
	Contract     *IERC20           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IERC20CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IERC20CallerSession struct {
	Contract *IERC20Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// IERC20TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IERC20TransactorSession struct {
	Contract     *IERC20Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IERC20Raw is an auto generated low-level Go binding around an Ethereum contract.
type IERC20Raw struct {
	Contract *IERC20 // Generic contract binding to access the raw methods on
}

// IERC20CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IERC20CallerRaw struct {
	Contract *IERC20Caller // Generic read-only contract binding to access the raw methods on
}

// IERC20TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IERC20TransactorRaw struct {
	Contract *IERC20Transactor // Generic write-only contract binding to access the raw methods on
}

// NewIERC20 creates a new instance of IERC20, bound to a specific deployed contract.
func NewIERC20(address common.Address, backend bind.ContractBackend) (*IERC20, error) {
	contract, err := bindIERC20(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IERC20{IERC20Caller: IERC20Caller{contract: contract}, IERC20Transactor: IERC20Transactor{contract: contract}, IERC20Filterer: IERC20Filterer{contract: contract}}, nil
}

// NewIERC20Caller creates a new read-only instance of IERC20, bound to a specific deployed contract.
func NewIERC20Caller(address common.Address, caller bind.ContractCaller) (*IERC20Caller, error) {
	contract, err := bindIERC20(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IERC20Caller{contract: contract}, nil
}

// NewIERC20Transactor creates a new write-only instance of IERC20, bound to a specific deployed contract.
func NewIERC20Transactor(address common.Address, transactor bind.ContractTransactor) (*IERC20Transactor, error) {
	contract, err := bindIERC20(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IERC20Transactor{contract: contract}, nil
}

// NewIERC20Filterer creates a new log filterer instance of IERC20, bound to a specific deployed contract.
func NewIERC20Filterer(address common.Address, filterer bind.ContractFilterer) (*IERC20Filterer, error) {
	contract, err := bindIERC20(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IERC20Filterer{contract: contract}, nil
}

// bindIERC20 binds a generic wrapper to an already deployed contract.
func bindIERC20(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := IERC20MetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC20 *IERC20Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC20.Contract.IERC20Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC20 *IERC20Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC20.Contract.IERC20Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC20 *IERC20Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC20.Contract.IERC20Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC20 *IERC20CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC20.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC20 *IERC20TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC20.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC20 *IERC20TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC20.Contract.contract.Transact(opts, method, params...)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_IERC20 *IERC20Caller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IERC20.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_IERC20 *IERC20Session) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _IERC20.Contract.Allowance(&_IERC20.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_IERC20 *IERC20CallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _IERC20.Contract.Allowance(&_IERC20.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_IERC20 *IERC20Caller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IERC20.contract.Call(opts, &out, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_IERC20 *IERC20Session) BalanceOf(account common.Address) (*big.Int, error) {
	return _IERC20.Contract.BalanceOf(&_IERC20.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_IERC20 *IERC20CallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _IERC20.Contract.BalanceOf(&_IERC20.CallOpts, account)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_IERC20 *IERC20Caller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IERC20.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_IERC20 *IERC20Session) TotalSupply() (*big.Int, error) {
	return _IERC20.Contract.TotalSupply(&_IERC20.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_IERC20 *IERC20CallerSession) TotalSupply() (*big.Int, error) {
	return _IERC20.Contract.TotalSupply(&_IERC20.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_IERC20 *IERC20Transactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_IERC20 *IERC20Session) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20.Contract.Approve(&_IERC20.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_IERC20 *IERC20TransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20.Contract.Approve(&_IERC20.TransactOpts, spender, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_IERC20 *IERC20Transactor) Transfer(opts *bind.TransactOpts, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20.contract.Transact(opts, "transfer", to, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_IERC20 *IERC20Session) Transfer(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20.Contract.Transfer(&_IERC20.TransactOpts, to, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_IERC20 *IERC20TransactorSession) Transfer(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20.Contract.Transfer(&_IERC20.TransactOpts, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_IERC20 *IERC20Transactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20.contract.Transact(opts, "transferFrom", from, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_IERC20 *IERC20Session) TransferFrom(from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20.Contract.TransferFrom(&_IERC20.TransactOpts, from, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_IERC20 *IERC20TransactorSession) TransferFrom(from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20.Contract.TransferFrom(&_IERC20.TransactOpts, from, to, amount)
}

// IERC20ApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the IERC20 contract.
type IERC20ApprovalIterator struct {
	Event *IERC20Approval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IERC20ApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IERC20Approval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IERC20Approval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IERC20ApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IERC20ApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IERC20Approval represents a Approval event raised by the IERC20 contract.
type IERC20Approval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_IERC20 *IERC20Filterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*IERC20ApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _IERC20.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &IERC20ApprovalIterator{contract: _IERC20.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_IERC20 *IERC20Filterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *IERC20Approval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _IERC20.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IERC20Approval)
				if err := _IERC20.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_IERC20 *IERC20Filterer) ParseApproval(log types.Log) (*IERC20Approval, error) {
	event := new(IERC20Approval)
	if err := _IERC20.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IERC20TransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the IERC20 contract.
type IERC20TransferIterator struct {
	Event *IERC20Transfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IERC20TransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IERC20Transfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IERC20Transfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IERC20TransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IERC20TransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IERC20Transfer represents a Transfer event raised by the IERC20 contract.
type IERC20Transfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_IERC20 *IERC20Filterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*IERC20TransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _IERC20.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &IERC20TransferIterator{contract: _IERC20.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_IERC20 *IERC20Filterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *IERC20Transfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _IERC20.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IERC20Transfer)
				if err := _IERC20.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_IERC20 *IERC20Filterer) ParseTransfer(log types.Log) (*IERC20Transfer, error) {
	event := new(IERC20Transfer)
	if err := _IERC20.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IERC20MetadataMetaData contains all meta data concerning the IERC20Metadata contract.
var IERC20MetadataMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
}

// IERC20MetadataABI is the input ABI used to generate the binding from.
// Deprecated: Use IERC20MetadataMetaData.ABI instead.
var IERC20MetadataABI = IERC20MetadataMetaData.ABI

// IERC20Metadata is an auto generated Go binding around an Ethereum contract.
type IERC20Metadata struct {
	IERC20MetadataCaller     // Read-only binding to the contract
	IERC20MetadataTransactor // Write-only binding to the contract
	IERC20MetadataFilterer   // Log filterer for contract events
}

// IERC20MetadataCaller is an auto generated read-only Go binding around an Ethereum contract.
type IERC20MetadataCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC20MetadataTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IERC20MetadataTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC20MetadataFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IERC20MetadataFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC20MetadataSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IERC20MetadataSession struct {
	Contract     *IERC20Metadata   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IERC20MetadataCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IERC20MetadataCallerSession struct {
	Contract *IERC20MetadataCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// IERC20MetadataTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IERC20MetadataTransactorSession struct {
	Contract     *IERC20MetadataTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// IERC20MetadataRaw is an auto generated low-level Go binding around an Ethereum contract.
type IERC20MetadataRaw struct {
	Contract *IERC20Metadata // Generic contract binding to access the raw methods on
}

// IERC20MetadataCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IERC20MetadataCallerRaw struct {
	Contract *IERC20MetadataCaller // Generic read-only contract binding to access the raw methods on
}

// IERC20MetadataTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IERC20MetadataTransactorRaw struct {
	Contract *IERC20MetadataTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIERC20Metadata creates a new instance of IERC20Metadata, bound to a specific deployed contract.
func NewIERC20Metadata(address common.Address, backend bind.ContractBackend) (*IERC20Metadata, error) {
	contract, err := bindIERC20Metadata(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IERC20Metadata{IERC20MetadataCaller: IERC20MetadataCaller{contract: contract}, IERC20MetadataTransactor: IERC20MetadataTransactor{contract: contract}, IERC20MetadataFilterer: IERC20MetadataFilterer{contract: contract}}, nil
}

// NewIERC20MetadataCaller creates a new read-only instance of IERC20Metadata, bound to a specific deployed contract.
func NewIERC20MetadataCaller(address common.Address, caller bind.ContractCaller) (*IERC20MetadataCaller, error) {
	contract, err := bindIERC20Metadata(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IERC20MetadataCaller{contract: contract}, nil
}

// NewIERC20MetadataTransactor creates a new write-only instance of IERC20Metadata, bound to a specific deployed contract.
func NewIERC20MetadataTransactor(address common.Address, transactor bind.ContractTransactor) (*IERC20MetadataTransactor, error) {
	contract, err := bindIERC20Metadata(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IERC20MetadataTransactor{contract: contract}, nil
}

// NewIERC20MetadataFilterer creates a new log filterer instance of IERC20Metadata, bound to a specific deployed contract.
func NewIERC20MetadataFilterer(address common.Address, filterer bind.ContractFilterer) (*IERC20MetadataFilterer, error) {
	contract, err := bindIERC20Metadata(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IERC20MetadataFilterer{contract: contract}, nil
}

// bindIERC20Metadata binds a generic wrapper to an already deployed contract.
func bindIERC20Metadata(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := IERC20MetadataMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC20Metadata *IERC20MetadataRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC20Metadata.Contract.IERC20MetadataCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC20Metadata *IERC20MetadataRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC20Metadata.Contract.IERC20MetadataTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC20Metadata *IERC20MetadataRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC20Metadata.Contract.IERC20MetadataTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC20Metadata *IERC20MetadataCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC20Metadata.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC20Metadata *IERC20MetadataTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC20Metadata.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC20Metadata *IERC20MetadataTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC20Metadata.Contract.contract.Transact(opts, method, params...)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_IERC20Metadata *IERC20MetadataCaller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IERC20Metadata.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_IERC20Metadata *IERC20MetadataSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _IERC20Metadata.Contract.Allowance(&_IERC20Metadata.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_IERC20Metadata *IERC20MetadataCallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _IERC20Metadata.Contract.Allowance(&_IERC20Metadata.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_IERC20Metadata *IERC20MetadataCaller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IERC20Metadata.contract.Call(opts, &out, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_IERC20Metadata *IERC20MetadataSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _IERC20Metadata.Contract.BalanceOf(&_IERC20Metadata.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_IERC20Metadata *IERC20MetadataCallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _IERC20Metadata.Contract.BalanceOf(&_IERC20Metadata.CallOpts, account)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_IERC20Metadata *IERC20MetadataCaller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _IERC20Metadata.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_IERC20Metadata *IERC20MetadataSession) Decimals() (uint8, error) {
	return _IERC20Metadata.Contract.Decimals(&_IERC20Metadata.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_IERC20Metadata *IERC20MetadataCallerSession) Decimals() (uint8, error) {
	return _IERC20Metadata.Contract.Decimals(&_IERC20Metadata.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_IERC20Metadata *IERC20MetadataCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _IERC20Metadata.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_IERC20Metadata *IERC20MetadataSession) Name() (string, error) {
	return _IERC20Metadata.Contract.Name(&_IERC20Metadata.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_IERC20Metadata *IERC20MetadataCallerSession) Name() (string, error) {
	return _IERC20Metadata.Contract.Name(&_IERC20Metadata.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_IERC20Metadata *IERC20MetadataCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _IERC20Metadata.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_IERC20Metadata *IERC20MetadataSession) Symbol() (string, error) {
	return _IERC20Metadata.Contract.Symbol(&_IERC20Metadata.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_IERC20Metadata *IERC20MetadataCallerSession) Symbol() (string, error) {
	return _IERC20Metadata.Contract.Symbol(&_IERC20Metadata.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_IERC20Metadata *IERC20MetadataCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IERC20Metadata.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_IERC20Metadata *IERC20MetadataSession) TotalSupply() (*big.Int, error) {
	return _IERC20Metadata.Contract.TotalSupply(&_IERC20Metadata.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_IERC20Metadata *IERC20MetadataCallerSession) TotalSupply() (*big.Int, error) {
	return _IERC20Metadata.Contract.TotalSupply(&_IERC20Metadata.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_IERC20Metadata *IERC20MetadataTransactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20Metadata.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_IERC20Metadata *IERC20MetadataSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20Metadata.Contract.Approve(&_IERC20Metadata.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_IERC20Metadata *IERC20MetadataTransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20Metadata.Contract.Approve(&_IERC20Metadata.TransactOpts, spender, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_IERC20Metadata *IERC20MetadataTransactor) Transfer(opts *bind.TransactOpts, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20Metadata.contract.Transact(opts, "transfer", to, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_IERC20Metadata *IERC20MetadataSession) Transfer(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20Metadata.Contract.Transfer(&_IERC20Metadata.TransactOpts, to, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_IERC20Metadata *IERC20MetadataTransactorSession) Transfer(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20Metadata.Contract.Transfer(&_IERC20Metadata.TransactOpts, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_IERC20Metadata *IERC20MetadataTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20Metadata.contract.Transact(opts, "transferFrom", from, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_IERC20Metadata *IERC20MetadataSession) TransferFrom(from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20Metadata.Contract.TransferFrom(&_IERC20Metadata.TransactOpts, from, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_IERC20Metadata *IERC20MetadataTransactorSession) TransferFrom(from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20Metadata.Contract.TransferFrom(&_IERC20Metadata.TransactOpts, from, to, amount)
}

// IERC20MetadataApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the IERC20Metadata contract.
type IERC20MetadataApprovalIterator struct {
	Event *IERC20MetadataApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IERC20MetadataApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IERC20MetadataApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IERC20MetadataApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IERC20MetadataApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IERC20MetadataApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IERC20MetadataApproval represents a Approval event raised by the IERC20Metadata contract.
type IERC20MetadataApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_IERC20Metadata *IERC20MetadataFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*IERC20MetadataApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _IERC20Metadata.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &IERC20MetadataApprovalIterator{contract: _IERC20Metadata.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_IERC20Metadata *IERC20MetadataFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *IERC20MetadataApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _IERC20Metadata.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IERC20MetadataApproval)
				if err := _IERC20Metadata.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_IERC20Metadata *IERC20MetadataFilterer) ParseApproval(log types.Log) (*IERC20MetadataApproval, error) {
	event := new(IERC20MetadataApproval)
	if err := _IERC20Metadata.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IERC20MetadataTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the IERC20Metadata contract.
type IERC20MetadataTransferIterator struct {
	Event *IERC20MetadataTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IERC20MetadataTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IERC20MetadataTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IERC20MetadataTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IERC20MetadataTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IERC20MetadataTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IERC20MetadataTransfer represents a Transfer event raised by the IERC20Metadata contract.
type IERC20MetadataTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_IERC20Metadata *IERC20MetadataFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*IERC20MetadataTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _IERC20Metadata.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &IERC20MetadataTransferIterator{contract: _IERC20Metadata.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_IERC20Metadata *IERC20MetadataFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *IERC20MetadataTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _IERC20Metadata.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IERC20MetadataTransfer)
				if err := _IERC20Metadata.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_IERC20Metadata *IERC20MetadataFilterer) ParseTransfer(log types.Log) (*IERC20MetadataTransfer, error) {
	event := new(IERC20MetadataTransfer)
	if err := _IERC20Metadata.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ISequencerInboxMetaData contains all meta data concerning the ISequencerInbox contract.
var ISequencerInboxMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sequenceNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"afterDelayedMessagesRead\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"gasRefunder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"prevMessageCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newMessageCount\",\"type\":\"uint256\"}],\"name\":\"addSequencerL2Batch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"batchCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDelayedMessagesRead\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
}

// ISequencerInboxABI is the input ABI used to generate the binding from.
// Deprecated: Use ISequencerInboxMetaData.ABI instead.
var ISequencerInboxABI = ISequencerInboxMetaData.ABI

// ISequencerInbox is an auto generated Go binding around an Ethereum contract.
type ISequencerInbox struct {
	ISequencerInboxCaller     // Read-only binding to the contract
	ISequencerInboxTransactor // Write-only binding to the contract
	ISequencerInboxFilterer   // Log filterer for contract events
}

// ISequencerInboxCaller is an auto generated read-only Go binding around an Ethereum contract.
type ISequencerInboxCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ISequencerInboxTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ISequencerInboxTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ISequencerInboxFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ISequencerInboxFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ISequencerInboxSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ISequencerInboxSession struct {
	Contract     *ISequencerInbox  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ISequencerInboxCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ISequencerInboxCallerSession struct {
	Contract *ISequencerInboxCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// ISequencerInboxTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ISequencerInboxTransactorSession struct {
	Contract     *ISequencerInboxTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// ISequencerInboxRaw is an auto generated low-level Go binding around an Ethereum contract.
type ISequencerInboxRaw struct {
	Contract *ISequencerInbox // Generic contract binding to access the raw methods on
}

// ISequencerInboxCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ISequencerInboxCallerRaw struct {
	Contract *ISequencerInboxCaller // Generic read-only contract binding to access the raw methods on
}

// ISequencerInboxTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ISequencerInboxTransactorRaw struct {
	Contract *ISequencerInboxTransactor // Generic write-only contract binding to access the raw methods on
}

// NewISequencerInbox creates a new instance of ISequencerInbox, bound to a specific deployed contract.
func NewISequencerInbox(address common.Address, backend bind.ContractBackend) (*ISequencerInbox, error) {
	contract, err := bindISequencerInbox(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ISequencerInbox{ISequencerInboxCaller: ISequencerInboxCaller{contract: contract}, ISequencerInboxTransactor: ISequencerInboxTransactor{contract: contract}, ISequencerInboxFilterer: ISequencerInboxFilterer{contract: contract}}, nil
}

// NewISequencerInboxCaller creates a new read-only instance of ISequencerInbox, bound to a specific deployed contract.
func NewISequencerInboxCaller(address common.Address, caller bind.ContractCaller) (*ISequencerInboxCaller, error) {
	contract, err := bindISequencerInbox(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ISequencerInboxCaller{contract: contract}, nil
}

// NewISequencerInboxTransactor creates a new write-only instance of ISequencerInbox, bound to a specific deployed contract.
func NewISequencerInboxTransactor(address common.Address, transactor bind.ContractTransactor) (*ISequencerInboxTransactor, error) {
	contract, err := bindISequencerInbox(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ISequencerInboxTransactor{contract: contract}, nil
}

// NewISequencerInboxFilterer creates a new log filterer instance of ISequencerInbox, bound to a specific deployed contract.
func NewISequencerInboxFilterer(address common.Address, filterer bind.ContractFilterer) (*ISequencerInboxFilterer, error) {
	contract, err := bindISequencerInbox(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ISequencerInboxFilterer{contract: contract}, nil
}

// bindISequencerInbox binds a generic wrapper to an already deployed contract.
func bindISequencerInbox(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ISequencerInboxMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ISequencerInbox *ISequencerInboxRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ISequencerInbox.Contract.ISequencerInboxCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ISequencerInbox *ISequencerInboxRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ISequencerInbox.Contract.ISequencerInboxTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ISequencerInbox *ISequencerInboxRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ISequencerInbox.Contract.ISequencerInboxTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ISequencerInbox *ISequencerInboxCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ISequencerInbox.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ISequencerInbox *ISequencerInboxTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ISequencerInbox.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ISequencerInbox *ISequencerInboxTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ISequencerInbox.Contract.contract.Transact(opts, method, params...)
}

// BatchCount is a free data retrieval call binding the contract method 0x06f13056.
//
// Solidity: function batchCount() view returns(uint256)
func (_ISequencerInbox *ISequencerInboxCaller) BatchCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ISequencerInbox.contract.Call(opts, &out, "batchCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BatchCount is a free data retrieval call binding the contract method 0x06f13056.
//
// Solidity: function batchCount() view returns(uint256)
func (_ISequencerInbox *ISequencerInboxSession) BatchCount() (*big.Int, error) {
	return _ISequencerInbox.Contract.BatchCount(&_ISequencerInbox.CallOpts)
}

// BatchCount is a free data retrieval call binding the contract method 0x06f13056.
//
// Solidity: function batchCount() view returns(uint256)
func (_ISequencerInbox *ISequencerInboxCallerSession) BatchCount() (*big.Int, error) {
	return _ISequencerInbox.Contract.BatchCount(&_ISequencerInbox.CallOpts)
}

// TotalDelayedMessagesRead is a free data retrieval call binding the contract method 0x7fa3a40e.
//
// Solidity: function totalDelayedMessagesRead() view returns(uint256)
func (_ISequencerInbox *ISequencerInboxCaller) TotalDelayedMessagesRead(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ISequencerInbox.contract.Call(opts, &out, "totalDelayedMessagesRead")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalDelayedMessagesRead is a free data retrieval call binding the contract method 0x7fa3a40e.
//
// Solidity: function totalDelayedMessagesRead() view returns(uint256)
func (_ISequencerInbox *ISequencerInboxSession) TotalDelayedMessagesRead() (*big.Int, error) {
	return _ISequencerInbox.Contract.TotalDelayedMessagesRead(&_ISequencerInbox.CallOpts)
}

// TotalDelayedMessagesRead is a free data retrieval call binding the contract method 0x7fa3a40e.
//
// Solidity: function totalDelayedMessagesRead() view returns(uint256)
func (_ISequencerInbox *ISequencerInboxCallerSession) TotalDelayedMessagesRead() (*big.Int, error) {
	return _ISequencerInbox.Contract.TotalDelayedMessagesRead(&_ISequencerInbox.CallOpts)
}

// AddSequencerL2Batch is a paid mutator transaction binding the contract method 0xe0bc9729.
//
// Solidity: function addSequencerL2Batch(uint256 sequenceNumber, bytes data, uint256 afterDelayedMessagesRead, address gasRefunder, uint256 prevMessageCount, uint256 newMessageCount) returns()
func (_ISequencerInbox *ISequencerInboxTransactor) AddSequencerL2Batch(opts *bind.TransactOpts, sequenceNumber *big.Int, data []byte, afterDelayedMessagesRead *big.Int, gasRefunder common.Address, prevMessageCount *big.Int, newMessageCount *big.Int) (*types.Transaction, error) {
	return _ISequencerInbox.contract.Transact(opts, "addSequencerL2Batch", sequenceNumber, data, afterDelayedMessagesRead, gasRefunder, prevMessageCount, newMessageCount)
}

// AddSequencerL2Batch is a paid mutator transaction binding the contract method 0xe0bc9729.
//
// Solidity: function addSequencerL2Batch(uint256 sequenceNumber, bytes data, uint256 afterDelayedMessagesRead, address gasRefunder, uint256 prevMessageCount, uint256 newMessageCount) returns()
func (_ISequencerInbox *ISequencerInboxSession) AddSequencerL2Batch(sequenceNumber *big.Int, data []byte, afterDelayedMessagesRead *big.Int, gasRefunder common.Address, prevMessageCount *big.Int, newMessageCount *big.Int) (*types.Transaction, error) {
	return _ISequencerInbox.Contract.AddSequencerL2Batch(&_ISequencerInbox.TransactOpts, sequenceNumber, data, afterDelayedMessagesRead, gasRefunder, prevMessageCount, newMessageCount)
}

// AddSequencerL2Batch is a paid mutator transaction binding the contract method 0xe0bc9729.
//
// Solidity: function addSequencerL2Batch(uint256 sequenceNumber, bytes data, uint256 afterDelayedMessagesRead, address gasRefunder, uint256 prevMessageCount, uint256 newMessageCount) returns()
func (_ISequencerInbox *ISequencerInboxTransactorSession) AddSequencerL2Batch(sequenceNumber *big.Int, data []byte, afterDelayedMessagesRead *big.Int, gasRefunder common.Address, prevMessageCount *big.Int, newMessageCount *big.Int) (*types.Transaction, error) {
	return _ISequencerInbox.Contract.AddSequencerL2Batch(&_ISequencerInbox.TransactOpts, sequenceNumber, data, afterDelayedMessagesRead, gasRefunder, prevMessageCount, newMessageCount)
}

// IWETH9MetaData contains all meta data concerning the IWETH9 contract.
var IWETH9MetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// IWETH9ABI is the input ABI used to generate the binding from.
// Deprecated: Use IWETH9MetaData.ABI instead.
var IWETH9ABI = IWETH9MetaData.ABI

// IWETH9 is an auto generated Go binding around an Ethereum contract.
type IWETH9 struct {
	IWETH9Caller     // Read-only binding to the contract
	IWETH9Transactor // Write-only binding to the contract
	IWETH9Filterer   // Log filterer for contract events
}

// IWETH9Caller is an auto generated read-only Go binding around an Ethereum contract.
type IWETH9Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IWETH9Transactor is an auto generated write-only Go binding around an Ethereum contract.
type IWETH9Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IWETH9Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IWETH9Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IWETH9Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IWETH9Session struct {
	Contract     *IWETH9           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IWETH9CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IWETH9CallerSession struct {
	Contract *IWETH9Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// IWETH9TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IWETH9TransactorSession struct {
	Contract     *IWETH9Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IWETH9Raw is an auto generated low-level Go binding around an Ethereum contract.
type IWETH9Raw struct {
	Contract *IWETH9 // Generic contract binding to access the raw methods on
}

// IWETH9CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IWETH9CallerRaw struct {
	Contract *IWETH9Caller // Generic read-only contract binding to access the raw methods on
}

// IWETH9TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IWETH9TransactorRaw struct {
	Contract *IWETH9Transactor // Generic write-only contract binding to access the raw methods on
}

// NewIWETH9 creates a new instance of IWETH9, bound to a specific deployed contract.
func NewIWETH9(address common.Address, backend bind.ContractBackend) (*IWETH9, error) {
	contract, err := bindIWETH9(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IWETH9{IWETH9Caller: IWETH9Caller{contract: contract}, IWETH9Transactor: IWETH9Transactor{contract: contract}, IWETH9Filterer: IWETH9Filterer{contract: contract}}, nil
}

// NewIWETH9Caller creates a new read-only instance of IWETH9, bound to a specific deployed contract.
func NewIWETH9Caller(address common.Address, caller bind.ContractCaller) (*IWETH9Caller, error) {
	contract, err := bindIWETH9(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IWETH9Caller{contract: contract}, nil
}

// NewIWETH9Transactor creates a new write-only instance of IWETH9, bound to a specific deployed contract.
func NewIWETH9Transactor(address common.Address, transactor bind.ContractTransactor) (*IWETH9Transactor, error) {
	contract, err := bindIWETH9(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IWETH9Transactor{contract: contract}, nil
}

// NewIWETH9Filterer creates a new log filterer instance of IWETH9, bound to a specific deployed contract.
func NewIWETH9Filterer(address common.Address, filterer bind.ContractFilterer) (*IWETH9Filterer, error) {
	contract, err := bindIWETH9(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IWETH9Filterer{contract: contract}, nil
}

// bindIWETH9 binds a generic wrapper to an already deployed contract.
func bindIWETH9(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := IWETH9MetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IWETH9 *IWETH9Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IWETH9.Contract.IWETH9Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IWETH9 *IWETH9Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IWETH9.Contract.IWETH9Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IWETH9 *IWETH9Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IWETH9.Contract.IWETH9Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IWETH9 *IWETH9CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IWETH9.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IWETH9 *IWETH9TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IWETH9.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IWETH9 *IWETH9TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IWETH9.Contract.contract.Transact(opts, method, params...)
}

// Deposit is a paid mutator transaction binding the contract method 0xd0e30db0.
//
// Solidity: function deposit() payable returns()
func (_IWETH9 *IWETH9Transactor) Deposit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IWETH9.contract.Transact(opts, "deposit")
}

// Deposit is a paid mutator transaction binding the contract method 0xd0e30db0.
//
// Solidity: function deposit() payable returns()
func (_IWETH9 *IWETH9Session) Deposit() (*types.Transaction, error) {
	return _IWETH9.Contract.Deposit(&_IWETH9.TransactOpts)
}

// Deposit is a paid mutator transaction binding the contract method 0xd0e30db0.
//
// Solidity: function deposit() payable returns()
func (_IWETH9 *IWETH9TransactorSession) Deposit() (*types.Transaction, error) {
	return _IWETH9.Contract.Deposit(&_IWETH9.TransactOpts)
}

// Withdraw is a paid mutator transaction binding the contract method 0x2e1a7d4d.
//
// Solidity: function withdraw(uint256 _amount) returns()
func (_IWETH9 *IWETH9Transactor) Withdraw(opts *bind.TransactOpts, _amount *big.Int) (*types.Transaction, error) {
	return _IWETH9.contract.Transact(opts, "withdraw", _amount)
}

// Withdraw is a paid mutator transaction binding the contract method 0x2e1a7d4d.
//
// Solidity: function withdraw(uint256 _amount) returns()
func (_IWETH9 *IWETH9Session) Withdraw(_amount *big.Int) (*types.Transaction, error) {
	return _IWETH9.Contract.Withdraw(&_IWETH9.TransactOpts, _amount)
}

// Withdraw is a paid mutator transaction binding the contract method 0x2e1a7d4d.
//
// Solidity: function withdraw(uint256 _amount) returns()
func (_IWETH9 *IWETH9TransactorSession) Withdraw(_amount *big.Int) (*types.Transaction, error) {
	return _IWETH9.Contract.Withdraw(&_IWETH9.TransactOpts, _amount)
}

// MultiCallTestMetaData contains all meta data concerning the MultiCallTest contract.
var MultiCallTestMetaData = &bind.MetaData{
	ABI: "[{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"count\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"name\":\"Called\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"data\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"write\",\"type\":\"bool\"}],\"name\":\"Storage\",\"type\":\"event\"}]",
	Bin: "0x608060405234801561001057600080fd5b50610800806100206000396000f3fe608060405260003660608161001357600080fd5b600083836000818110610028576100286105a0565b919091013560f81c9150610041905083600181876105cf565b93509350606060005b8260ff168160ff16101561053a57600061006687876004610548565b9050610075866004818a6105cf565b909750955036600061008f63ffffffff8416828a8c6105cf565b90925090506100a68863ffffffff8516818c6105cf565b985098506000828260008181106100bf576100bf6105a0565b919091013560f81c91506100d8905082600181866105cf565b909350915060f0811660000361039c5760006003821681036101145761010084846020610548565b905061010f83602081876105cf565b935093505b600061012360148286886105cf565b61012c916105f9565b60601c9050366000610141866014818a6105cf565b9092509050606060006003871681036101c8578473ffffffffffffffffffffffffffffffffffffffff1686858560405161017c929190610641565b60006040518083038185875af1925050503d80600081146101b9576040519150601f19603f3d011682016040523d82523d6000602084013e6101be565b606091505b50925090506102ef565b60038716600103610235578473ffffffffffffffffffffffffffffffffffffffff1684846040516101fa929190610641565b600060405180830381855af49150503d80600081146101b9576040519150601f19603f3d011682016040523d82523d6000602084013e6101be565b600387166002036102a2578473ffffffffffffffffffffffffffffffffffffffff168484604051610267929190610641565b600060405180830381855afa9150503d80600081146101b9576040519150601f19603f3d011682016040523d82523d6000602084013e6101be565b60405162461bcd60e51b815260206004820152601160248201527f756e6b6e6f776e2063616c6c206b696e6400000000000000000000000000000060448201526064015b60405180910390fd5b806103265760048716600003610313578151801561030e578060208401fd5b600080fd5b6040518060200160405280600081525091505b600887161561036d577f30ad2f9d9b34e611e2e65d13ec9bb22af3424e51619d6006cec561bc2c322cc5858e83856040516103649493929190610675565b60405180910390a15b8b826040516020016103809291906106f6565b6040516020818303038152906040529b50505050505050610523565b60f081166010036104db5760006103b660208285876105cf565b6103bf91610725565b90506103ce83602081876105cf565b9094509250600080600384168103610405576103ee6020600087896105cf565b6103f791610725565b915060019050818355610488565b60038416600103610440575050805460405160009061042a908a908490602001610762565b6040516020818303038152906040529850610488565b60405162461bcd60e51b815260206004820152601460248201527f756e6b6e6f776e2073746f72616765206b696e6400000000000000000000000060448201526064016102e6565b60088416156104d35760408051848152602081018490528215158183015290517f6ab08a9a891703dcd5859f8e8328215fef6d9f250e7d58267bee45aabaee2fa89181900360600190a15b505050610523565b60405162461bcd60e51b815260206004820152600f60248201527f756e6b6e6f776e20636f6d6d616e64000000000000000000000000000000000060448201526064016102e6565b50505050808061053290610784565b91505061004a565b508051945060200192505050f35b600080805b8360ff168160ff16101561059757600882901b915085858260ff16818110610577576105776105a0565b919091013560f81c9290921791508061058f81610784565b91505061054d565b50949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080858511156105df57600080fd5b838611156105ec57600080fd5b5050820193919092039150565b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000081358181169160148510156106395780818660140360031b1b83161692505b505092915050565b8183823760009101908152919050565b60005b8381101561066c578181015183820152602001610654565b50506000910152565b73ffffffffffffffffffffffffffffffffffffffff8516815260ff84166020820152821515604082015260806060820152600082518060808401526106c18160a0850160208701610651565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160a00195945050505050565b60008351610708818460208801610651565b83519083019061071c818360208801610651565b01949350505050565b8035602083101561075c577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff602084900360031b1b165b92915050565b60008351610774818460208801610651565b9190910191825250602001919050565b600060ff821660ff81036107c1577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6001019291505056fea2646970667358221220183785e5eb974c061decccc040a2f88f56e3b41f108cd38bfe266836aaf3ef2c64736f6c63430008110033",
}

// MultiCallTestABI is the input ABI used to generate the binding from.
// Deprecated: Use MultiCallTestMetaData.ABI instead.
var MultiCallTestABI = MultiCallTestMetaData.ABI

// MultiCallTestBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use MultiCallTestMetaData.Bin instead.
var MultiCallTestBin = MultiCallTestMetaData.Bin

// DeployMultiCallTest deploys a new Ethereum contract, binding an instance of MultiCallTest to it.
func DeployMultiCallTest(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *MultiCallTest, error) {
	parsed, err := MultiCallTestMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(MultiCallTestBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &MultiCallTest{MultiCallTestCaller: MultiCallTestCaller{contract: contract}, MultiCallTestTransactor: MultiCallTestTransactor{contract: contract}, MultiCallTestFilterer: MultiCallTestFilterer{contract: contract}}, nil
}

// MultiCallTest is an auto generated Go binding around an Ethereum contract.
type MultiCallTest struct {
	MultiCallTestCaller     // Read-only binding to the contract
	MultiCallTestTransactor // Write-only binding to the contract
	MultiCallTestFilterer   // Log filterer for contract events
}

// MultiCallTestCaller is an auto generated read-only Go binding around an Ethereum contract.
type MultiCallTestCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MultiCallTestTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MultiCallTestTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MultiCallTestFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MultiCallTestFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MultiCallTestSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MultiCallTestSession struct {
	Contract     *MultiCallTest    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MultiCallTestCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MultiCallTestCallerSession struct {
	Contract *MultiCallTestCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// MultiCallTestTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MultiCallTestTransactorSession struct {
	Contract     *MultiCallTestTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// MultiCallTestRaw is an auto generated low-level Go binding around an Ethereum contract.
type MultiCallTestRaw struct {
	Contract *MultiCallTest // Generic contract binding to access the raw methods on
}

// MultiCallTestCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MultiCallTestCallerRaw struct {
	Contract *MultiCallTestCaller // Generic read-only contract binding to access the raw methods on
}

// MultiCallTestTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MultiCallTestTransactorRaw struct {
	Contract *MultiCallTestTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMultiCallTest creates a new instance of MultiCallTest, bound to a specific deployed contract.
func NewMultiCallTest(address common.Address, backend bind.ContractBackend) (*MultiCallTest, error) {
	contract, err := bindMultiCallTest(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MultiCallTest{MultiCallTestCaller: MultiCallTestCaller{contract: contract}, MultiCallTestTransactor: MultiCallTestTransactor{contract: contract}, MultiCallTestFilterer: MultiCallTestFilterer{contract: contract}}, nil
}

// NewMultiCallTestCaller creates a new read-only instance of MultiCallTest, bound to a specific deployed contract.
func NewMultiCallTestCaller(address common.Address, caller bind.ContractCaller) (*MultiCallTestCaller, error) {
	contract, err := bindMultiCallTest(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MultiCallTestCaller{contract: contract}, nil
}

// NewMultiCallTestTransactor creates a new write-only instance of MultiCallTest, bound to a specific deployed contract.
func NewMultiCallTestTransactor(address common.Address, transactor bind.ContractTransactor) (*MultiCallTestTransactor, error) {
	contract, err := bindMultiCallTest(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MultiCallTestTransactor{contract: contract}, nil
}

// NewMultiCallTestFilterer creates a new log filterer instance of MultiCallTest, bound to a specific deployed contract.
func NewMultiCallTestFilterer(address common.Address, filterer bind.ContractFilterer) (*MultiCallTestFilterer, error) {
	contract, err := bindMultiCallTest(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MultiCallTestFilterer{contract: contract}, nil
}

// bindMultiCallTest binds a generic wrapper to an already deployed contract.
func bindMultiCallTest(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := MultiCallTestMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MultiCallTest *MultiCallTestRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MultiCallTest.Contract.MultiCallTestCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MultiCallTest *MultiCallTestRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MultiCallTest.Contract.MultiCallTestTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MultiCallTest *MultiCallTestRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MultiCallTest.Contract.MultiCallTestTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MultiCallTest *MultiCallTestCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MultiCallTest.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MultiCallTest *MultiCallTestTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MultiCallTest.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MultiCallTest *MultiCallTestTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MultiCallTest.Contract.contract.Transact(opts, method, params...)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_MultiCallTest *MultiCallTestTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _MultiCallTest.contract.RawTransact(opts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_MultiCallTest *MultiCallTestSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _MultiCallTest.Contract.Fallback(&_MultiCallTest.TransactOpts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_MultiCallTest *MultiCallTestTransactorSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _MultiCallTest.Contract.Fallback(&_MultiCallTest.TransactOpts, calldata)
}

// MultiCallTestCalledIterator is returned from FilterCalled and is used to iterate over the raw logs and unpacked data for Called events raised by the MultiCallTest contract.
type MultiCallTestCalledIterator struct {
	Event *MultiCallTestCalled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MultiCallTestCalledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MultiCallTestCalled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MultiCallTestCalled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MultiCallTestCalledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MultiCallTestCalledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MultiCallTestCalled represents a Called event raised by the MultiCallTest contract.
type MultiCallTestCalled struct {
	Addr       common.Address
	Count      uint8
	Success    bool
	ReturnData []byte
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterCalled is a free log retrieval operation binding the contract event 0x30ad2f9d9b34e611e2e65d13ec9bb22af3424e51619d6006cec561bc2c322cc5.
//
// Solidity: event Called(address addr, uint8 count, bool success, bytes returnData)
func (_MultiCallTest *MultiCallTestFilterer) FilterCalled(opts *bind.FilterOpts) (*MultiCallTestCalledIterator, error) {

	logs, sub, err := _MultiCallTest.contract.FilterLogs(opts, "Called")
	if err != nil {
		return nil, err
	}
	return &MultiCallTestCalledIterator{contract: _MultiCallTest.contract, event: "Called", logs: logs, sub: sub}, nil
}

// WatchCalled is a free log subscription operation binding the contract event 0x30ad2f9d9b34e611e2e65d13ec9bb22af3424e51619d6006cec561bc2c322cc5.
//
// Solidity: event Called(address addr, uint8 count, bool success, bytes returnData)
func (_MultiCallTest *MultiCallTestFilterer) WatchCalled(opts *bind.WatchOpts, sink chan<- *MultiCallTestCalled) (event.Subscription, error) {

	logs, sub, err := _MultiCallTest.contract.WatchLogs(opts, "Called")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MultiCallTestCalled)
				if err := _MultiCallTest.contract.UnpackLog(event, "Called", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCalled is a log parse operation binding the contract event 0x30ad2f9d9b34e611e2e65d13ec9bb22af3424e51619d6006cec561bc2c322cc5.
//
// Solidity: event Called(address addr, uint8 count, bool success, bytes returnData)
func (_MultiCallTest *MultiCallTestFilterer) ParseCalled(log types.Log) (*MultiCallTestCalled, error) {
	event := new(MultiCallTestCalled)
	if err := _MultiCallTest.contract.UnpackLog(event, "Called", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MultiCallTestStorageIterator is returned from FilterStorage and is used to iterate over the raw logs and unpacked data for Storage events raised by the MultiCallTest contract.
type MultiCallTestStorageIterator struct {
	Event *MultiCallTestStorage // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MultiCallTestStorageIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MultiCallTestStorage)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MultiCallTestStorage)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MultiCallTestStorageIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MultiCallTestStorageIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MultiCallTestStorage represents a Storage event raised by the MultiCallTest contract.
type MultiCallTestStorage struct {
	Slot  [32]byte
	Data  [32]byte
	Write bool
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterStorage is a free log retrieval operation binding the contract event 0x6ab08a9a891703dcd5859f8e8328215fef6d9f250e7d58267bee45aabaee2fa8.
//
// Solidity: event Storage(bytes32 slot, bytes32 data, bool write)
func (_MultiCallTest *MultiCallTestFilterer) FilterStorage(opts *bind.FilterOpts) (*MultiCallTestStorageIterator, error) {

	logs, sub, err := _MultiCallTest.contract.FilterLogs(opts, "Storage")
	if err != nil {
		return nil, err
	}
	return &MultiCallTestStorageIterator{contract: _MultiCallTest.contract, event: "Storage", logs: logs, sub: sub}, nil
}

// WatchStorage is a free log subscription operation binding the contract event 0x6ab08a9a891703dcd5859f8e8328215fef6d9f250e7d58267bee45aabaee2fa8.
//
// Solidity: event Storage(bytes32 slot, bytes32 data, bool write)
func (_MultiCallTest *MultiCallTestFilterer) WatchStorage(opts *bind.WatchOpts, sink chan<- *MultiCallTestStorage) (event.Subscription, error) {

	logs, sub, err := _MultiCallTest.contract.WatchLogs(opts, "Storage")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MultiCallTestStorage)
				if err := _MultiCallTest.contract.UnpackLog(event, "Storage", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStorage is a log parse operation binding the contract event 0x6ab08a9a891703dcd5859f8e8328215fef6d9f250e7d58267bee45aabaee2fa8.
//
// Solidity: event Storage(bytes32 slot, bytes32 data, bool write)
func (_MultiCallTest *MultiCallTestFilterer) ParseStorage(log types.Log) (*MultiCallTestStorage, error) {
	event := new(MultiCallTestStorage)
	if err := _MultiCallTest.contract.UnpackLog(event, "Storage", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OwnableMetaData contains all meta data concerning the Ownable contract.
var OwnableMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
}

// OwnableABI is the input ABI used to generate the binding from.
// Deprecated: Use OwnableMetaData.ABI instead.
var OwnableABI = OwnableMetaData.ABI

// Ownable is an auto generated Go binding around an Ethereum contract.
type Ownable struct {
	OwnableCaller     // Read-only binding to the contract
	OwnableTransactor // Write-only binding to the contract
	OwnableFilterer   // Log filterer for contract events
}

// OwnableCaller is an auto generated read-only Go binding around an Ethereum contract.
type OwnableCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OwnableTransactor is an auto generated write-only Go binding around an Ethereum contract.
type OwnableTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OwnableFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type OwnableFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OwnableSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type OwnableSession struct {
	Contract     *Ownable          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// OwnableCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type OwnableCallerSession struct {
	Contract *OwnableCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// OwnableTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type OwnableTransactorSession struct {
	Contract     *OwnableTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// OwnableRaw is an auto generated low-level Go binding around an Ethereum contract.
type OwnableRaw struct {
	Contract *Ownable // Generic contract binding to access the raw methods on
}

// OwnableCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type OwnableCallerRaw struct {
	Contract *OwnableCaller // Generic read-only contract binding to access the raw methods on
}

// OwnableTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type OwnableTransactorRaw struct {
	Contract *OwnableTransactor // Generic write-only contract binding to access the raw methods on
}

// NewOwnable creates a new instance of Ownable, bound to a specific deployed contract.
func NewOwnable(address common.Address, backend bind.ContractBackend) (*Ownable, error) {
	contract, err := bindOwnable(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Ownable{OwnableCaller: OwnableCaller{contract: contract}, OwnableTransactor: OwnableTransactor{contract: contract}, OwnableFilterer: OwnableFilterer{contract: contract}}, nil
}

// NewOwnableCaller creates a new read-only instance of Ownable, bound to a specific deployed contract.
func NewOwnableCaller(address common.Address, caller bind.ContractCaller) (*OwnableCaller, error) {
	contract, err := bindOwnable(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &OwnableCaller{contract: contract}, nil
}

// NewOwnableTransactor creates a new write-only instance of Ownable, bound to a specific deployed contract.
func NewOwnableTransactor(address common.Address, transactor bind.ContractTransactor) (*OwnableTransactor, error) {
	contract, err := bindOwnable(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &OwnableTransactor{contract: contract}, nil
}

// NewOwnableFilterer creates a new log filterer instance of Ownable, bound to a specific deployed contract.
func NewOwnableFilterer(address common.Address, filterer bind.ContractFilterer) (*OwnableFilterer, error) {
	contract, err := bindOwnable(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &OwnableFilterer{contract: contract}, nil
}

// bindOwnable binds a generic wrapper to an already deployed contract.
func bindOwnable(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := OwnableMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Ownable *OwnableRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Ownable.Contract.OwnableCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Ownable *OwnableRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Ownable.Contract.OwnableTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Ownable *OwnableRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Ownable.Contract.OwnableTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Ownable *OwnableCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Ownable.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Ownable *OwnableTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Ownable.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Ownable *OwnableTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Ownable.Contract.contract.Transact(opts, method, params...)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Ownable *OwnableCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Ownable.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Ownable *OwnableSession) Owner() (common.Address, error) {
	return _Ownable.Contract.Owner(&_Ownable.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Ownable *OwnableCallerSession) Owner() (common.Address, error) {
	return _Ownable.Contract.Owner(&_Ownable.CallOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Ownable *OwnableTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Ownable.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Ownable *OwnableSession) RenounceOwnership() (*types.Transaction, error) {
	return _Ownable.Contract.RenounceOwnership(&_Ownable.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Ownable *OwnableTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Ownable.Contract.RenounceOwnership(&_Ownable.TransactOpts)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Ownable *OwnableTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Ownable.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Ownable *OwnableSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Ownable.Contract.TransferOwnership(&_Ownable.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Ownable *OwnableTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Ownable.Contract.TransferOwnership(&_Ownable.TransactOpts, newOwner)
}

// OwnableOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Ownable contract.
type OwnableOwnershipTransferredIterator struct {
	Event *OwnableOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OwnableOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OwnableOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OwnableOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OwnableOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OwnableOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OwnableOwnershipTransferred represents a OwnershipTransferred event raised by the Ownable contract.
type OwnableOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Ownable *OwnableFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*OwnableOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Ownable.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &OwnableOwnershipTransferredIterator{contract: _Ownable.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Ownable *OwnableFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *OwnableOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Ownable.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OwnableOwnershipTransferred)
				if err := _Ownable.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Ownable *OwnableFilterer) ParseOwnershipTransferred(log types.Log) (*OwnableOwnershipTransferred, error) {
	event := new(OwnableOwnershipTransferred)
	if err := _Ownable.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PendingBlkTimeAndNrAdvanceCheckMetaData contains all meta data concerning the PendingBlkTimeAndNrAdvanceCheck contract.
var PendingBlkTimeAndNrAdvanceCheckMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"expected\",\"type\":\"bytes32\"}],\"name\":\"checkArbBlockHashReturnsLatest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAdvancing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60c060405234801561001057600080fd5b50426080818152505060646001600160a01b031663a3b1b31d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610058573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061007c9190610084565b60a05261009d565b60006020828403121561009657600080fd5b5051919050565b60805160a0516103f06100c0600039600060ce01526000605a01526103f06000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80634bc05a231461003b578063e46c80b614610045575b600080fd5b610043610058565b005b610043610053366004610348565b6101ac565b7f000000000000000000000000000000000000000000000000000000000000000042116100cc5760405162461bcd60e51b815260206004820152601360248201527f54696d65206469646e277420616476616e63650000000000000000000000000060448201526064015b60405180910390fd5b7f0000000000000000000000000000000000000000000000000000000000000000606473ffffffffffffffffffffffffffffffffffffffff1663a3b1b31d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610139573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061015d9190610361565b116101aa5760405162461bcd60e51b815260206004820152601460248201527f426c6f636b206469646e277420616476616e636500000000000000000000000060448201526064016100c3565b565b6000606473ffffffffffffffffffffffffffffffffffffffff16632b407a826001606473ffffffffffffffffffffffffffffffffffffffff1663a3b1b31d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610219573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061023d9190610361565b610247919061037a565b6040518263ffffffff1660e01b815260040161026591815260200190565b602060405180830381865afa158015610282573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a69190610361565b9050806102f55760405162461bcd60e51b815260206004820152600f60248201527f5a45524f5f424c4f434b5f48415348000000000000000000000000000000000060448201526064016100c3565b8181146103445760405162461bcd60e51b815260206004820152601060248201527f57524f4e475f424c4f434b5f484153480000000000000000000000000000000060448201526064016100c3565b5050565b60006020828403121561035a57600080fd5b5035919050565b60006020828403121561037357600080fd5b5051919050565b818103818111156103b4577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b9291505056fea2646970667358221220d73c307a31e30fc993b416fe66811d07d6ec5d38fabb75b33b47e3249aa855e464736f6c63430008110033",
}

// PendingBlkTimeAndNrAdvanceCheckABI is the input ABI used to generate the binding from.
// Deprecated: Use PendingBlkTimeAndNrAdvanceCheckMetaData.ABI instead.
var PendingBlkTimeAndNrAdvanceCheckABI = PendingBlkTimeAndNrAdvanceCheckMetaData.ABI

// PendingBlkTimeAndNrAdvanceCheckBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use PendingBlkTimeAndNrAdvanceCheckMetaData.Bin instead.
var PendingBlkTimeAndNrAdvanceCheckBin = PendingBlkTimeAndNrAdvanceCheckMetaData.Bin

// DeployPendingBlkTimeAndNrAdvanceCheck deploys a new Ethereum contract, binding an instance of PendingBlkTimeAndNrAdvanceCheck to it.
func DeployPendingBlkTimeAndNrAdvanceCheck(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *PendingBlkTimeAndNrAdvanceCheck, error) {
	parsed, err := PendingBlkTimeAndNrAdvanceCheckMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(PendingBlkTimeAndNrAdvanceCheckBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &PendingBlkTimeAndNrAdvanceCheck{PendingBlkTimeAndNrAdvanceCheckCaller: PendingBlkTimeAndNrAdvanceCheckCaller{contract: contract}, PendingBlkTimeAndNrAdvanceCheckTransactor: PendingBlkTimeAndNrAdvanceCheckTransactor{contract: contract}, PendingBlkTimeAndNrAdvanceCheckFilterer: PendingBlkTimeAndNrAdvanceCheckFilterer{contract: contract}}, nil
}

// PendingBlkTimeAndNrAdvanceCheck is an auto generated Go binding around an Ethereum contract.
type PendingBlkTimeAndNrAdvanceCheck struct {
	PendingBlkTimeAndNrAdvanceCheckCaller     // Read-only binding to the contract
	PendingBlkTimeAndNrAdvanceCheckTransactor // Write-only binding to the contract
	PendingBlkTimeAndNrAdvanceCheckFilterer   // Log filterer for contract events
}

// PendingBlkTimeAndNrAdvanceCheckCaller is an auto generated read-only Go binding around an Ethereum contract.
type PendingBlkTimeAndNrAdvanceCheckCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PendingBlkTimeAndNrAdvanceCheckTransactor is an auto generated write-only Go binding around an Ethereum contract.
type PendingBlkTimeAndNrAdvanceCheckTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PendingBlkTimeAndNrAdvanceCheckFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type PendingBlkTimeAndNrAdvanceCheckFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PendingBlkTimeAndNrAdvanceCheckSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type PendingBlkTimeAndNrAdvanceCheckSession struct {
	Contract     *PendingBlkTimeAndNrAdvanceCheck // Generic contract binding to set the session for
	CallOpts     bind.CallOpts                    // Call options to use throughout this session
	TransactOpts bind.TransactOpts                // Transaction auth options to use throughout this session
}

// PendingBlkTimeAndNrAdvanceCheckCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type PendingBlkTimeAndNrAdvanceCheckCallerSession struct {
	Contract *PendingBlkTimeAndNrAdvanceCheckCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                          // Call options to use throughout this session
}

// PendingBlkTimeAndNrAdvanceCheckTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type PendingBlkTimeAndNrAdvanceCheckTransactorSession struct {
	Contract     *PendingBlkTimeAndNrAdvanceCheckTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                          // Transaction auth options to use throughout this session
}

// PendingBlkTimeAndNrAdvanceCheckRaw is an auto generated low-level Go binding around an Ethereum contract.
type PendingBlkTimeAndNrAdvanceCheckRaw struct {
	Contract *PendingBlkTimeAndNrAdvanceCheck // Generic contract binding to access the raw methods on
}

// PendingBlkTimeAndNrAdvanceCheckCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type PendingBlkTimeAndNrAdvanceCheckCallerRaw struct {
	Contract *PendingBlkTimeAndNrAdvanceCheckCaller // Generic read-only contract binding to access the raw methods on
}

// PendingBlkTimeAndNrAdvanceCheckTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type PendingBlkTimeAndNrAdvanceCheckTransactorRaw struct {
	Contract *PendingBlkTimeAndNrAdvanceCheckTransactor // Generic write-only contract binding to access the raw methods on
}

// NewPendingBlkTimeAndNrAdvanceCheck creates a new instance of PendingBlkTimeAndNrAdvanceCheck, bound to a specific deployed contract.
func NewPendingBlkTimeAndNrAdvanceCheck(address common.Address, backend bind.ContractBackend) (*PendingBlkTimeAndNrAdvanceCheck, error) {
	contract, err := bindPendingBlkTimeAndNrAdvanceCheck(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &PendingBlkTimeAndNrAdvanceCheck{PendingBlkTimeAndNrAdvanceCheckCaller: PendingBlkTimeAndNrAdvanceCheckCaller{contract: contract}, PendingBlkTimeAndNrAdvanceCheckTransactor: PendingBlkTimeAndNrAdvanceCheckTransactor{contract: contract}, PendingBlkTimeAndNrAdvanceCheckFilterer: PendingBlkTimeAndNrAdvanceCheckFilterer{contract: contract}}, nil
}

// NewPendingBlkTimeAndNrAdvanceCheckCaller creates a new read-only instance of PendingBlkTimeAndNrAdvanceCheck, bound to a specific deployed contract.
func NewPendingBlkTimeAndNrAdvanceCheckCaller(address common.Address, caller bind.ContractCaller) (*PendingBlkTimeAndNrAdvanceCheckCaller, error) {
	contract, err := bindPendingBlkTimeAndNrAdvanceCheck(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &PendingBlkTimeAndNrAdvanceCheckCaller{contract: contract}, nil
}

// NewPendingBlkTimeAndNrAdvanceCheckTransactor creates a new write-only instance of PendingBlkTimeAndNrAdvanceCheck, bound to a specific deployed contract.
func NewPendingBlkTimeAndNrAdvanceCheckTransactor(address common.Address, transactor bind.ContractTransactor) (*PendingBlkTimeAndNrAdvanceCheckTransactor, error) {
	contract, err := bindPendingBlkTimeAndNrAdvanceCheck(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &PendingBlkTimeAndNrAdvanceCheckTransactor{contract: contract}, nil
}

// NewPendingBlkTimeAndNrAdvanceCheckFilterer creates a new log filterer instance of PendingBlkTimeAndNrAdvanceCheck, bound to a specific deployed contract.
func NewPendingBlkTimeAndNrAdvanceCheckFilterer(address common.Address, filterer bind.ContractFilterer) (*PendingBlkTimeAndNrAdvanceCheckFilterer, error) {
	contract, err := bindPendingBlkTimeAndNrAdvanceCheck(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &PendingBlkTimeAndNrAdvanceCheckFilterer{contract: contract}, nil
}

// bindPendingBlkTimeAndNrAdvanceCheck binds a generic wrapper to an already deployed contract.
func bindPendingBlkTimeAndNrAdvanceCheck(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := PendingBlkTimeAndNrAdvanceCheckMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_PendingBlkTimeAndNrAdvanceCheck *PendingBlkTimeAndNrAdvanceCheckRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _PendingBlkTimeAndNrAdvanceCheck.Contract.PendingBlkTimeAndNrAdvanceCheckCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_PendingBlkTimeAndNrAdvanceCheck *PendingBlkTimeAndNrAdvanceCheckRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PendingBlkTimeAndNrAdvanceCheck.Contract.PendingBlkTimeAndNrAdvanceCheckTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_PendingBlkTimeAndNrAdvanceCheck *PendingBlkTimeAndNrAdvanceCheckRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _PendingBlkTimeAndNrAdvanceCheck.Contract.PendingBlkTimeAndNrAdvanceCheckTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_PendingBlkTimeAndNrAdvanceCheck *PendingBlkTimeAndNrAdvanceCheckCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _PendingBlkTimeAndNrAdvanceCheck.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_PendingBlkTimeAndNrAdvanceCheck *PendingBlkTimeAndNrAdvanceCheckTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PendingBlkTimeAndNrAdvanceCheck.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_PendingBlkTimeAndNrAdvanceCheck *PendingBlkTimeAndNrAdvanceCheckTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _PendingBlkTimeAndNrAdvanceCheck.Contract.contract.Transact(opts, method, params...)
}

// CheckArbBlockHashReturnsLatest is a paid mutator transaction binding the contract method 0xe46c80b6.
//
// Solidity: function checkArbBlockHashReturnsLatest(bytes32 expected) returns()
func (_PendingBlkTimeAndNrAdvanceCheck *PendingBlkTimeAndNrAdvanceCheckTransactor) CheckArbBlockHashReturnsLatest(opts *bind.TransactOpts, expected [32]byte) (*types.Transaction, error) {
	return _PendingBlkTimeAndNrAdvanceCheck.contract.Transact(opts, "checkArbBlockHashReturnsLatest", expected)
}

// CheckArbBlockHashReturnsLatest is a paid mutator transaction binding the contract method 0xe46c80b6.
//
// Solidity: function checkArbBlockHashReturnsLatest(bytes32 expected) returns()
func (_PendingBlkTimeAndNrAdvanceCheck *PendingBlkTimeAndNrAdvanceCheckSession) CheckArbBlockHashReturnsLatest(expected [32]byte) (*types.Transaction, error) {
	return _PendingBlkTimeAndNrAdvanceCheck.Contract.CheckArbBlockHashReturnsLatest(&_PendingBlkTimeAndNrAdvanceCheck.TransactOpts, expected)
}

// CheckArbBlockHashReturnsLatest is a paid mutator transaction binding the contract method 0xe46c80b6.
//
// Solidity: function checkArbBlockHashReturnsLatest(bytes32 expected) returns()
func (_PendingBlkTimeAndNrAdvanceCheck *PendingBlkTimeAndNrAdvanceCheckTransactorSession) CheckArbBlockHashReturnsLatest(expected [32]byte) (*types.Transaction, error) {
	return _PendingBlkTimeAndNrAdvanceCheck.Contract.CheckArbBlockHashReturnsLatest(&_PendingBlkTimeAndNrAdvanceCheck.TransactOpts, expected)
}

// IsAdvancing is a paid mutator transaction binding the contract method 0x4bc05a23.
//
// Solidity: function isAdvancing() returns()
func (_PendingBlkTimeAndNrAdvanceCheck *PendingBlkTimeAndNrAdvanceCheckTransactor) IsAdvancing(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PendingBlkTimeAndNrAdvanceCheck.contract.Transact(opts, "isAdvancing")
}

// IsAdvancing is a paid mutator transaction binding the contract method 0x4bc05a23.
//
// Solidity: function isAdvancing() returns()
func (_PendingBlkTimeAndNrAdvanceCheck *PendingBlkTimeAndNrAdvanceCheckSession) IsAdvancing() (*types.Transaction, error) {
	return _PendingBlkTimeAndNrAdvanceCheck.Contract.IsAdvancing(&_PendingBlkTimeAndNrAdvanceCheck.TransactOpts)
}

// IsAdvancing is a paid mutator transaction binding the contract method 0x4bc05a23.
//
// Solidity: function isAdvancing() returns()
func (_PendingBlkTimeAndNrAdvanceCheck *PendingBlkTimeAndNrAdvanceCheckTransactorSession) IsAdvancing() (*types.Transaction, error) {
	return _PendingBlkTimeAndNrAdvanceCheck.Contract.IsAdvancing(&_PendingBlkTimeAndNrAdvanceCheck.TransactOpts)
}

// ProgramTestMetaData contains all meta data concerning the ProgramTest contract.
var ProgramTestMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"program\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"callKeccak\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"program\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"expected\",\"type\":\"bytes\"}],\"name\":\"checkRevertData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"program\",\"type\":\"address\"}],\"name\":\"mathTest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"program\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fundedAccount\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"gas\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"staticcallEvmData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"program\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"staticcallProgram\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"result\",\"type\":\"bytes32\"}],\"name\":\"Hash\",\"type\":\"event\"}]",
	Bin: "",
}

// ProgramTestABI is the input ABI used to generate the binding from.
// Deprecated: Use ProgramTestMetaData.ABI instead.
var ProgramTestABI = ProgramTestMetaData.ABI

// ProgramTestBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ProgramTestMetaData.Bin instead.
var ProgramTestBin = ProgramTestMetaData.Bin

// DeployProgramTest deploys a new Ethereum contract, binding an instance of ProgramTest to it.
func DeployProgramTest(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ProgramTest, error) {
	parsed, err := ProgramTestMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ProgramTestBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ProgramTest{ProgramTestCaller: ProgramTestCaller{contract: contract}, ProgramTestTransactor: ProgramTestTransactor{contract: contract}, ProgramTestFilterer: ProgramTestFilterer{contract: contract}}, nil
}

// ProgramTest is an auto generated Go binding around an Ethereum contract.
type ProgramTest struct {
	ProgramTestCaller     // Read-only binding to the contract
	ProgramTestTransactor // Write-only binding to the contract
	ProgramTestFilterer   // Log filterer for contract events
}

// ProgramTestCaller is an auto generated read-only Go binding around an Ethereum contract.
type ProgramTestCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ProgramTestTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ProgramTestTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ProgramTestFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ProgramTestFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ProgramTestSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ProgramTestSession struct {
	Contract     *ProgramTest      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ProgramTestCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ProgramTestCallerSession struct {
	Contract *ProgramTestCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// ProgramTestTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ProgramTestTransactorSession struct {
	Contract     *ProgramTestTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// ProgramTestRaw is an auto generated low-level Go binding around an Ethereum contract.
type ProgramTestRaw struct {
	Contract *ProgramTest // Generic contract binding to access the raw methods on
}

// ProgramTestCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ProgramTestCallerRaw struct {
	Contract *ProgramTestCaller // Generic read-only contract binding to access the raw methods on
}

// ProgramTestTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ProgramTestTransactorRaw struct {
	Contract *ProgramTestTransactor // Generic write-only contract binding to access the raw methods on
}

// NewProgramTest creates a new instance of ProgramTest, bound to a specific deployed contract.
func NewProgramTest(address common.Address, backend bind.ContractBackend) (*ProgramTest, error) {
	contract, err := bindProgramTest(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ProgramTest{ProgramTestCaller: ProgramTestCaller{contract: contract}, ProgramTestTransactor: ProgramTestTransactor{contract: contract}, ProgramTestFilterer: ProgramTestFilterer{contract: contract}}, nil
}

// NewProgramTestCaller creates a new read-only instance of ProgramTest, bound to a specific deployed contract.
func NewProgramTestCaller(address common.Address, caller bind.ContractCaller) (*ProgramTestCaller, error) {
	contract, err := bindProgramTest(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ProgramTestCaller{contract: contract}, nil
}

// NewProgramTestTransactor creates a new write-only instance of ProgramTest, bound to a specific deployed contract.
func NewProgramTestTransactor(address common.Address, transactor bind.ContractTransactor) (*ProgramTestTransactor, error) {
	contract, err := bindProgramTest(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ProgramTestTransactor{contract: contract}, nil
}

// NewProgramTestFilterer creates a new log filterer instance of ProgramTest, bound to a specific deployed contract.
func NewProgramTestFilterer(address common.Address, filterer bind.ContractFilterer) (*ProgramTestFilterer, error) {
	contract, err := bindProgramTest(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ProgramTestFilterer{contract: contract}, nil
}

// bindProgramTest binds a generic wrapper to an already deployed contract.
func bindProgramTest(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ProgramTestMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ProgramTest *ProgramTestRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ProgramTest.Contract.ProgramTestCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ProgramTest *ProgramTestRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ProgramTest.Contract.ProgramTestTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ProgramTest *ProgramTestRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ProgramTest.Contract.ProgramTestTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ProgramTest *ProgramTestCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ProgramTest.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ProgramTest *ProgramTestTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ProgramTest.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ProgramTest *ProgramTestTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ProgramTest.Contract.contract.Transact(opts, method, params...)
}

// StaticcallEvmData is a free data retrieval call binding the contract method 0xaba8c4ba.
//
// Solidity: function staticcallEvmData(address program, address fundedAccount, uint64 gas, bytes data) view returns(bytes)
func (_ProgramTest *ProgramTestCaller) StaticcallEvmData(opts *bind.CallOpts, program common.Address, fundedAccount common.Address, gas uint64, data []byte) ([]byte, error) {
	var out []interface{}
	err := _ProgramTest.contract.Call(opts, &out, "staticcallEvmData", program, fundedAccount, gas, data)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// StaticcallEvmData is a free data retrieval call binding the contract method 0xaba8c4ba.
//
// Solidity: function staticcallEvmData(address program, address fundedAccount, uint64 gas, bytes data) view returns(bytes)
func (_ProgramTest *ProgramTestSession) StaticcallEvmData(program common.Address, fundedAccount common.Address, gas uint64, data []byte) ([]byte, error) {
	return _ProgramTest.Contract.StaticcallEvmData(&_ProgramTest.CallOpts, program, fundedAccount, gas, data)
}

// StaticcallEvmData is a free data retrieval call binding the contract method 0xaba8c4ba.
//
// Solidity: function staticcallEvmData(address program, address fundedAccount, uint64 gas, bytes data) view returns(bytes)
func (_ProgramTest *ProgramTestCallerSession) StaticcallEvmData(program common.Address, fundedAccount common.Address, gas uint64, data []byte) ([]byte, error) {
	return _ProgramTest.Contract.StaticcallEvmData(&_ProgramTest.CallOpts, program, fundedAccount, gas, data)
}

// StaticcallProgram is a free data retrieval call binding the contract method 0x3fdd58e2.
//
// Solidity: function staticcallProgram(address program, bytes data) view returns(bytes)
func (_ProgramTest *ProgramTestCaller) StaticcallProgram(opts *bind.CallOpts, program common.Address, data []byte) ([]byte, error) {
	var out []interface{}
	err := _ProgramTest.contract.Call(opts, &out, "staticcallProgram", program, data)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// StaticcallProgram is a free data retrieval call binding the contract method 0x3fdd58e2.
//
// Solidity: function staticcallProgram(address program, bytes data) view returns(bytes)
func (_ProgramTest *ProgramTestSession) StaticcallProgram(program common.Address, data []byte) ([]byte, error) {
	return _ProgramTest.Contract.StaticcallProgram(&_ProgramTest.CallOpts, program, data)
}

// StaticcallProgram is a free data retrieval call binding the contract method 0x3fdd58e2.
//
// Solidity: function staticcallProgram(address program, bytes data) view returns(bytes)
func (_ProgramTest *ProgramTestCallerSession) StaticcallProgram(program common.Address, data []byte) ([]byte, error) {
	return _ProgramTest.Contract.StaticcallProgram(&_ProgramTest.CallOpts, program, data)
}

// CallKeccak is a paid mutator transaction binding the contract method 0x1d00bae4.
//
// Solidity: function callKeccak(address program, bytes data) returns()
func (_ProgramTest *ProgramTestTransactor) CallKeccak(opts *bind.TransactOpts, program common.Address, data []byte) (*types.Transaction, error) {
	return _ProgramTest.contract.Transact(opts, "callKeccak", program, data)
}

// CallKeccak is a paid mutator transaction binding the contract method 0x1d00bae4.
//
// Solidity: function callKeccak(address program, bytes data) returns()
func (_ProgramTest *ProgramTestSession) CallKeccak(program common.Address, data []byte) (*types.Transaction, error) {
	return _ProgramTest.Contract.CallKeccak(&_ProgramTest.TransactOpts, program, data)
}

// CallKeccak is a paid mutator transaction binding the contract method 0x1d00bae4.
//
// Solidity: function callKeccak(address program, bytes data) returns()
func (_ProgramTest *ProgramTestTransactorSession) CallKeccak(program common.Address, data []byte) (*types.Transaction, error) {
	return _ProgramTest.Contract.CallKeccak(&_ProgramTest.TransactOpts, program, data)
}

// CheckRevertData is a paid mutator transaction binding the contract method 0x96ec12e5.
//
// Solidity: function checkRevertData(address program, bytes data, bytes expected) payable returns(bytes)
func (_ProgramTest *ProgramTestTransactor) CheckRevertData(opts *bind.TransactOpts, program common.Address, data []byte, expected []byte) (*types.Transaction, error) {
	return _ProgramTest.contract.Transact(opts, "checkRevertData", program, data, expected)
}

// CheckRevertData is a paid mutator transaction binding the contract method 0x96ec12e5.
//
// Solidity: function checkRevertData(address program, bytes data, bytes expected) payable returns(bytes)
func (_ProgramTest *ProgramTestSession) CheckRevertData(program common.Address, data []byte, expected []byte) (*types.Transaction, error) {
	return _ProgramTest.Contract.CheckRevertData(&_ProgramTest.TransactOpts, program, data, expected)
}

// CheckRevertData is a paid mutator transaction binding the contract method 0x96ec12e5.
//
// Solidity: function checkRevertData(address program, bytes data, bytes expected) payable returns(bytes)
func (_ProgramTest *ProgramTestTransactorSession) CheckRevertData(program common.Address, data []byte, expected []byte) (*types.Transaction, error) {
	return _ProgramTest.Contract.CheckRevertData(&_ProgramTest.TransactOpts, program, data, expected)
}

// MathTest is a paid mutator transaction binding the contract method 0xfd424462.
//
// Solidity: function mathTest(address program) returns()
func (_ProgramTest *ProgramTestTransactor) MathTest(opts *bind.TransactOpts, program common.Address) (*types.Transaction, error) {
	return _ProgramTest.contract.Transact(opts, "mathTest", program)
}

// MathTest is a paid mutator transaction binding the contract method 0xfd424462.
//
// Solidity: function mathTest(address program) returns()
func (_ProgramTest *ProgramTestSession) MathTest(program common.Address) (*types.Transaction, error) {
	return _ProgramTest.Contract.MathTest(&_ProgramTest.TransactOpts, program)
}

// MathTest is a paid mutator transaction binding the contract method 0xfd424462.
//
// Solidity: function mathTest(address program) returns()
func (_ProgramTest *ProgramTestTransactorSession) MathTest(program common.Address) (*types.Transaction, error) {
	return _ProgramTest.Contract.MathTest(&_ProgramTest.TransactOpts, program)
}

// ProgramTestHashIterator is returned from FilterHash and is used to iterate over the raw logs and unpacked data for Hash events raised by the ProgramTest contract.
type ProgramTestHashIterator struct {
	Event *ProgramTestHash // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProgramTestHashIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProgramTestHash)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProgramTestHash)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProgramTestHashIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProgramTestHashIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProgramTestHash represents a Hash event raised by the ProgramTest contract.
type ProgramTestHash struct {
	Result [32]byte
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterHash is a free log retrieval operation binding the contract event 0x224c8d9ad1bbf0f44a61d7bd8e7e9049b1a320e04b047da9910945675c31ba43.
//
// Solidity: event Hash(bytes32 result)
func (_ProgramTest *ProgramTestFilterer) FilterHash(opts *bind.FilterOpts) (*ProgramTestHashIterator, error) {

	logs, sub, err := _ProgramTest.contract.FilterLogs(opts, "Hash")
	if err != nil {
		return nil, err
	}
	return &ProgramTestHashIterator{contract: _ProgramTest.contract, event: "Hash", logs: logs, sub: sub}, nil
}

// WatchHash is a free log subscription operation binding the contract event 0x224c8d9ad1bbf0f44a61d7bd8e7e9049b1a320e04b047da9910945675c31ba43.
//
// Solidity: event Hash(bytes32 result)
func (_ProgramTest *ProgramTestFilterer) WatchHash(opts *bind.WatchOpts, sink chan<- *ProgramTestHash) (event.Subscription, error) {

	logs, sub, err := _ProgramTest.contract.WatchLogs(opts, "Hash")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProgramTestHash)
				if err := _ProgramTest.contract.UnpackLog(event, "Hash", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseHash is a log parse operation binding the contract event 0x224c8d9ad1bbf0f44a61d7bd8e7e9049b1a320e04b047da9910945675c31ba43.
//
// Solidity: event Hash(bytes32 result)
func (_ProgramTest *ProgramTestFilterer) ParseHash(log types.Log) (*ProgramTestHash, error) {
	event := new(ProgramTestHash)
	if err := _ProgramTest.contract.UnpackLog(event, "Hash", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ProxyMetaData contains all meta data concerning the Proxy contract.
var ProxyMetaData = &bind.MetaData{
	ABI: "[{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
}

// ProxyABI is the input ABI used to generate the binding from.
// Deprecated: Use ProxyMetaData.ABI instead.
var ProxyABI = ProxyMetaData.ABI

// Proxy is an auto generated Go binding around an Ethereum contract.
type Proxy struct {
	ProxyCaller     // Read-only binding to the contract
	ProxyTransactor // Write-only binding to the contract
	ProxyFilterer   // Log filterer for contract events
}

// ProxyCaller is an auto generated read-only Go binding around an Ethereum contract.
type ProxyCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ProxyTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ProxyTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ProxyFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ProxyFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ProxySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ProxySession struct {
	Contract     *Proxy            // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ProxyCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ProxyCallerSession struct {
	Contract *ProxyCaller  // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// ProxyTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ProxyTransactorSession struct {
	Contract     *ProxyTransactor  // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ProxyRaw is an auto generated low-level Go binding around an Ethereum contract.
type ProxyRaw struct {
	Contract *Proxy // Generic contract binding to access the raw methods on
}

// ProxyCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ProxyCallerRaw struct {
	Contract *ProxyCaller // Generic read-only contract binding to access the raw methods on
}

// ProxyTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ProxyTransactorRaw struct {
	Contract *ProxyTransactor // Generic write-only contract binding to access the raw methods on
}

// NewProxy creates a new instance of Proxy, bound to a specific deployed contract.
func NewProxy(address common.Address, backend bind.ContractBackend) (*Proxy, error) {
	contract, err := bindProxy(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Proxy{ProxyCaller: ProxyCaller{contract: contract}, ProxyTransactor: ProxyTransactor{contract: contract}, ProxyFilterer: ProxyFilterer{contract: contract}}, nil
}

// NewProxyCaller creates a new read-only instance of Proxy, bound to a specific deployed contract.
func NewProxyCaller(address common.Address, caller bind.ContractCaller) (*ProxyCaller, error) {
	contract, err := bindProxy(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ProxyCaller{contract: contract}, nil
}

// NewProxyTransactor creates a new write-only instance of Proxy, bound to a specific deployed contract.
func NewProxyTransactor(address common.Address, transactor bind.ContractTransactor) (*ProxyTransactor, error) {
	contract, err := bindProxy(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ProxyTransactor{contract: contract}, nil
}

// NewProxyFilterer creates a new log filterer instance of Proxy, bound to a specific deployed contract.
func NewProxyFilterer(address common.Address, filterer bind.ContractFilterer) (*ProxyFilterer, error) {
	contract, err := bindProxy(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ProxyFilterer{contract: contract}, nil
}

// bindProxy binds a generic wrapper to an already deployed contract.
func bindProxy(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ProxyMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Proxy *ProxyRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Proxy.Contract.ProxyCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Proxy *ProxyRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Proxy.Contract.ProxyTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Proxy *ProxyRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Proxy.Contract.ProxyTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Proxy *ProxyCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Proxy.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Proxy *ProxyTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Proxy.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Proxy *ProxyTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Proxy.Contract.contract.Transact(opts, method, params...)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_Proxy *ProxyTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _Proxy.contract.RawTransact(opts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_Proxy *ProxySession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _Proxy.Contract.Fallback(&_Proxy.TransactOpts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_Proxy *ProxyTransactorSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _Proxy.Contract.Fallback(&_Proxy.TransactOpts, calldata)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_Proxy *ProxyTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Proxy.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_Proxy *ProxySession) Receive() (*types.Transaction, error) {
	return _Proxy.Contract.Receive(&_Proxy.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_Proxy *ProxyTransactorSession) Receive() (*types.Transaction, error) {
	return _Proxy.Contract.Receive(&_Proxy.TransactOpts)
}

// ProxyAdminMetaData contains all meta data concerning the ProxyAdmin contract.
var ProxyAdminMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"contractTransparentUpgradeableProxy\",\"name\":\"proxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeProxyAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractTransparentUpgradeableProxy\",\"name\":\"proxy\",\"type\":\"address\"}],\"name\":\"getProxyAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractTransparentUpgradeableProxy\",\"name\":\"proxy\",\"type\":\"address\"}],\"name\":\"getProxyImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractTransparentUpgradeableProxy\",\"name\":\"proxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"upgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractTransparentUpgradeableProxy\",\"name\":\"proxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
	Bin: "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61078d8061007e6000396000f3fe60806040526004361061007b5760003560e01c80639623609d1161004e5780639623609d1461011157806399a88ec414610124578063f2fde38b14610144578063f3b7dead1461016457600080fd5b8063204e1c7a14610080578063715018a6146100bc5780637eff275e146100d35780638da5cb5b146100f3575b600080fd5b34801561008c57600080fd5b506100a061009b366004610579565b610184565b6040516001600160a01b03909116815260200160405180910390f35b3480156100c857600080fd5b506100d161022e565b005b3480156100df57600080fd5b506100d16100ee36600461059d565b610242565b3480156100ff57600080fd5b506000546001600160a01b03166100a0565b6100d161011f366004610605565b6102c3565b34801561013057600080fd5b506100d161013f36600461059d565b61034b565b34801561015057600080fd5b506100d161015f366004610579565b61039a565b34801561017057600080fd5b506100a061017f366004610579565b610449565b6000806000836001600160a01b03166040516101c3907f5c60da1b00000000000000000000000000000000000000000000000000000000815260040190565b600060405180830381855afa9150503d80600081146101fe576040519150601f19603f3d011682016040523d82523d6000602084013e610203565b606091505b50915091508161021257600080fd5b8080602001905181019061022691906106db565b949350505050565b610236610488565b61024060006104fc565b565b61024a610488565b6040517f8f2839700000000000000000000000000000000000000000000000000000000081526001600160a01b038281166004830152831690638f283970906024015b600060405180830381600087803b1580156102a757600080fd5b505af11580156102bb573d6000803e3d6000fd5b505050505050565b6102cb610488565b6040517f4f1ef2860000000000000000000000000000000000000000000000000000000081526001600160a01b03841690634f1ef28690349061031490869086906004016106f8565b6000604051808303818588803b15801561032d57600080fd5b505af1158015610341573d6000803e3d6000fd5b5050505050505050565b610353610488565b6040517f3659cfe60000000000000000000000000000000000000000000000000000000081526001600160a01b038281166004830152831690633659cfe69060240161028d565b6103a2610488565b6001600160a01b03811661043d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b610446816104fc565b50565b6000806000836001600160a01b03166040516101c3907ff851a44000000000000000000000000000000000000000000000000000000000815260040190565b6000546001600160a01b03163314610240576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610434565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b038116811461044657600080fd5b60006020828403121561058b57600080fd5b813561059681610564565b9392505050565b600080604083850312156105b057600080fd5b82356105bb81610564565b915060208301356105cb81610564565b809150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60008060006060848603121561061a57600080fd5b833561062581610564565b9250602084013561063581610564565b9150604084013567ffffffffffffffff8082111561065257600080fd5b818601915086601f83011261066657600080fd5b813581811115610678576106786105d6565b604051601f8201601f19908116603f011681019083821181831017156106a0576106a06105d6565b816040528281528960208487010111156106b957600080fd5b8260208601602083013760006020848301015280955050505050509250925092565b6000602082840312156106ed57600080fd5b815161059681610564565b6001600160a01b038316815260006020604081840152835180604085015260005b8181101561073557858101830151858201606001528201610719565b506000606082860101526060601f19601f83011685010192505050939250505056fea2646970667358221220245f8534660d36db82d113098fe5cc6a3c634fc91ffac9443c9274b73e3a990564736f6c63430008110033",
}

// ProxyAdminABI is the input ABI used to generate the binding from.
// Deprecated: Use ProxyAdminMetaData.ABI instead.
var ProxyAdminABI = ProxyAdminMetaData.ABI

// ProxyAdminBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ProxyAdminMetaData.Bin instead.
var ProxyAdminBin = ProxyAdminMetaData.Bin

// DeployProxyAdmin deploys a new Ethereum contract, binding an instance of ProxyAdmin to it.
func DeployProxyAdmin(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ProxyAdmin, error) {
	parsed, err := ProxyAdminMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ProxyAdminBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ProxyAdmin{ProxyAdminCaller: ProxyAdminCaller{contract: contract}, ProxyAdminTransactor: ProxyAdminTransactor{contract: contract}, ProxyAdminFilterer: ProxyAdminFilterer{contract: contract}}, nil
}

// ProxyAdmin is an auto generated Go binding around an Ethereum contract.
type ProxyAdmin struct {
	ProxyAdminCaller     // Read-only binding to the contract
	ProxyAdminTransactor // Write-only binding to the contract
	ProxyAdminFilterer   // Log filterer for contract events
}

// ProxyAdminCaller is an auto generated read-only Go binding around an Ethereum contract.
type ProxyAdminCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ProxyAdminTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ProxyAdminTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ProxyAdminFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ProxyAdminFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ProxyAdminSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ProxyAdminSession struct {
	Contract     *ProxyAdmin       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ProxyAdminCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ProxyAdminCallerSession struct {
	Contract *ProxyAdminCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// ProxyAdminTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ProxyAdminTransactorSession struct {
	Contract     *ProxyAdminTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// ProxyAdminRaw is an auto generated low-level Go binding around an Ethereum contract.
type ProxyAdminRaw struct {
	Contract *ProxyAdmin // Generic contract binding to access the raw methods on
}

// ProxyAdminCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ProxyAdminCallerRaw struct {
	Contract *ProxyAdminCaller // Generic read-only contract binding to access the raw methods on
}

// ProxyAdminTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ProxyAdminTransactorRaw struct {
	Contract *ProxyAdminTransactor // Generic write-only contract binding to access the raw methods on
}

// NewProxyAdmin creates a new instance of ProxyAdmin, bound to a specific deployed contract.
func NewProxyAdmin(address common.Address, backend bind.ContractBackend) (*ProxyAdmin, error) {
	contract, err := bindProxyAdmin(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ProxyAdmin{ProxyAdminCaller: ProxyAdminCaller{contract: contract}, ProxyAdminTransactor: ProxyAdminTransactor{contract: contract}, ProxyAdminFilterer: ProxyAdminFilterer{contract: contract}}, nil
}

// NewProxyAdminCaller creates a new read-only instance of ProxyAdmin, bound to a specific deployed contract.
func NewProxyAdminCaller(address common.Address, caller bind.ContractCaller) (*ProxyAdminCaller, error) {
	contract, err := bindProxyAdmin(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ProxyAdminCaller{contract: contract}, nil
}

// NewProxyAdminTransactor creates a new write-only instance of ProxyAdmin, bound to a specific deployed contract.
func NewProxyAdminTransactor(address common.Address, transactor bind.ContractTransactor) (*ProxyAdminTransactor, error) {
	contract, err := bindProxyAdmin(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ProxyAdminTransactor{contract: contract}, nil
}

// NewProxyAdminFilterer creates a new log filterer instance of ProxyAdmin, bound to a specific deployed contract.
func NewProxyAdminFilterer(address common.Address, filterer bind.ContractFilterer) (*ProxyAdminFilterer, error) {
	contract, err := bindProxyAdmin(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ProxyAdminFilterer{contract: contract}, nil
}

// bindProxyAdmin binds a generic wrapper to an already deployed contract.
func bindProxyAdmin(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ProxyAdminMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ProxyAdmin *ProxyAdminRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ProxyAdmin.Contract.ProxyAdminCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ProxyAdmin *ProxyAdminRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ProxyAdmin.Contract.ProxyAdminTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ProxyAdmin *ProxyAdminRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ProxyAdmin.Contract.ProxyAdminTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ProxyAdmin *ProxyAdminCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ProxyAdmin.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ProxyAdmin *ProxyAdminTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ProxyAdmin.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ProxyAdmin *ProxyAdminTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ProxyAdmin.Contract.contract.Transact(opts, method, params...)
}

// GetProxyAdmin is a free data retrieval call binding the contract method 0xf3b7dead.
//
// Solidity: function getProxyAdmin(address proxy) view returns(address)
func (_ProxyAdmin *ProxyAdminCaller) GetProxyAdmin(opts *bind.CallOpts, proxy common.Address) (common.Address, error) {
	var out []interface{}
	err := _ProxyAdmin.contract.Call(opts, &out, "getProxyAdmin", proxy)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetProxyAdmin is a free data retrieval call binding the contract method 0xf3b7dead.
//
// Solidity: function getProxyAdmin(address proxy) view returns(address)
func (_ProxyAdmin *ProxyAdminSession) GetProxyAdmin(proxy common.Address) (common.Address, error) {
	return _ProxyAdmin.Contract.GetProxyAdmin(&_ProxyAdmin.CallOpts, proxy)
}

// GetProxyAdmin is a free data retrieval call binding the contract method 0xf3b7dead.
//
// Solidity: function getProxyAdmin(address proxy) view returns(address)
func (_ProxyAdmin *ProxyAdminCallerSession) GetProxyAdmin(proxy common.Address) (common.Address, error) {
	return _ProxyAdmin.Contract.GetProxyAdmin(&_ProxyAdmin.CallOpts, proxy)
}

// GetProxyImplementation is a free data retrieval call binding the contract method 0x204e1c7a.
//
// Solidity: function getProxyImplementation(address proxy) view returns(address)
func (_ProxyAdmin *ProxyAdminCaller) GetProxyImplementation(opts *bind.CallOpts, proxy common.Address) (common.Address, error) {
	var out []interface{}
	err := _ProxyAdmin.contract.Call(opts, &out, "getProxyImplementation", proxy)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetProxyImplementation is a free data retrieval call binding the contract method 0x204e1c7a.
//
// Solidity: function getProxyImplementation(address proxy) view returns(address)
func (_ProxyAdmin *ProxyAdminSession) GetProxyImplementation(proxy common.Address) (common.Address, error) {
	return _ProxyAdmin.Contract.GetProxyImplementation(&_ProxyAdmin.CallOpts, proxy)
}

// GetProxyImplementation is a free data retrieval call binding the contract method 0x204e1c7a.
//
// Solidity: function getProxyImplementation(address proxy) view returns(address)
func (_ProxyAdmin *ProxyAdminCallerSession) GetProxyImplementation(proxy common.Address) (common.Address, error) {
	return _ProxyAdmin.Contract.GetProxyImplementation(&_ProxyAdmin.CallOpts, proxy)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ProxyAdmin *ProxyAdminCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ProxyAdmin.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ProxyAdmin *ProxyAdminSession) Owner() (common.Address, error) {
	return _ProxyAdmin.Contract.Owner(&_ProxyAdmin.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ProxyAdmin *ProxyAdminCallerSession) Owner() (common.Address, error) {
	return _ProxyAdmin.Contract.Owner(&_ProxyAdmin.CallOpts)
}

// ChangeProxyAdmin is a paid mutator transaction binding the contract method 0x7eff275e.
//
// Solidity: function changeProxyAdmin(address proxy, address newAdmin) returns()
func (_ProxyAdmin *ProxyAdminTransactor) ChangeProxyAdmin(opts *bind.TransactOpts, proxy common.Address, newAdmin common.Address) (*types.Transaction, error) {
	return _ProxyAdmin.contract.Transact(opts, "changeProxyAdmin", proxy, newAdmin)
}

// ChangeProxyAdmin is a paid mutator transaction binding the contract method 0x7eff275e.
//
// Solidity: function changeProxyAdmin(address proxy, address newAdmin) returns()
func (_ProxyAdmin *ProxyAdminSession) ChangeProxyAdmin(proxy common.Address, newAdmin common.Address) (*types.Transaction, error) {
	return _ProxyAdmin.Contract.ChangeProxyAdmin(&_ProxyAdmin.TransactOpts, proxy, newAdmin)
}

// ChangeProxyAdmin is a paid mutator transaction binding the contract method 0x7eff275e.
//
// Solidity: function changeProxyAdmin(address proxy, address newAdmin) returns()
func (_ProxyAdmin *ProxyAdminTransactorSession) ChangeProxyAdmin(proxy common.Address, newAdmin common.Address) (*types.Transaction, error) {
	return _ProxyAdmin.Contract.ChangeProxyAdmin(&_ProxyAdmin.TransactOpts, proxy, newAdmin)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ProxyAdmin *ProxyAdminTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ProxyAdmin.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ProxyAdmin *ProxyAdminSession) RenounceOwnership() (*types.Transaction, error) {
	return _ProxyAdmin.Contract.RenounceOwnership(&_ProxyAdmin.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ProxyAdmin *ProxyAdminTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _ProxyAdmin.Contract.RenounceOwnership(&_ProxyAdmin.TransactOpts)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ProxyAdmin *ProxyAdminTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _ProxyAdmin.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ProxyAdmin *ProxyAdminSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ProxyAdmin.Contract.TransferOwnership(&_ProxyAdmin.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ProxyAdmin *ProxyAdminTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ProxyAdmin.Contract.TransferOwnership(&_ProxyAdmin.TransactOpts, newOwner)
}

// Upgrade is a paid mutator transaction binding the contract method 0x99a88ec4.
//
// Solidity: function upgrade(address proxy, address implementation) returns()
func (_ProxyAdmin *ProxyAdminTransactor) Upgrade(opts *bind.TransactOpts, proxy common.Address, implementation common.Address) (*types.Transaction, error) {
	return _ProxyAdmin.contract.Transact(opts, "upgrade", proxy, implementation)
}

// Upgrade is a paid mutator transaction binding the contract method 0x99a88ec4.
//
// Solidity: function upgrade(address proxy, address implementation) returns()
func (_ProxyAdmin *ProxyAdminSession) Upgrade(proxy common.Address, implementation common.Address) (*types.Transaction, error) {
	return _ProxyAdmin.Contract.Upgrade(&_ProxyAdmin.TransactOpts, proxy, implementation)
}

// Upgrade is a paid mutator transaction binding the contract method 0x99a88ec4.
//
// Solidity: function upgrade(address proxy, address implementation) returns()
func (_ProxyAdmin *ProxyAdminTransactorSession) Upgrade(proxy common.Address, implementation common.Address) (*types.Transaction, error) {
	return _ProxyAdmin.Contract.Upgrade(&_ProxyAdmin.TransactOpts, proxy, implementation)
}

// UpgradeAndCall is a paid mutator transaction binding the contract method 0x9623609d.
//
// Solidity: function upgradeAndCall(address proxy, address implementation, bytes data) payable returns()
func (_ProxyAdmin *ProxyAdminTransactor) UpgradeAndCall(opts *bind.TransactOpts, proxy common.Address, implementation common.Address, data []byte) (*types.Transaction, error) {
	return _ProxyAdmin.contract.Transact(opts, "upgradeAndCall", proxy, implementation, data)
}

// UpgradeAndCall is a paid mutator transaction binding the contract method 0x9623609d.
//
// Solidity: function upgradeAndCall(address proxy, address implementation, bytes data) payable returns()
func (_ProxyAdmin *ProxyAdminSession) UpgradeAndCall(proxy common.Address, implementation common.Address, data []byte) (*types.Transaction, error) {
	return _ProxyAdmin.Contract.UpgradeAndCall(&_ProxyAdmin.TransactOpts, proxy, implementation, data)
}

// UpgradeAndCall is a paid mutator transaction binding the contract method 0x9623609d.
//
// Solidity: function upgradeAndCall(address proxy, address implementation, bytes data) payable returns()
func (_ProxyAdmin *ProxyAdminTransactorSession) UpgradeAndCall(proxy common.Address, implementation common.Address, data []byte) (*types.Transaction, error) {
	return _ProxyAdmin.Contract.UpgradeAndCall(&_ProxyAdmin.TransactOpts, proxy, implementation, data)
}

// ProxyAdminOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the ProxyAdmin contract.
type ProxyAdminOwnershipTransferredIterator struct {
	Event *ProxyAdminOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProxyAdminOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProxyAdminOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProxyAdminOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProxyAdminOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProxyAdminOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProxyAdminOwnershipTransferred represents a OwnershipTransferred event raised by the ProxyAdmin contract.
type ProxyAdminOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ProxyAdmin *ProxyAdminFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*ProxyAdminOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ProxyAdmin.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &ProxyAdminOwnershipTransferredIterator{contract: _ProxyAdmin.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ProxyAdmin *ProxyAdminFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *ProxyAdminOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ProxyAdmin.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProxyAdminOwnershipTransferred)
				if err := _ProxyAdmin.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ProxyAdmin *ProxyAdminFilterer) ParseOwnershipTransferred(log types.Log) (*ProxyAdminOwnershipTransferred, error) {
	event := new(ProxyAdminOwnershipTransferred)
	if err := _ProxyAdmin.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ProxyAdminForBindingMetaData contains all meta data concerning the ProxyAdminForBinding contract.
var ProxyAdminForBindingMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"contractTransparentUpgradeableProxy\",\"name\":\"proxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeProxyAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractTransparentUpgradeableProxy\",\"name\":\"proxy\",\"type\":\"address\"}],\"name\":\"getProxyAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractTransparentUpgradeableProxy\",\"name\":\"proxy\",\"type\":\"address\"}],\"name\":\"getProxyImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractTransparentUpgradeableProxy\",\"name\":\"proxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"upgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractTransparentUpgradeableProxy\",\"name\":\"proxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
	Bin: "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61078d8061007e6000396000f3fe60806040526004361061007b5760003560e01c80639623609d1161004e5780639623609d1461011157806399a88ec414610124578063f2fde38b14610144578063f3b7dead1461016457600080fd5b8063204e1c7a14610080578063715018a6146100bc5780637eff275e146100d35780638da5cb5b146100f3575b600080fd5b34801561008c57600080fd5b506100a061009b366004610579565b610184565b6040516001600160a01b03909116815260200160405180910390f35b3480156100c857600080fd5b506100d161022e565b005b3480156100df57600080fd5b506100d16100ee36600461059d565b610242565b3480156100ff57600080fd5b506000546001600160a01b03166100a0565b6100d161011f366004610605565b6102c3565b34801561013057600080fd5b506100d161013f36600461059d565b61034b565b34801561015057600080fd5b506100d161015f366004610579565b61039a565b34801561017057600080fd5b506100a061017f366004610579565b610449565b6000806000836001600160a01b03166040516101c3907f5c60da1b00000000000000000000000000000000000000000000000000000000815260040190565b600060405180830381855afa9150503d80600081146101fe576040519150601f19603f3d011682016040523d82523d6000602084013e610203565b606091505b50915091508161021257600080fd5b8080602001905181019061022691906106db565b949350505050565b610236610488565b61024060006104fc565b565b61024a610488565b6040517f8f2839700000000000000000000000000000000000000000000000000000000081526001600160a01b038281166004830152831690638f283970906024015b600060405180830381600087803b1580156102a757600080fd5b505af11580156102bb573d6000803e3d6000fd5b505050505050565b6102cb610488565b6040517f4f1ef2860000000000000000000000000000000000000000000000000000000081526001600160a01b03841690634f1ef28690349061031490869086906004016106f8565b6000604051808303818588803b15801561032d57600080fd5b505af1158015610341573d6000803e3d6000fd5b5050505050505050565b610353610488565b6040517f3659cfe60000000000000000000000000000000000000000000000000000000081526001600160a01b038281166004830152831690633659cfe69060240161028d565b6103a2610488565b6001600160a01b03811661043d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b610446816104fc565b50565b6000806000836001600160a01b03166040516101c3907ff851a44000000000000000000000000000000000000000000000000000000000815260040190565b6000546001600160a01b03163314610240576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610434565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b038116811461044657600080fd5b60006020828403121561058b57600080fd5b813561059681610564565b9392505050565b600080604083850312156105b057600080fd5b82356105bb81610564565b915060208301356105cb81610564565b809150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60008060006060848603121561061a57600080fd5b833561062581610564565b9250602084013561063581610564565b9150604084013567ffffffffffffffff8082111561065257600080fd5b818601915086601f83011261066657600080fd5b813581811115610678576106786105d6565b604051601f8201601f19908116603f011681019083821181831017156106a0576106a06105d6565b816040528281528960208487010111156106b957600080fd5b8260208601602083013760006020848301015280955050505050509250925092565b6000602082840312156106ed57600080fd5b815161059681610564565b6001600160a01b038316815260006020604081840152835180604085015260005b8181101561073557858101830151858201606001528201610719565b506000606082860101526060601f19601f83011685010192505050939250505056fea2646970667358221220b9ffd33711bb1b3959fc85c478c8286ed50968a0bb550ecb960c56b87818ca1e64736f6c63430008110033",
}

// ProxyAdminForBindingABI is the input ABI used to generate the binding from.
// Deprecated: Use ProxyAdminForBindingMetaData.ABI instead.
var ProxyAdminForBindingABI = ProxyAdminForBindingMetaData.ABI

// ProxyAdminForBindingBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ProxyAdminForBindingMetaData.Bin instead.
var ProxyAdminForBindingBin = ProxyAdminForBindingMetaData.Bin

// DeployProxyAdminForBinding deploys a new Ethereum contract, binding an instance of ProxyAdminForBinding to it.
func DeployProxyAdminForBinding(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ProxyAdminForBinding, error) {
	parsed, err := ProxyAdminForBindingMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ProxyAdminForBindingBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ProxyAdminForBinding{ProxyAdminForBindingCaller: ProxyAdminForBindingCaller{contract: contract}, ProxyAdminForBindingTransactor: ProxyAdminForBindingTransactor{contract: contract}, ProxyAdminForBindingFilterer: ProxyAdminForBindingFilterer{contract: contract}}, nil
}

// ProxyAdminForBinding is an auto generated Go binding around an Ethereum contract.
type ProxyAdminForBinding struct {
	ProxyAdminForBindingCaller     // Read-only binding to the contract
	ProxyAdminForBindingTransactor // Write-only binding to the contract
	ProxyAdminForBindingFilterer   // Log filterer for contract events
}

// ProxyAdminForBindingCaller is an auto generated read-only Go binding around an Ethereum contract.
type ProxyAdminForBindingCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ProxyAdminForBindingTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ProxyAdminForBindingTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ProxyAdminForBindingFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ProxyAdminForBindingFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ProxyAdminForBindingSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ProxyAdminForBindingSession struct {
	Contract     *ProxyAdminForBinding // Generic contract binding to set the session for
	CallOpts     bind.CallOpts         // Call options to use throughout this session
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// ProxyAdminForBindingCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ProxyAdminForBindingCallerSession struct {
	Contract *ProxyAdminForBindingCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts               // Call options to use throughout this session
}

// ProxyAdminForBindingTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ProxyAdminForBindingTransactorSession struct {
	Contract     *ProxyAdminForBindingTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts               // Transaction auth options to use throughout this session
}

// ProxyAdminForBindingRaw is an auto generated low-level Go binding around an Ethereum contract.
type ProxyAdminForBindingRaw struct {
	Contract *ProxyAdminForBinding // Generic contract binding to access the raw methods on
}

// ProxyAdminForBindingCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ProxyAdminForBindingCallerRaw struct {
	Contract *ProxyAdminForBindingCaller // Generic read-only contract binding to access the raw methods on
}

// ProxyAdminForBindingTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ProxyAdminForBindingTransactorRaw struct {
	Contract *ProxyAdminForBindingTransactor // Generic write-only contract binding to access the raw methods on
}

// NewProxyAdminForBinding creates a new instance of ProxyAdminForBinding, bound to a specific deployed contract.
func NewProxyAdminForBinding(address common.Address, backend bind.ContractBackend) (*ProxyAdminForBinding, error) {
	contract, err := bindProxyAdminForBinding(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ProxyAdminForBinding{ProxyAdminForBindingCaller: ProxyAdminForBindingCaller{contract: contract}, ProxyAdminForBindingTransactor: ProxyAdminForBindingTransactor{contract: contract}, ProxyAdminForBindingFilterer: ProxyAdminForBindingFilterer{contract: contract}}, nil
}

// NewProxyAdminForBindingCaller creates a new read-only instance of ProxyAdminForBinding, bound to a specific deployed contract.
func NewProxyAdminForBindingCaller(address common.Address, caller bind.ContractCaller) (*ProxyAdminForBindingCaller, error) {
	contract, err := bindProxyAdminForBinding(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ProxyAdminForBindingCaller{contract: contract}, nil
}

// NewProxyAdminForBindingTransactor creates a new write-only instance of ProxyAdminForBinding, bound to a specific deployed contract.
func NewProxyAdminForBindingTransactor(address common.Address, transactor bind.ContractTransactor) (*ProxyAdminForBindingTransactor, error) {
	contract, err := bindProxyAdminForBinding(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ProxyAdminForBindingTransactor{contract: contract}, nil
}

// NewProxyAdminForBindingFilterer creates a new log filterer instance of ProxyAdminForBinding, bound to a specific deployed contract.
func NewProxyAdminForBindingFilterer(address common.Address, filterer bind.ContractFilterer) (*ProxyAdminForBindingFilterer, error) {
	contract, err := bindProxyAdminForBinding(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ProxyAdminForBindingFilterer{contract: contract}, nil
}

// bindProxyAdminForBinding binds a generic wrapper to an already deployed contract.
func bindProxyAdminForBinding(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ProxyAdminForBindingMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ProxyAdminForBinding *ProxyAdminForBindingRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ProxyAdminForBinding.Contract.ProxyAdminForBindingCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ProxyAdminForBinding *ProxyAdminForBindingRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ProxyAdminForBinding.Contract.ProxyAdminForBindingTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ProxyAdminForBinding *ProxyAdminForBindingRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ProxyAdminForBinding.Contract.ProxyAdminForBindingTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ProxyAdminForBinding *ProxyAdminForBindingCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ProxyAdminForBinding.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ProxyAdminForBinding *ProxyAdminForBindingTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ProxyAdminForBinding.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ProxyAdminForBinding *ProxyAdminForBindingTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ProxyAdminForBinding.Contract.contract.Transact(opts, method, params...)
}

// GetProxyAdmin is a free data retrieval call binding the contract method 0xf3b7dead.
//
// Solidity: function getProxyAdmin(address proxy) view returns(address)
func (_ProxyAdminForBinding *ProxyAdminForBindingCaller) GetProxyAdmin(opts *bind.CallOpts, proxy common.Address) (common.Address, error) {
	var out []interface{}
	err := _ProxyAdminForBinding.contract.Call(opts, &out, "getProxyAdmin", proxy)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetProxyAdmin is a free data retrieval call binding the contract method 0xf3b7dead.
//
// Solidity: function getProxyAdmin(address proxy) view returns(address)
func (_ProxyAdminForBinding *ProxyAdminForBindingSession) GetProxyAdmin(proxy common.Address) (common.Address, error) {
	return _ProxyAdminForBinding.Contract.GetProxyAdmin(&_ProxyAdminForBinding.CallOpts, proxy)
}

// GetProxyAdmin is a free data retrieval call binding the contract method 0xf3b7dead.
//
// Solidity: function getProxyAdmin(address proxy) view returns(address)
func (_ProxyAdminForBinding *ProxyAdminForBindingCallerSession) GetProxyAdmin(proxy common.Address) (common.Address, error) {
	return _ProxyAdminForBinding.Contract.GetProxyAdmin(&_ProxyAdminForBinding.CallOpts, proxy)
}

// GetProxyImplementation is a free data retrieval call binding the contract method 0x204e1c7a.
//
// Solidity: function getProxyImplementation(address proxy) view returns(address)
func (_ProxyAdminForBinding *ProxyAdminForBindingCaller) GetProxyImplementation(opts *bind.CallOpts, proxy common.Address) (common.Address, error) {
	var out []interface{}
	err := _ProxyAdminForBinding.contract.Call(opts, &out, "getProxyImplementation", proxy)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetProxyImplementation is a free data retrieval call binding the contract method 0x204e1c7a.
//
// Solidity: function getProxyImplementation(address proxy) view returns(address)
func (_ProxyAdminForBinding *ProxyAdminForBindingSession) GetProxyImplementation(proxy common.Address) (common.Address, error) {
	return _ProxyAdminForBinding.Contract.GetProxyImplementation(&_ProxyAdminForBinding.CallOpts, proxy)
}

// GetProxyImplementation is a free data retrieval call binding the contract method 0x204e1c7a.
//
// Solidity: function getProxyImplementation(address proxy) view returns(address)
func (_ProxyAdminForBinding *ProxyAdminForBindingCallerSession) GetProxyImplementation(proxy common.Address) (common.Address, error) {
	return _ProxyAdminForBinding.Contract.GetProxyImplementation(&_ProxyAdminForBinding.CallOpts, proxy)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ProxyAdminForBinding *ProxyAdminForBindingCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ProxyAdminForBinding.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ProxyAdminForBinding *ProxyAdminForBindingSession) Owner() (common.Address, error) {
	return _ProxyAdminForBinding.Contract.Owner(&_ProxyAdminForBinding.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ProxyAdminForBinding *ProxyAdminForBindingCallerSession) Owner() (common.Address, error) {
	return _ProxyAdminForBinding.Contract.Owner(&_ProxyAdminForBinding.CallOpts)
}

// ChangeProxyAdmin is a paid mutator transaction binding the contract method 0x7eff275e.
//
// Solidity: function changeProxyAdmin(address proxy, address newAdmin) returns()
func (_ProxyAdminForBinding *ProxyAdminForBindingTransactor) ChangeProxyAdmin(opts *bind.TransactOpts, proxy common.Address, newAdmin common.Address) (*types.Transaction, error) {
	return _ProxyAdminForBinding.contract.Transact(opts, "changeProxyAdmin", proxy, newAdmin)
}

// ChangeProxyAdmin is a paid mutator transaction binding the contract method 0x7eff275e.
//
// Solidity: function changeProxyAdmin(address proxy, address newAdmin) returns()
func (_ProxyAdminForBinding *ProxyAdminForBindingSession) ChangeProxyAdmin(proxy common.Address, newAdmin common.Address) (*types.Transaction, error) {
	return _ProxyAdminForBinding.Contract.ChangeProxyAdmin(&_ProxyAdminForBinding.TransactOpts, proxy, newAdmin)
}

// ChangeProxyAdmin is a paid mutator transaction binding the contract method 0x7eff275e.
//
// Solidity: function changeProxyAdmin(address proxy, address newAdmin) returns()
func (_ProxyAdminForBinding *ProxyAdminForBindingTransactorSession) ChangeProxyAdmin(proxy common.Address, newAdmin common.Address) (*types.Transaction, error) {
	return _ProxyAdminForBinding.Contract.ChangeProxyAdmin(&_ProxyAdminForBinding.TransactOpts, proxy, newAdmin)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ProxyAdminForBinding *ProxyAdminForBindingTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ProxyAdminForBinding.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ProxyAdminForBinding *ProxyAdminForBindingSession) RenounceOwnership() (*types.Transaction, error) {
	return _ProxyAdminForBinding.Contract.RenounceOwnership(&_ProxyAdminForBinding.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ProxyAdminForBinding *ProxyAdminForBindingTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _ProxyAdminForBinding.Contract.RenounceOwnership(&_ProxyAdminForBinding.TransactOpts)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ProxyAdminForBinding *ProxyAdminForBindingTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _ProxyAdminForBinding.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ProxyAdminForBinding *ProxyAdminForBindingSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ProxyAdminForBinding.Contract.TransferOwnership(&_ProxyAdminForBinding.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ProxyAdminForBinding *ProxyAdminForBindingTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ProxyAdminForBinding.Contract.TransferOwnership(&_ProxyAdminForBinding.TransactOpts, newOwner)
}

// Upgrade is a paid mutator transaction binding the contract method 0x99a88ec4.
//
// Solidity: function upgrade(address proxy, address implementation) returns()
func (_ProxyAdminForBinding *ProxyAdminForBindingTransactor) Upgrade(opts *bind.TransactOpts, proxy common.Address, implementation common.Address) (*types.Transaction, error) {
	return _ProxyAdminForBinding.contract.Transact(opts, "upgrade", proxy, implementation)
}

// Upgrade is a paid mutator transaction binding the contract method 0x99a88ec4.
//
// Solidity: function upgrade(address proxy, address implementation) returns()
func (_ProxyAdminForBinding *ProxyAdminForBindingSession) Upgrade(proxy common.Address, implementation common.Address) (*types.Transaction, error) {
	return _ProxyAdminForBinding.Contract.Upgrade(&_ProxyAdminForBinding.TransactOpts, proxy, implementation)
}

// Upgrade is a paid mutator transaction binding the contract method 0x99a88ec4.
//
// Solidity: function upgrade(address proxy, address implementation) returns()
func (_ProxyAdminForBinding *ProxyAdminForBindingTransactorSession) Upgrade(proxy common.Address, implementation common.Address) (*types.Transaction, error) {
	return _ProxyAdminForBinding.Contract.Upgrade(&_ProxyAdminForBinding.TransactOpts, proxy, implementation)
}

// UpgradeAndCall is a paid mutator transaction binding the contract method 0x9623609d.
//
// Solidity: function upgradeAndCall(address proxy, address implementation, bytes data) payable returns()
func (_ProxyAdminForBinding *ProxyAdminForBindingTransactor) UpgradeAndCall(opts *bind.TransactOpts, proxy common.Address, implementation common.Address, data []byte) (*types.Transaction, error) {
	return _ProxyAdminForBinding.contract.Transact(opts, "upgradeAndCall", proxy, implementation, data)
}

// UpgradeAndCall is a paid mutator transaction binding the contract method 0x9623609d.
//
// Solidity: function upgradeAndCall(address proxy, address implementation, bytes data) payable returns()
func (_ProxyAdminForBinding *ProxyAdminForBindingSession) UpgradeAndCall(proxy common.Address, implementation common.Address, data []byte) (*types.Transaction, error) {
	return _ProxyAdminForBinding.Contract.UpgradeAndCall(&_ProxyAdminForBinding.TransactOpts, proxy, implementation, data)
}

// UpgradeAndCall is a paid mutator transaction binding the contract method 0x9623609d.
//
// Solidity: function upgradeAndCall(address proxy, address implementation, bytes data) payable returns()
func (_ProxyAdminForBinding *ProxyAdminForBindingTransactorSession) UpgradeAndCall(proxy common.Address, implementation common.Address, data []byte) (*types.Transaction, error) {
	return _ProxyAdminForBinding.Contract.UpgradeAndCall(&_ProxyAdminForBinding.TransactOpts, proxy, implementation, data)
}

// ProxyAdminForBindingOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the ProxyAdminForBinding contract.
type ProxyAdminForBindingOwnershipTransferredIterator struct {
	Event *ProxyAdminForBindingOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProxyAdminForBindingOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProxyAdminForBindingOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProxyAdminForBindingOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProxyAdminForBindingOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProxyAdminForBindingOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProxyAdminForBindingOwnershipTransferred represents a OwnershipTransferred event raised by the ProxyAdminForBinding contract.
type ProxyAdminForBindingOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ProxyAdminForBinding *ProxyAdminForBindingFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*ProxyAdminForBindingOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ProxyAdminForBinding.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &ProxyAdminForBindingOwnershipTransferredIterator{contract: _ProxyAdminForBinding.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ProxyAdminForBinding *ProxyAdminForBindingFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *ProxyAdminForBindingOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ProxyAdminForBinding.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProxyAdminForBindingOwnershipTransferred)
				if err := _ProxyAdminForBinding.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ProxyAdminForBinding *ProxyAdminForBindingFilterer) ParseOwnershipTransferred(log types.Log) (*ProxyAdminForBindingOwnershipTransferred, error) {
	event := new(ProxyAdminForBindingOwnershipTransferred)
	if err := _ProxyAdminForBinding.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SdkStorageMetaData contains all meta data concerning the SdkStorage contract.
var SdkStorageMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"populate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b5061160f806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063a7f437791461003b578063f809f20514610045575b600080fd5b61004361004d565b005b610043610443565b6007805461005a90611219565b159050610121576007805461006e81611219565b8061008957634e487b7160e01b600052603160045260246000fd5b601f811180156100a057600181146100c257610118565b6001826021036101000a03600183039250600283028482191617935050610118565b8360005260206000208260208114610105576020600019808601828104949094018054601f959095169092036101000a0119909216825560011990940193610115565b81546000835560ff1916603e1794505b50505b5050905561004d565b60106008805461013090611219565b905011156101f8576008805461014581611219565b8061016057634e487b7160e01b600052603160045260246000fd5b601f811180156101775760018114610199576101ef565b6001826021036101000a036001830392506002830284821916179350506101ef565b83600052602060002082602081146101dc576020600019808601828104949094018054601f959095169092036101000a01199092168255600119909401936101ec565b81546000835560ff1916603e1794505b50505b50509055610121565b60408051808201909152600f81527f7761736d2069732063757465203c330000000000000000000000000000000000602082015260099061023990826112b8565b505b6005541561028b57600580548061025457610254611396565b600082815260209020600460001990920191820401805467ffffffffffffffff600860038516026101000a0219169055905561023b565b600654600110156102ca5760068054806102a7576102a7611396565b6001900381819060005260206000200160006102c39190610f16565b905561028b565b60005b6008811015610311576000818152600a60205260409020805473ffffffffffffffffffffffffffffffffffffffff1916905580610309816113c2565b9150506102cd565b5060086000908152600a60209081527f2c1fd36ba11b13b555f58753742999069764391f450ca8727fe8a3eeffe67775805473ffffffffffffffffffffffffffffffffffffffff191690911790555b6004816001600160a01b031610156103a5576001600160a01b0381166000908152600b6020526040812061039391610f3b565b8061039d816113dc565b915050610360565b5060048054806103b7576103b7611396565b60008281526020812060026000199390930192830201805465ffffffffffff19168155600101819055915560188190556019819055601a819055601b55610400601c6000610f60565b61040c601d6000610f81565b6021805465ffffffffffff19908116909155600060228190556023805483169055602481905560258054909216909155602655565b565b600080547fffffffffffffffffffffff0000000000000000000000000000000000000000001661700117815560018054603073ffffffffffffffffffffffffffffffffffffffff199091161790556002805465ffffffffffff1916657fffffff002017905560406003555b60208167ffffffffffffffff16101561053157600580546001810182556000919091527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db06004820401805460039092166008026101000a67ffffffffffffffff81810219909316928416029190911790558061052981611402565b9150506104ae565b50604d60056007815481106105485761054861141f565b90600052602060002090600491828204019190066008026101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060005b600a81101561068f5760068167ffffffffffffffff8111156105aa576105aa611253565b6040519080825280602002602001820160405280156105d3578160200160208202803683370190505b508154600181018355600092835260209283902082516105f99491909201920190610fbd565b5060005b8181101561067c5780600683815481106106195761061961141f565b9060005260206000200182815481106106345761063461141f565b90600052602060002090600691828204019190066005026101000a81548164ffffffffff021916908364ffffffffff1602179055508080610674906113c2565b9150506105fd565b5080610687816113c2565b915050610586565b5060005b600a8110156107515760005b8181101561073e576002600683815481106106bc576106bc61141f565b9060005260206000200182815481106106d7576106d761141f565b90600052602060002090600691828204019190066005028282829054906101000a900464ffffffffff1661070b9190611435565b92506101000a81548164ffffffffff021916908364ffffffffff1602179055508080610736906113c2565b91505061069f565b5080610749816113c2565b915050610693565b5060005b601f8160ff1610156107a55760078160405160200161077592919061145e565b6040516020818303038152906040526007908161079291906112b8565b508061079d81611500565b915050610755565b5060005b60508160ff1610156107f9576008816040516020016107c992919061145e565b604051602081830303815290604052600890816107e691906112b8565b50806107f181611500565b9150506107a9565b5060408051808201909152600f81527f617262697472756d207374796c75730000000000000000000000000000000000602082015260099061083b90826112b8565b5060005b601081101561088e576000818152600a60205260409020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03831617905580610886816113c2565b91505061083f565b5060005b6004816001600160a01b031610156109525760408051600080825260208083018085526001600160a01b0386168352600b90915292902090516108d5929061106f565b5060005b816001600160a01b0316811161093f576001600160a01b0382166000908152600b60209081526040822080546001810182559083529181902090820401805460ff601f9093166101000a9283021916909117905580610937816113c2565b9150506108d9565b508061094a816113dc565b915050610892565b5060005b60048160030b12156109e257600c8054600101808255600082905263ffffffff831691908290811061098a5761098a61141f565b60009182526020808320600386900b845291909101905260409020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055806109da8161151f565b915050610956565b5060005b60048160ff161015610a6c576109fd816001611538565b7fff0000000000000000000000000000000000000000000000000000000000000060f883901b166000908152600d6020526040812060ff929092169190610a45600285611557565b60ff1615815260208101919091526040016000205580610a6481611500565b9150506109e6565b506040517f7374796c757300000000000000000000000000000000000000000000000000008152600290600e906006019081526040519081900360200190208154815461ffff19811661ffff9092169182178355835463ffffffff6201000091829004160265ffffffffffff1990911690911717815560019182015491015560005b6004811015610ba25760048054600181018255600091909152600280547f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b928202928301805461ffff90921661ffff19831681178255925465ffffffffffff19909216909217620100009182900463ffffffff169091021790556003547f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19c9091015580610b9a816113c2565b915050610aee565b5060408051808201909152600e81527f4c3220697320666f7220796f75210000000000000000000000000000000000006020820152601190610be490826112b8565b5060005b6005811015610c3f578060148160058110610c0557610c0561141f565b600a91828204019190066003026101000a81548162ffffff021916908362ffffff1602179055508080610c37906113c2565b915050610be8565b5060005b6002811015610c9e578060168160028110610c6057610c6061141f565b01805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b039290921691909117905580610c96816113c2565b915050610c43565b5060005b6004811015610d51578060188160048110610cbf57610cbf61141f565b01805460ff191660ff9290921691909117905560188160048110610ce557610ce561141f565b0154610cf59060ff166001611538565b60188260048110610d0857610d0861141f565b01805460ff92909216610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff90921691909117905580610d49816113c2565b915050610ca2565b5060005b6003811015610dfb57610d66611102565b60005b6004811215610da45780828260048110610d8557610d8561141f565b600b9290920b6020909202015280610d9c81611587565b915050610d69565b50601c8054600181018255600091909152610de6906002027f0e4562a10381dec21b205ed72637e6b1b523bdd0e4d4d50af5cd23dd4500a21101826004611120565b50508080610df3906113c2565b915050610d55565b5060005b6004811015610e935760005b600481600b0b1215610e8057601d8260048110610e2a57610e2a61141f565b01805460018082018355600092835260209092206002820401805492909116600c026101000a6bffffffffffffffffffffffff818102199093169284160291909117905580610e78816115b8565b915050610e0b565b5080610e8b816113c2565b915050610dff565b5060005b6003811015610f1357600260218260038110610eb557610eb561141f565b825460029190910291909101805461ffff90921661ffff19831681178255835465ffffffffffff1990931617620100009283900463ffffffff1690920291909117815560019182015491015580610f0b816113c2565b915050610e97565b50565b508054600082556005016006900490600052602060002090810190610f1391906111c5565b50805460008255601f016020900490600052602060002090810190610f1391906111c5565b5080546000825560020290600052602060002090810190610f1391906111da565b506000610f8e82826111f4565b506001016000610f9e82826111f4565b506001016000610fae82826111f4565b506104419060010160006111f4565b8280548282559060005260206000209060050160069004810192821561105f5791602002820160005b8382111561102c57835183826101000a81548164ffffffffff021916908364ffffffffff1602179055509260200192600501602081600401049283019260010302610fe6565b801561105d5782816101000a81549064ffffffffff021916905560050160208160040104928301926001030261102c565b505b5061106b9291506111c5565b5090565b82805482825590600052602060002090601f0160209004810192821561105f5791602002820160005b838211156110d557835183826101000a81548160ff0219169083151502179055509260200192600101602081600001049283019260010302611098565b801561105d5782816101000a81549060ff02191690556001016020816000010492830192600103026110d5565b60405180608001604052806004906020820280368337509192915050565b60028301918390821561105f5791602002820160005b8382111561118d57835183826101000a8154816bffffffffffffffffffffffff0219169083600b0b6bffffffffffffffffffffffff1602179055509260200192600c01602081600b01049283019260010302611136565b801561105d5782816101000a8154906bffffffffffffffffffffffff0219169055600c01602081600b0104928301926001030261118d565b5b8082111561106b57600081556001016111c6565b8082111561106b57600080825560018201556002016111da565b508054600082556001016002900490600052602060002090810190610f1391906111c5565b600181811c9082168061122d57607f821691505b60208210810361124d57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b601f8211156112b357600081815260208120601f850160051c810160208610156112905750805b601f850160051c820191505b818110156112af5782815560010161129c565b5050505b505050565b815167ffffffffffffffff8111156112d2576112d2611253565b6112e6816112e08454611219565b84611269565b602080601f83116001811461131b57600084156113035750858301515b600019600386901b1c1916600185901b1785556112af565b6000858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08616915b8281101561136857888601518255948401946001909101908401611349565b50858210156113865787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060001982036113d5576113d56113ac565b5060010190565b60006001600160a01b038083168181036113f8576113f86113ac565b6001019392505050565b600067ffffffffffffffff8083168181036113f8576113f86113ac565b634e487b7160e01b600052603260045260246000fd5b64ffffffffff818116838216028082169190828114611456576114566113ac565b505092915050565b600080845461146c81611219565b600182811680156114845760018114611499576114c8565b60ff19841687528215158302870194506114c8565b8860005260208060002060005b858110156114bf5781548a8201529084019082016114a6565b50505082870194505b5060f89690961b7fff000000000000000000000000000000000000000000000000000000000000001683525050929092019392505050565b600060ff821660ff8103611516576115166113ac565b60010192915050565b60008160030b637fffffff8103611516576115166113ac565b60ff8181168382160190811115611551576115516113ac565b92915050565b600060ff83168061157857634e487b7160e01b600052601260045260246000fd5b8060ff84160691505092915050565b60007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036113d5576113d56113ac565b600081600b0b6b7fffffffffffffffffffffff8103611516576115166113ac56fea26469706673582212202c23731eadbcb25b8ca841b76c2ad2890ff94d085f889792ca66c835f2fb8ae964736f6c63430008110033",
}

// SdkStorageABI is the input ABI used to generate the binding from.
// Deprecated: Use SdkStorageMetaData.ABI instead.
var SdkStorageABI = SdkStorageMetaData.ABI

// SdkStorageBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use SdkStorageMetaData.Bin instead.
var SdkStorageBin = SdkStorageMetaData.Bin

// DeploySdkStorage deploys a new Ethereum contract, binding an instance of SdkStorage to it.
func DeploySdkStorage(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *SdkStorage, error) {
	parsed, err := SdkStorageMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(SdkStorageBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &SdkStorage{SdkStorageCaller: SdkStorageCaller{contract: contract}, SdkStorageTransactor: SdkStorageTransactor{contract: contract}, SdkStorageFilterer: SdkStorageFilterer{contract: contract}}, nil
}

// SdkStorage is an auto generated Go binding around an Ethereum contract.
type SdkStorage struct {
	SdkStorageCaller     // Read-only binding to the contract
	SdkStorageTransactor // Write-only binding to the contract
	SdkStorageFilterer   // Log filterer for contract events
}

// SdkStorageCaller is an auto generated read-only Go binding around an Ethereum contract.
type SdkStorageCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SdkStorageTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SdkStorageTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SdkStorageFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SdkStorageFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SdkStorageSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SdkStorageSession struct {
	Contract     *SdkStorage       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SdkStorageCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SdkStorageCallerSession struct {
	Contract *SdkStorageCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// SdkStorageTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SdkStorageTransactorSession struct {
	Contract     *SdkStorageTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// SdkStorageRaw is an auto generated low-level Go binding around an Ethereum contract.
type SdkStorageRaw struct {
	Contract *SdkStorage // Generic contract binding to access the raw methods on
}

// SdkStorageCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SdkStorageCallerRaw struct {
	Contract *SdkStorageCaller // Generic read-only contract binding to access the raw methods on
}

// SdkStorageTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SdkStorageTransactorRaw struct {
	Contract *SdkStorageTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSdkStorage creates a new instance of SdkStorage, bound to a specific deployed contract.
func NewSdkStorage(address common.Address, backend bind.ContractBackend) (*SdkStorage, error) {
	contract, err := bindSdkStorage(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &SdkStorage{SdkStorageCaller: SdkStorageCaller{contract: contract}, SdkStorageTransactor: SdkStorageTransactor{contract: contract}, SdkStorageFilterer: SdkStorageFilterer{contract: contract}}, nil
}

// NewSdkStorageCaller creates a new read-only instance of SdkStorage, bound to a specific deployed contract.
func NewSdkStorageCaller(address common.Address, caller bind.ContractCaller) (*SdkStorageCaller, error) {
	contract, err := bindSdkStorage(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SdkStorageCaller{contract: contract}, nil
}

// NewSdkStorageTransactor creates a new write-only instance of SdkStorage, bound to a specific deployed contract.
func NewSdkStorageTransactor(address common.Address, transactor bind.ContractTransactor) (*SdkStorageTransactor, error) {
	contract, err := bindSdkStorage(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SdkStorageTransactor{contract: contract}, nil
}

// NewSdkStorageFilterer creates a new log filterer instance of SdkStorage, bound to a specific deployed contract.
func NewSdkStorageFilterer(address common.Address, filterer bind.ContractFilterer) (*SdkStorageFilterer, error) {
	contract, err := bindSdkStorage(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SdkStorageFilterer{contract: contract}, nil
}

// bindSdkStorage binds a generic wrapper to an already deployed contract.
func bindSdkStorage(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := SdkStorageMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SdkStorage *SdkStorageRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SdkStorage.Contract.SdkStorageCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SdkStorage *SdkStorageRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SdkStorage.Contract.SdkStorageTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SdkStorage *SdkStorageRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SdkStorage.Contract.SdkStorageTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SdkStorage *SdkStorageCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SdkStorage.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SdkStorage *SdkStorageTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SdkStorage.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SdkStorage *SdkStorageTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SdkStorage.Contract.contract.Transact(opts, method, params...)
}

// Populate is a paid mutator transaction binding the contract method 0xf809f205.
//
// Solidity: function populate() returns()
func (_SdkStorage *SdkStorageTransactor) Populate(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SdkStorage.contract.Transact(opts, "populate")
}

// Populate is a paid mutator transaction binding the contract method 0xf809f205.
//
// Solidity: function populate() returns()
func (_SdkStorage *SdkStorageSession) Populate() (*types.Transaction, error) {
	return _SdkStorage.Contract.Populate(&_SdkStorage.TransactOpts)
}

// Populate is a paid mutator transaction binding the contract method 0xf809f205.
//
// Solidity: function populate() returns()
func (_SdkStorage *SdkStorageTransactorSession) Populate() (*types.Transaction, error) {
	return _SdkStorage.Contract.Populate(&_SdkStorage.TransactOpts)
}

// Remove is a paid mutator transaction binding the contract method 0xa7f43779.
//
// Solidity: function remove() returns()
func (_SdkStorage *SdkStorageTransactor) Remove(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SdkStorage.contract.Transact(opts, "remove")
}

// Remove is a paid mutator transaction binding the contract method 0xa7f43779.
//
// Solidity: function remove() returns()
func (_SdkStorage *SdkStorageSession) Remove() (*types.Transaction, error) {
	return _SdkStorage.Contract.Remove(&_SdkStorage.TransactOpts)
}

// Remove is a paid mutator transaction binding the contract method 0xa7f43779.
//
// Solidity: function remove() returns()
func (_SdkStorage *SdkStorageTransactorSession) Remove() (*types.Transaction, error) {
	return _SdkStorage.Contract.Remove(&_SdkStorage.TransactOpts)
}

// SelfDestructInConstructorWithDestinationMetaData contains all meta data concerning the SelfDestructInConstructorWithDestination contract.
var SelfDestructInConstructorWithDestinationMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"destination\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"}]",
	Bin: "0x608060405260405160593803806059833981016040819052601e91602a565b806001600160a01b0316ff5b600060208284031215603b57600080fd5b81516001600160a01b0381168114605157600080fd5b939250505056fe",
}

// SelfDestructInConstructorWithDestinationABI is the input ABI used to generate the binding from.
// Deprecated: Use SelfDestructInConstructorWithDestinationMetaData.ABI instead.
var SelfDestructInConstructorWithDestinationABI = SelfDestructInConstructorWithDestinationMetaData.ABI

// SelfDestructInConstructorWithDestinationBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use SelfDestructInConstructorWithDestinationMetaData.Bin instead.
var SelfDestructInConstructorWithDestinationBin = SelfDestructInConstructorWithDestinationMetaData.Bin

// DeploySelfDestructInConstructorWithDestination deploys a new Ethereum contract, binding an instance of SelfDestructInConstructorWithDestination to it.
func DeploySelfDestructInConstructorWithDestination(auth *bind.TransactOpts, backend bind.ContractBackend, destination common.Address) (common.Address, *types.Transaction, *SelfDestructInConstructorWithDestination, error) {
	parsed, err := SelfDestructInConstructorWithDestinationMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(SelfDestructInConstructorWithDestinationBin), backend, destination)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &SelfDestructInConstructorWithDestination{SelfDestructInConstructorWithDestinationCaller: SelfDestructInConstructorWithDestinationCaller{contract: contract}, SelfDestructInConstructorWithDestinationTransactor: SelfDestructInConstructorWithDestinationTransactor{contract: contract}, SelfDestructInConstructorWithDestinationFilterer: SelfDestructInConstructorWithDestinationFilterer{contract: contract}}, nil
}

// SelfDestructInConstructorWithDestination is an auto generated Go binding around an Ethereum contract.
type SelfDestructInConstructorWithDestination struct {
	SelfDestructInConstructorWithDestinationCaller     // Read-only binding to the contract
	SelfDestructInConstructorWithDestinationTransactor // Write-only binding to the contract
	SelfDestructInConstructorWithDestinationFilterer   // Log filterer for contract events
}

// SelfDestructInConstructorWithDestinationCaller is an auto generated read-only Go binding around an Ethereum contract.
type SelfDestructInConstructorWithDestinationCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SelfDestructInConstructorWithDestinationTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SelfDestructInConstructorWithDestinationTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SelfDestructInConstructorWithDestinationFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SelfDestructInConstructorWithDestinationFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SelfDestructInConstructorWithDestinationSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SelfDestructInConstructorWithDestinationSession struct {
	Contract     *SelfDestructInConstructorWithDestination // Generic contract binding to set the session for
	CallOpts     bind.CallOpts                             // Call options to use throughout this session
	TransactOpts bind.TransactOpts                         // Transaction auth options to use throughout this session
}

// SelfDestructInConstructorWithDestinationCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SelfDestructInConstructorWithDestinationCallerSession struct {
	Contract *SelfDestructInConstructorWithDestinationCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                                   // Call options to use throughout this session
}

// SelfDestructInConstructorWithDestinationTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SelfDestructInConstructorWithDestinationTransactorSession struct {
	Contract     *SelfDestructInConstructorWithDestinationTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                                   // Transaction auth options to use throughout this session
}

// SelfDestructInConstructorWithDestinationRaw is an auto generated low-level Go binding around an Ethereum contract.
type SelfDestructInConstructorWithDestinationRaw struct {
	Contract *SelfDestructInConstructorWithDestination // Generic contract binding to access the raw methods on
}

// SelfDestructInConstructorWithDestinationCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SelfDestructInConstructorWithDestinationCallerRaw struct {
	Contract *SelfDestructInConstructorWithDestinationCaller // Generic read-only contract binding to access the raw methods on
}

// SelfDestructInConstructorWithDestinationTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SelfDestructInConstructorWithDestinationTransactorRaw struct {
	Contract *SelfDestructInConstructorWithDestinationTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSelfDestructInConstructorWithDestination creates a new instance of SelfDestructInConstructorWithDestination, bound to a specific deployed contract.
func NewSelfDestructInConstructorWithDestination(address common.Address, backend bind.ContractBackend) (*SelfDestructInConstructorWithDestination, error) {
	contract, err := bindSelfDestructInConstructorWithDestination(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &SelfDestructInConstructorWithDestination{SelfDestructInConstructorWithDestinationCaller: SelfDestructInConstructorWithDestinationCaller{contract: contract}, SelfDestructInConstructorWithDestinationTransactor: SelfDestructInConstructorWithDestinationTransactor{contract: contract}, SelfDestructInConstructorWithDestinationFilterer: SelfDestructInConstructorWithDestinationFilterer{contract: contract}}, nil
}

// NewSelfDestructInConstructorWithDestinationCaller creates a new read-only instance of SelfDestructInConstructorWithDestination, bound to a specific deployed contract.
func NewSelfDestructInConstructorWithDestinationCaller(address common.Address, caller bind.ContractCaller) (*SelfDestructInConstructorWithDestinationCaller, error) {
	contract, err := bindSelfDestructInConstructorWithDestination(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SelfDestructInConstructorWithDestinationCaller{contract: contract}, nil
}

// NewSelfDestructInConstructorWithDestinationTransactor creates a new write-only instance of SelfDestructInConstructorWithDestination, bound to a specific deployed contract.
func NewSelfDestructInConstructorWithDestinationTransactor(address common.Address, transactor bind.ContractTransactor) (*SelfDestructInConstructorWithDestinationTransactor, error) {
	contract, err := bindSelfDestructInConstructorWithDestination(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SelfDestructInConstructorWithDestinationTransactor{contract: contract}, nil
}

// NewSelfDestructInConstructorWithDestinationFilterer creates a new log filterer instance of SelfDestructInConstructorWithDestination, bound to a specific deployed contract.
func NewSelfDestructInConstructorWithDestinationFilterer(address common.Address, filterer bind.ContractFilterer) (*SelfDestructInConstructorWithDestinationFilterer, error) {
	contract, err := bindSelfDestructInConstructorWithDestination(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SelfDestructInConstructorWithDestinationFilterer{contract: contract}, nil
}

// bindSelfDestructInConstructorWithDestination binds a generic wrapper to an already deployed contract.
func bindSelfDestructInConstructorWithDestination(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := SelfDestructInConstructorWithDestinationMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SelfDestructInConstructorWithDestination *SelfDestructInConstructorWithDestinationRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SelfDestructInConstructorWithDestination.Contract.SelfDestructInConstructorWithDestinationCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SelfDestructInConstructorWithDestination *SelfDestructInConstructorWithDestinationRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SelfDestructInConstructorWithDestination.Contract.SelfDestructInConstructorWithDestinationTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SelfDestructInConstructorWithDestination *SelfDestructInConstructorWithDestinationRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SelfDestructInConstructorWithDestination.Contract.SelfDestructInConstructorWithDestinationTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SelfDestructInConstructorWithDestination *SelfDestructInConstructorWithDestinationCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SelfDestructInConstructorWithDestination.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SelfDestructInConstructorWithDestination *SelfDestructInConstructorWithDestinationTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SelfDestructInConstructorWithDestination.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SelfDestructInConstructorWithDestination *SelfDestructInConstructorWithDestinationTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SelfDestructInConstructorWithDestination.Contract.contract.Transact(opts, method, params...)
}

// SelfDestructInConstructorWithoutDestinationMetaData contains all meta data concerning the SelfDestructInConstructorWithoutDestination contract.
var SelfDestructInConstructorWithoutDestinationMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"}]",
	Bin: "0x608060405230fffe",
}

// SelfDestructInConstructorWithoutDestinationABI is the input ABI used to generate the binding from.
// Deprecated: Use SelfDestructInConstructorWithoutDestinationMetaData.ABI instead.
var SelfDestructInConstructorWithoutDestinationABI = SelfDestructInConstructorWithoutDestinationMetaData.ABI

// SelfDestructInConstructorWithoutDestinationBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use SelfDestructInConstructorWithoutDestinationMetaData.Bin instead.
var SelfDestructInConstructorWithoutDestinationBin = SelfDestructInConstructorWithoutDestinationMetaData.Bin

// DeploySelfDestructInConstructorWithoutDestination deploys a new Ethereum contract, binding an instance of SelfDestructInConstructorWithoutDestination to it.
func DeploySelfDestructInConstructorWithoutDestination(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *SelfDestructInConstructorWithoutDestination, error) {
	parsed, err := SelfDestructInConstructorWithoutDestinationMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(SelfDestructInConstructorWithoutDestinationBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &SelfDestructInConstructorWithoutDestination{SelfDestructInConstructorWithoutDestinationCaller: SelfDestructInConstructorWithoutDestinationCaller{contract: contract}, SelfDestructInConstructorWithoutDestinationTransactor: SelfDestructInConstructorWithoutDestinationTransactor{contract: contract}, SelfDestructInConstructorWithoutDestinationFilterer: SelfDestructInConstructorWithoutDestinationFilterer{contract: contract}}, nil
}

// SelfDestructInConstructorWithoutDestination is an auto generated Go binding around an Ethereum contract.
type SelfDestructInConstructorWithoutDestination struct {
	SelfDestructInConstructorWithoutDestinationCaller     // Read-only binding to the contract
	SelfDestructInConstructorWithoutDestinationTransactor // Write-only binding to the contract
	SelfDestructInConstructorWithoutDestinationFilterer   // Log filterer for contract events
}

// SelfDestructInConstructorWithoutDestinationCaller is an auto generated read-only Go binding around an Ethereum contract.
type SelfDestructInConstructorWithoutDestinationCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SelfDestructInConstructorWithoutDestinationTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SelfDestructInConstructorWithoutDestinationTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SelfDestructInConstructorWithoutDestinationFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SelfDestructInConstructorWithoutDestinationFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SelfDestructInConstructorWithoutDestinationSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SelfDestructInConstructorWithoutDestinationSession struct {
	Contract     *SelfDestructInConstructorWithoutDestination // Generic contract binding to set the session for
	CallOpts     bind.CallOpts                                // Call options to use throughout this session
	TransactOpts bind.TransactOpts                            // Transaction auth options to use throughout this session
}

// SelfDestructInConstructorWithoutDestinationCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SelfDestructInConstructorWithoutDestinationCallerSession struct {
	Contract *SelfDestructInConstructorWithoutDestinationCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                                      // Call options to use throughout this session
}

// SelfDestructInConstructorWithoutDestinationTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SelfDestructInConstructorWithoutDestinationTransactorSession struct {
	Contract     *SelfDestructInConstructorWithoutDestinationTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                                      // Transaction auth options to use throughout this session
}

// SelfDestructInConstructorWithoutDestinationRaw is an auto generated low-level Go binding around an Ethereum contract.
type SelfDestructInConstructorWithoutDestinationRaw struct {
	Contract *SelfDestructInConstructorWithoutDestination // Generic contract binding to access the raw methods on
}

// SelfDestructInConstructorWithoutDestinationCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SelfDestructInConstructorWithoutDestinationCallerRaw struct {
	Contract *SelfDestructInConstructorWithoutDestinationCaller // Generic read-only contract binding to access the raw methods on
}

// SelfDestructInConstructorWithoutDestinationTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SelfDestructInConstructorWithoutDestinationTransactorRaw struct {
	Contract *SelfDestructInConstructorWithoutDestinationTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSelfDestructInConstructorWithoutDestination creates a new instance of SelfDestructInConstructorWithoutDestination, bound to a specific deployed contract.
func NewSelfDestructInConstructorWithoutDestination(address common.Address, backend bind.ContractBackend) (*SelfDestructInConstructorWithoutDestination, error) {
	contract, err := bindSelfDestructInConstructorWithoutDestination(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &SelfDestructInConstructorWithoutDestination{SelfDestructInConstructorWithoutDestinationCaller: SelfDestructInConstructorWithoutDestinationCaller{contract: contract}, SelfDestructInConstructorWithoutDestinationTransactor: SelfDestructInConstructorWithoutDestinationTransactor{contract: contract}, SelfDestructInConstructorWithoutDestinationFilterer: SelfDestructInConstructorWithoutDestinationFilterer{contract: contract}}, nil
}

// NewSelfDestructInConstructorWithoutDestinationCaller creates a new read-only instance of SelfDestructInConstructorWithoutDestination, bound to a specific deployed contract.
func NewSelfDestructInConstructorWithoutDestinationCaller(address common.Address, caller bind.ContractCaller) (*SelfDestructInConstructorWithoutDestinationCaller, error) {
	contract, err := bindSelfDestructInConstructorWithoutDestination(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SelfDestructInConstructorWithoutDestinationCaller{contract: contract}, nil
}

// NewSelfDestructInConstructorWithoutDestinationTransactor creates a new write-only instance of SelfDestructInConstructorWithoutDestination, bound to a specific deployed contract.
func NewSelfDestructInConstructorWithoutDestinationTransactor(address common.Address, transactor bind.ContractTransactor) (*SelfDestructInConstructorWithoutDestinationTransactor, error) {
	contract, err := bindSelfDestructInConstructorWithoutDestination(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SelfDestructInConstructorWithoutDestinationTransactor{contract: contract}, nil
}

// NewSelfDestructInConstructorWithoutDestinationFilterer creates a new log filterer instance of SelfDestructInConstructorWithoutDestination, bound to a specific deployed contract.
func NewSelfDestructInConstructorWithoutDestinationFilterer(address common.Address, filterer bind.ContractFilterer) (*SelfDestructInConstructorWithoutDestinationFilterer, error) {
	contract, err := bindSelfDestructInConstructorWithoutDestination(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SelfDestructInConstructorWithoutDestinationFilterer{contract: contract}, nil
}

// bindSelfDestructInConstructorWithoutDestination binds a generic wrapper to an already deployed contract.
func bindSelfDestructInConstructorWithoutDestination(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := SelfDestructInConstructorWithoutDestinationMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SelfDestructInConstructorWithoutDestination *SelfDestructInConstructorWithoutDestinationRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SelfDestructInConstructorWithoutDestination.Contract.SelfDestructInConstructorWithoutDestinationCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SelfDestructInConstructorWithoutDestination *SelfDestructInConstructorWithoutDestinationRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SelfDestructInConstructorWithoutDestination.Contract.SelfDestructInConstructorWithoutDestinationTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SelfDestructInConstructorWithoutDestination *SelfDestructInConstructorWithoutDestinationRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SelfDestructInConstructorWithoutDestination.Contract.SelfDestructInConstructorWithoutDestinationTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SelfDestructInConstructorWithoutDestination *SelfDestructInConstructorWithoutDestinationCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SelfDestructInConstructorWithoutDestination.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SelfDestructInConstructorWithoutDestination *SelfDestructInConstructorWithoutDestinationTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SelfDestructInConstructorWithoutDestination.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SelfDestructInConstructorWithoutDestination *SelfDestructInConstructorWithoutDestinationTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SelfDestructInConstructorWithoutDestination.Contract.contract.Transact(opts, method, params...)
}

// SelfDestructOutsideConstructorMetaData contains all meta data concerning the SelfDestructOutsideConstructor contract.
var SelfDestructOutsideConstructorMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"selfDestructWithDestination\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"selfDestructWithoutDestination\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405260d7806100126000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c806318fc3e39146037578063d28d249c146048575b600080fd5b604660423660046066565b604d565b005b604630ff5b8073ffffffffffffffffffffffffffffffffffffffff16ff5b600060208284031215607757600080fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114609a57600080fd5b939250505056fea26469706673582212204ddbe5065cd11ffd7d789325351b10e4eb14ca177fc0e3227fb567cfcc62fdfe64736f6c63430008110033",
}

// SelfDestructOutsideConstructorABI is the input ABI used to generate the binding from.
// Deprecated: Use SelfDestructOutsideConstructorMetaData.ABI instead.
var SelfDestructOutsideConstructorABI = SelfDestructOutsideConstructorMetaData.ABI

// SelfDestructOutsideConstructorBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use SelfDestructOutsideConstructorMetaData.Bin instead.
var SelfDestructOutsideConstructorBin = SelfDestructOutsideConstructorMetaData.Bin

// DeploySelfDestructOutsideConstructor deploys a new Ethereum contract, binding an instance of SelfDestructOutsideConstructor to it.
func DeploySelfDestructOutsideConstructor(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *SelfDestructOutsideConstructor, error) {
	parsed, err := SelfDestructOutsideConstructorMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(SelfDestructOutsideConstructorBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &SelfDestructOutsideConstructor{SelfDestructOutsideConstructorCaller: SelfDestructOutsideConstructorCaller{contract: contract}, SelfDestructOutsideConstructorTransactor: SelfDestructOutsideConstructorTransactor{contract: contract}, SelfDestructOutsideConstructorFilterer: SelfDestructOutsideConstructorFilterer{contract: contract}}, nil
}

// SelfDestructOutsideConstructor is an auto generated Go binding around an Ethereum contract.
type SelfDestructOutsideConstructor struct {
	SelfDestructOutsideConstructorCaller     // Read-only binding to the contract
	SelfDestructOutsideConstructorTransactor // Write-only binding to the contract
	SelfDestructOutsideConstructorFilterer   // Log filterer for contract events
}

// SelfDestructOutsideConstructorCaller is an auto generated read-only Go binding around an Ethereum contract.
type SelfDestructOutsideConstructorCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SelfDestructOutsideConstructorTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SelfDestructOutsideConstructorTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SelfDestructOutsideConstructorFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SelfDestructOutsideConstructorFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SelfDestructOutsideConstructorSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SelfDestructOutsideConstructorSession struct {
	Contract     *SelfDestructOutsideConstructor // Generic contract binding to set the session for
	CallOpts     bind.CallOpts                   // Call options to use throughout this session
	TransactOpts bind.TransactOpts               // Transaction auth options to use throughout this session
}

// SelfDestructOutsideConstructorCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SelfDestructOutsideConstructorCallerSession struct {
	Contract *SelfDestructOutsideConstructorCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                         // Call options to use throughout this session
}

// SelfDestructOutsideConstructorTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SelfDestructOutsideConstructorTransactorSession struct {
	Contract     *SelfDestructOutsideConstructorTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                         // Transaction auth options to use throughout this session
}

// SelfDestructOutsideConstructorRaw is an auto generated low-level Go binding around an Ethereum contract.
type SelfDestructOutsideConstructorRaw struct {
	Contract *SelfDestructOutsideConstructor // Generic contract binding to access the raw methods on
}

// SelfDestructOutsideConstructorCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SelfDestructOutsideConstructorCallerRaw struct {
	Contract *SelfDestructOutsideConstructorCaller // Generic read-only contract binding to access the raw methods on
}

// SelfDestructOutsideConstructorTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SelfDestructOutsideConstructorTransactorRaw struct {
	Contract *SelfDestructOutsideConstructorTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSelfDestructOutsideConstructor creates a new instance of SelfDestructOutsideConstructor, bound to a specific deployed contract.
func NewSelfDestructOutsideConstructor(address common.Address, backend bind.ContractBackend) (*SelfDestructOutsideConstructor, error) {
	contract, err := bindSelfDestructOutsideConstructor(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &SelfDestructOutsideConstructor{SelfDestructOutsideConstructorCaller: SelfDestructOutsideConstructorCaller{contract: contract}, SelfDestructOutsideConstructorTransactor: SelfDestructOutsideConstructorTransactor{contract: contract}, SelfDestructOutsideConstructorFilterer: SelfDestructOutsideConstructorFilterer{contract: contract}}, nil
}

// NewSelfDestructOutsideConstructorCaller creates a new read-only instance of SelfDestructOutsideConstructor, bound to a specific deployed contract.
func NewSelfDestructOutsideConstructorCaller(address common.Address, caller bind.ContractCaller) (*SelfDestructOutsideConstructorCaller, error) {
	contract, err := bindSelfDestructOutsideConstructor(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SelfDestructOutsideConstructorCaller{contract: contract}, nil
}

// NewSelfDestructOutsideConstructorTransactor creates a new write-only instance of SelfDestructOutsideConstructor, bound to a specific deployed contract.
func NewSelfDestructOutsideConstructorTransactor(address common.Address, transactor bind.ContractTransactor) (*SelfDestructOutsideConstructorTransactor, error) {
	contract, err := bindSelfDestructOutsideConstructor(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SelfDestructOutsideConstructorTransactor{contract: contract}, nil
}

// NewSelfDestructOutsideConstructorFilterer creates a new log filterer instance of SelfDestructOutsideConstructor, bound to a specific deployed contract.
func NewSelfDestructOutsideConstructorFilterer(address common.Address, filterer bind.ContractFilterer) (*SelfDestructOutsideConstructorFilterer, error) {
	contract, err := bindSelfDestructOutsideConstructor(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SelfDestructOutsideConstructorFilterer{contract: contract}, nil
}

// bindSelfDestructOutsideConstructor binds a generic wrapper to an already deployed contract.
func bindSelfDestructOutsideConstructor(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := SelfDestructOutsideConstructorMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SelfDestructOutsideConstructor *SelfDestructOutsideConstructorRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SelfDestructOutsideConstructor.Contract.SelfDestructOutsideConstructorCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SelfDestructOutsideConstructor *SelfDestructOutsideConstructorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SelfDestructOutsideConstructor.Contract.SelfDestructOutsideConstructorTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SelfDestructOutsideConstructor *SelfDestructOutsideConstructorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SelfDestructOutsideConstructor.Contract.SelfDestructOutsideConstructorTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SelfDestructOutsideConstructor *SelfDestructOutsideConstructorCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SelfDestructOutsideConstructor.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SelfDestructOutsideConstructor *SelfDestructOutsideConstructorTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SelfDestructOutsideConstructor.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SelfDestructOutsideConstructor *SelfDestructOutsideConstructorTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SelfDestructOutsideConstructor.Contract.contract.Transact(opts, method, params...)
}

// SelfDestructWithDestination is a paid mutator transaction binding the contract method 0x18fc3e39.
//
// Solidity: function selfDestructWithDestination(address destination) returns()
func (_SelfDestructOutsideConstructor *SelfDestructOutsideConstructorTransactor) SelfDestructWithDestination(opts *bind.TransactOpts, destination common.Address) (*types.Transaction, error) {
	return _SelfDestructOutsideConstructor.contract.Transact(opts, "selfDestructWithDestination", destination)
}

// SelfDestructWithDestination is a paid mutator transaction binding the contract method 0x18fc3e39.
//
// Solidity: function selfDestructWithDestination(address destination) returns()
func (_SelfDestructOutsideConstructor *SelfDestructOutsideConstructorSession) SelfDestructWithDestination(destination common.Address) (*types.Transaction, error) {
	return _SelfDestructOutsideConstructor.Contract.SelfDestructWithDestination(&_SelfDestructOutsideConstructor.TransactOpts, destination)
}

// SelfDestructWithDestination is a paid mutator transaction binding the contract method 0x18fc3e39.
//
// Solidity: function selfDestructWithDestination(address destination) returns()
func (_SelfDestructOutsideConstructor *SelfDestructOutsideConstructorTransactorSession) SelfDestructWithDestination(destination common.Address) (*types.Transaction, error) {
	return _SelfDestructOutsideConstructor.Contract.SelfDestructWithDestination(&_SelfDestructOutsideConstructor.TransactOpts, destination)
}

// SelfDestructWithoutDestination is a paid mutator transaction binding the contract method 0xd28d249c.
//
// Solidity: function selfDestructWithoutDestination() returns()
func (_SelfDestructOutsideConstructor *SelfDestructOutsideConstructorTransactor) SelfDestructWithoutDestination(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SelfDestructOutsideConstructor.contract.Transact(opts, "selfDestructWithoutDestination")
}

// SelfDestructWithoutDestination is a paid mutator transaction binding the contract method 0xd28d249c.
//
// Solidity: function selfDestructWithoutDestination() returns()
func (_SelfDestructOutsideConstructor *SelfDestructOutsideConstructorSession) SelfDestructWithoutDestination() (*types.Transaction, error) {
	return _SelfDestructOutsideConstructor.Contract.SelfDestructWithoutDestination(&_SelfDestructOutsideConstructor.TransactOpts)
}

// SelfDestructWithoutDestination is a paid mutator transaction binding the contract method 0xd28d249c.
//
// Solidity: function selfDestructWithoutDestination() returns()
func (_SelfDestructOutsideConstructor *SelfDestructOutsideConstructorTransactorSession) SelfDestructWithoutDestination() (*types.Transaction, error) {
	return _SelfDestructOutsideConstructor.Contract.SelfDestructWithoutDestination(&_SelfDestructOutsideConstructor.TransactOpts)
}

// SimpleMetaData contains all meta data concerning the Simple contract.
var SimpleMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"checkBlockHashes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"useTopLevel\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"directCase\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"staticCase\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"delegateCase\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"callcodeCase\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"callCase\",\"type\":\"bool\"}],\"name\":\"checkCalls\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"input\",\"type\":\"bytes\"}],\"name\":\"checkGasUsed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"useTopLevel\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"expected\",\"type\":\"bool\"}],\"name\":\"checkIsTopLevelOrWasAliased\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"counter\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"difficulty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emitNullEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlockDifficulty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"increment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"incrementEmit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"incrementRedeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expected\",\"type\":\"uint256\"}],\"name\":\"logAndIncrement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"noop\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pleaseRevert\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractISequencerInbox\",\"name\":\"sequencerInbox\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"batchData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"numberToPost\",\"type\":\"uint256\"}],\"name\":\"postManyBatches\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"ticketIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"addresspayable[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"redeemAllAndCreateAddresses\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"storeDifficulty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"count\",\"type\":\"uint64\"}],\"name\":\"CounterEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expected\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"have\",\"type\":\"uint256\"}],\"name\":\"LogAndIncrementCalled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"NullEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"}],\"name\":\"RedeemedEvent\",\"type\":\"event\"}]",
	Bin: "0x608060405234801561001057600080fd5b5061155b806100206000396000f3fe60806040526004361061010e5760003560e01c806361bc221a116100a5578063b226a96411610074578063cff36f2d11610059578063cff36f2d14610291578063d09de08a146102a7578063ded5ecad146102bc57600080fd5b8063b226a96414610269578063b2b6f0901461027e57600080fd5b806361bc221a146101da5780638a390877146102145780639ff5ccac14610234578063b1948fc31461024957600080fd5b80631a2f8a92116100e15780631a2f8a921461017957806344c25fba146101995780635677c11e146101b95780635dfc2e4a146101ce57600080fd5b806305795f73146101135780630e8c389f1461012a57806312e05dd11461013f57806319cae46214610163575b600080fd5b34801561011f57600080fd5b506101286102dc565b005b34801561013657600080fd5b50610128610329565b34801561014b57600080fd5b506001545b6040519081526020015b60405180910390f35b34801561016f57600080fd5b5061015060015481565b34801561018557600080fd5b50610150610194366004611059565b610512565b3480156101a557600080fd5b506101286101b43660046110ec565b610596565b3480156101c557600080fd5b50610150610a1f565b34801561012857600080fd5b3480156101e657600080fd5b506000546101fb9067ffffffffffffffff1681565b60405167ffffffffffffffff909116815260200161015a565b34801561022057600080fd5b5061012861022f36600461116e565b610a8b565b34801561024057600080fd5b50610128610b14565b34801561025557600080fd5b5061012861026436600461119d565b610b83565b34801561027557600080fd5b50610128610d05565b61012861028c3660046112b6565b610d30565b34801561029d57600080fd5b5061012844600155565b3480156102b357600080fd5b50610128610efe565b3480156102c857600080fd5b506101286102d7366004611322565b610f40565b60405162461bcd60e51b815260206004820152601260248201527f534f4c49444954595f524556455254494e47000000000000000000000000000060448201526064015b60405180910390fd5b3332146103785760405162461bcd60e51b815260206004820152601160248201527f53454e4445525f4e4f545f4f524947494e0000000000000000000000000000006044820152606401610320565b60646001600160a01b031663175a260b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103db919061135b565b6104275760405162461bcd60e51b815260206004820152600b60248201527f4e4f545f414c49415345440000000000000000000000000000000000000000006044820152606401610320565b6000805467ffffffffffffffff16908061044083611395565b91906101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550507f773c78bf96e65f61c1a2622b47d76e78bfe70dd59cf4f11470c4c121c315941333606e6001600160a01b031663de4ba2b36040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ec91906113bc565b604080516001600160a01b039384168152929091166020830152015b60405180910390a1565b6000805a90506001600160a01b03851661052e612710836113d9565b858560405161053e9291906113f2565b6000604051808303818686fa925050503d806000811461057a576040519150601f19603f3d011682016040523d82523d6000602084013e61057f565b606091505b5050505a61058d90826113d9565b95945050505050565b85156106565784151560646001600160a01b03166308bd624c6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105de573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610602919061135b565b1515146106515760405162461bcd60e51b815260206004820152601160248201527f554e45585045435445445f524553554c540000000000000000000000000000006044820152606401610320565b61070b565b84151560646001600160a01b031663175a260b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610698573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106bc919061135b565b15151461070b5760405162461bcd60e51b815260206004820152601160248201527f554e45585045435445445f524553554c540000000000000000000000000000006044820152606401610320565b60405163ded5ecad60e01b815286151560048201528415156024820152309063ded5ecad9060440160006040518083038186803b15801561074b57600080fd5b505afa15801561075f573d6000803e3d6000fd5b505060408051891515602482015286151560448083019190915282518083039091018152606490910182526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1663ded5ecad60e01b17905290519092506000915030906107cf908490611426565b600060405180830381855af49150503d806000811461080a576040519150601f19603f3d011682016040523d82523d6000602084013e61080f565b606091505b50509050806108605760405162461bcd60e51b815260206004820152601460248201527f44454c45474154455f43414c4c5f4641494c45440000000000000000000000006044820152606401610320565b6040805189151560248201528515156044808301919091528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1663ded5ecad60e01b1781528151919350600091829182305af29050806109165760405162461bcd60e51b815260206004820152600f60248201527f43414c4c434f44455f4641494c454400000000000000000000000000000000006044820152606401610320565b60408051891515602482015284151560448083019190915282518083039091018152606490910182526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1663ded5ecad60e01b17905290519092503090610980908490611426565b6000604051808303816000865af19150503d80600081146109bd576040519150601f19603f3d011682016040523d82523d6000602084013e6109c2565b606091505b50508091505080610a155760405162461bcd60e51b815260206004820152600b60248201527f43414c4c5f4641494c45440000000000000000000000000000000000000000006044820152606401610320565b5050505050505050565b6000610a2c6002436113d9565b40610a386001436113d9565b4003610a865760405162461bcd60e51b815260206004820152600f60248201527f53414d455f424c4f434b5f4841534800000000000000000000000000000000006044820152606401610320565b504390565b6000546040805183815267ffffffffffffffff90921660208301527f8df8e492f407b078593c5d8fd7e65ef68505999d911d5b99b017c0b7077398b9910160405180910390a16000805467ffffffffffffffff169080610aea83611395565b91906101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505050565b6000805467ffffffffffffffff169080610b2d83611395565b82546101009290920a67ffffffffffffffff818102199093169183160217909155600054604051911681527fa45d7e79cb3c6044f30c8dd891e6571301d6b8b6618df519c987905ec70742e79150602001610508565b6000836001600160a01b03166306f130566040518163ffffffff1660e01b8152600401602060405180830381865afa158015610bc3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610be79190611442565b90506000846001600160a01b0316637fa3a40e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c4d9190611442565b905060005b83811015610cfd576040517fe0bc97290000000000000000000000000000000000000000000000000000000081526001600160a01b0387169063e0bc972990610caa908690899087906000908190819060040161145b565b600060405180830381600087803b158015610cc457600080fd5b505af1158015610cd8573d6000803e3d6000fd5b505050508280610ce7906114ba565b9350508080610cf5906114ba565b915050610c52565b505050505050565b6040517f6f59c82101949290205a9ae9d0c657e6dae1a71c301ae76d385c2792294585fe90600090a1565b60005b83811015610e7d57606e63eda1122c620186a0878785818110610d5857610d586114f2565b905060200201356040518363ffffffff1660e01b8152600401610d7d91815260200190565b60206040518083038160008887f193505050508015610db9575060408051601f3d908101601f19168201909252610db691810190611442565b60015b610e2a5760405162461bcd60e51b8152602060048201526024808201527f4661696c656420746f2072656465656d206f6e65206f72206d6f72652074696360448201527f6b657473000000000000000000000000000000000000000000000000000000006064820152608401610320565b506000805467ffffffffffffffff169080610e4483611395565b91906101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505080610e75816114ba565b915050610d33565b5060005b81811015610ef757828282818110610e9b57610e9b6114f2565b9050602002016020810190610eb09190611508565b6040516001600160a01b03919091169060009060019082818181858883f19350505050158015610ee4573d6000803e3d6000fd5b5080610eef816114ba565b915050610e81565b5050505050565b6000805467ffffffffffffffff169080610f1783611395565b91906101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555050565b8115610fff5780151560646001600160a01b03166308bd624c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fac919061135b565b151514610ffb5760405162461bcd60e51b815260206004820152601160248201527f554e45585045435445445f524553554c540000000000000000000000000000006044820152606401610320565b5050565b80151560646001600160a01b031663175a260b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f88573d6000803e3d6000fd5b6001600160a01b038116811461105657600080fd5b50565b60008060006040848603121561106e57600080fd5b833561107981611041565b9250602084013567ffffffffffffffff8082111561109657600080fd5b818601915086601f8301126110aa57600080fd5b8135818111156110b957600080fd5b8760208285010111156110cb57600080fd5b6020830194508093505050509250925092565b801515811461105657600080fd5b60008060008060008060c0878903121561110557600080fd5b8635611110816110de565b95506020870135611120816110de565b94506040870135611130816110de565b93506060870135611140816110de565b92506080870135611150816110de565b915060a0870135611160816110de565b809150509295509295509295565b60006020828403121561118057600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b6000806000606084860312156111b257600080fd5b83356111bd81611041565b9250602084013567ffffffffffffffff808211156111da57600080fd5b818601915086601f8301126111ee57600080fd5b81358181111561120057611200611187565b604051601f8201601f19908116603f0116810190838211818310171561122857611228611187565b8160405282815289602084870101111561124157600080fd5b826020860160208301376000602084830101528096505050505050604084013590509250925092565b60008083601f84011261127c57600080fd5b50813567ffffffffffffffff81111561129457600080fd5b6020830191508360208260051b85010111156112af57600080fd5b9250929050565b600080600080604085870312156112cc57600080fd5b843567ffffffffffffffff808211156112e457600080fd5b6112f08883890161126a565b9096509450602087013591508082111561130957600080fd5b506113168782880161126a565b95989497509550505050565b6000806040838503121561133557600080fd5b8235611340816110de565b91506020830135611350816110de565b809150509250929050565b60006020828403121561136d57600080fd5b8151611378816110de565b9392505050565b634e487b7160e01b600052601160045260246000fd5b600067ffffffffffffffff8083168181036113b2576113b261137f565b6001019392505050565b6000602082840312156113ce57600080fd5b815161137881611041565b818103818111156113ec576113ec61137f565b92915050565b8183823760009101908152919050565b60005b8381101561141d578181015183820152602001611405565b50506000910152565b60008251611438818460208701611402565b9190910192915050565b60006020828403121561145457600080fd5b5051919050565b86815260c06020820152600086518060c08401526114808160e0850160208b01611402565b6040830196909652506001600160a01b03939093166060840152608083019190915260a082015260e0601f909201601f1916010192915050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036114eb576114eb61137f565b5060010190565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561151a57600080fd5b81356113788161104156fea26469706673582212205a5c207a97a40719eb8cdff3fea019f19d568e2c6293ed2fde25ce699ad9de5a64736f6c63430008110033",
}

// SimpleABI is the input ABI used to generate the binding from.
// Deprecated: Use SimpleMetaData.ABI instead.
var SimpleABI = SimpleMetaData.ABI

// SimpleBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use SimpleMetaData.Bin instead.
var SimpleBin = SimpleMetaData.Bin

// DeploySimple deploys a new Ethereum contract, binding an instance of Simple to it.
func DeploySimple(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Simple, error) {
	parsed, err := SimpleMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(SimpleBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Simple{SimpleCaller: SimpleCaller{contract: contract}, SimpleTransactor: SimpleTransactor{contract: contract}, SimpleFilterer: SimpleFilterer{contract: contract}}, nil
}

// Simple is an auto generated Go binding around an Ethereum contract.
type Simple struct {
	SimpleCaller     // Read-only binding to the contract
	SimpleTransactor // Write-only binding to the contract
	SimpleFilterer   // Log filterer for contract events
}

// SimpleCaller is an auto generated read-only Go binding around an Ethereum contract.
type SimpleCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SimpleTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SimpleTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SimpleFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SimpleFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SimpleSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SimpleSession struct {
	Contract     *Simple           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SimpleCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SimpleCallerSession struct {
	Contract *SimpleCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// SimpleTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SimpleTransactorSession struct {
	Contract     *SimpleTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SimpleRaw is an auto generated low-level Go binding around an Ethereum contract.
type SimpleRaw struct {
	Contract *Simple // Generic contract binding to access the raw methods on
}

// SimpleCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SimpleCallerRaw struct {
	Contract *SimpleCaller // Generic read-only contract binding to access the raw methods on
}

// SimpleTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SimpleTransactorRaw struct {
	Contract *SimpleTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSimple creates a new instance of Simple, bound to a specific deployed contract.
func NewSimple(address common.Address, backend bind.ContractBackend) (*Simple, error) {
	contract, err := bindSimple(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Simple{SimpleCaller: SimpleCaller{contract: contract}, SimpleTransactor: SimpleTransactor{contract: contract}, SimpleFilterer: SimpleFilterer{contract: contract}}, nil
}

// NewSimpleCaller creates a new read-only instance of Simple, bound to a specific deployed contract.
func NewSimpleCaller(address common.Address, caller bind.ContractCaller) (*SimpleCaller, error) {
	contract, err := bindSimple(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SimpleCaller{contract: contract}, nil
}

// NewSimpleTransactor creates a new write-only instance of Simple, bound to a specific deployed contract.
func NewSimpleTransactor(address common.Address, transactor bind.ContractTransactor) (*SimpleTransactor, error) {
	contract, err := bindSimple(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SimpleTransactor{contract: contract}, nil
}

// NewSimpleFilterer creates a new log filterer instance of Simple, bound to a specific deployed contract.
func NewSimpleFilterer(address common.Address, filterer bind.ContractFilterer) (*SimpleFilterer, error) {
	contract, err := bindSimple(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SimpleFilterer{contract: contract}, nil
}

// bindSimple binds a generic wrapper to an already deployed contract.
func bindSimple(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := SimpleMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Simple *SimpleRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Simple.Contract.SimpleCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Simple *SimpleRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Simple.Contract.SimpleTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Simple *SimpleRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Simple.Contract.SimpleTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Simple *SimpleCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Simple.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Simple *SimpleTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Simple.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Simple *SimpleTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Simple.Contract.contract.Transact(opts, method, params...)
}

// CheckBlockHashes is a free data retrieval call binding the contract method 0x5677c11e.
//
// Solidity: function checkBlockHashes() view returns(uint256)
func (_Simple *SimpleCaller) CheckBlockHashes(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Simple.contract.Call(opts, &out, "checkBlockHashes")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CheckBlockHashes is a free data retrieval call binding the contract method 0x5677c11e.
//
// Solidity: function checkBlockHashes() view returns(uint256)
func (_Simple *SimpleSession) CheckBlockHashes() (*big.Int, error) {
	return _Simple.Contract.CheckBlockHashes(&_Simple.CallOpts)
}

// CheckBlockHashes is a free data retrieval call binding the contract method 0x5677c11e.
//
// Solidity: function checkBlockHashes() view returns(uint256)
func (_Simple *SimpleCallerSession) CheckBlockHashes() (*big.Int, error) {
	return _Simple.Contract.CheckBlockHashes(&_Simple.CallOpts)
}

// CheckGasUsed is a free data retrieval call binding the contract method 0x1a2f8a92.
//
// Solidity: function checkGasUsed(address to, bytes input) view returns(uint256)
func (_Simple *SimpleCaller) CheckGasUsed(opts *bind.CallOpts, to common.Address, input []byte) (*big.Int, error) {
	var out []interface{}
	err := _Simple.contract.Call(opts, &out, "checkGasUsed", to, input)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CheckGasUsed is a free data retrieval call binding the contract method 0x1a2f8a92.
//
// Solidity: function checkGasUsed(address to, bytes input) view returns(uint256)
func (_Simple *SimpleSession) CheckGasUsed(to common.Address, input []byte) (*big.Int, error) {
	return _Simple.Contract.CheckGasUsed(&_Simple.CallOpts, to, input)
}

// CheckGasUsed is a free data retrieval call binding the contract method 0x1a2f8a92.
//
// Solidity: function checkGasUsed(address to, bytes input) view returns(uint256)
func (_Simple *SimpleCallerSession) CheckGasUsed(to common.Address, input []byte) (*big.Int, error) {
	return _Simple.Contract.CheckGasUsed(&_Simple.CallOpts, to, input)
}

// CheckIsTopLevelOrWasAliased is a free data retrieval call binding the contract method 0xded5ecad.
//
// Solidity: function checkIsTopLevelOrWasAliased(bool useTopLevel, bool expected) view returns()
func (_Simple *SimpleCaller) CheckIsTopLevelOrWasAliased(opts *bind.CallOpts, useTopLevel bool, expected bool) error {
	var out []interface{}
	err := _Simple.contract.Call(opts, &out, "checkIsTopLevelOrWasAliased", useTopLevel, expected)

	if err != nil {
		return err
	}

	return err

}

// CheckIsTopLevelOrWasAliased is a free data retrieval call binding the contract method 0xded5ecad.
//
// Solidity: function checkIsTopLevelOrWasAliased(bool useTopLevel, bool expected) view returns()
func (_Simple *SimpleSession) CheckIsTopLevelOrWasAliased(useTopLevel bool, expected bool) error {
	return _Simple.Contract.CheckIsTopLevelOrWasAliased(&_Simple.CallOpts, useTopLevel, expected)
}

// CheckIsTopLevelOrWasAliased is a free data retrieval call binding the contract method 0xded5ecad.
//
// Solidity: function checkIsTopLevelOrWasAliased(bool useTopLevel, bool expected) view returns()
func (_Simple *SimpleCallerSession) CheckIsTopLevelOrWasAliased(useTopLevel bool, expected bool) error {
	return _Simple.Contract.CheckIsTopLevelOrWasAliased(&_Simple.CallOpts, useTopLevel, expected)
}

// Counter is a free data retrieval call binding the contract method 0x61bc221a.
//
// Solidity: function counter() view returns(uint64)
func (_Simple *SimpleCaller) Counter(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _Simple.contract.Call(opts, &out, "counter")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// Counter is a free data retrieval call binding the contract method 0x61bc221a.
//
// Solidity: function counter() view returns(uint64)
func (_Simple *SimpleSession) Counter() (uint64, error) {
	return _Simple.Contract.Counter(&_Simple.CallOpts)
}

// Counter is a free data retrieval call binding the contract method 0x61bc221a.
//
// Solidity: function counter() view returns(uint64)
func (_Simple *SimpleCallerSession) Counter() (uint64, error) {
	return _Simple.Contract.Counter(&_Simple.CallOpts)
}

// Difficulty is a free data retrieval call binding the contract method 0x19cae462.
//
// Solidity: function difficulty() view returns(uint256)
func (_Simple *SimpleCaller) Difficulty(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Simple.contract.Call(opts, &out, "difficulty")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Difficulty is a free data retrieval call binding the contract method 0x19cae462.
//
// Solidity: function difficulty() view returns(uint256)
func (_Simple *SimpleSession) Difficulty() (*big.Int, error) {
	return _Simple.Contract.Difficulty(&_Simple.CallOpts)
}

// Difficulty is a free data retrieval call binding the contract method 0x19cae462.
//
// Solidity: function difficulty() view returns(uint256)
func (_Simple *SimpleCallerSession) Difficulty() (*big.Int, error) {
	return _Simple.Contract.Difficulty(&_Simple.CallOpts)
}

// GetBlockDifficulty is a free data retrieval call binding the contract method 0x12e05dd1.
//
// Solidity: function getBlockDifficulty() view returns(uint256)
func (_Simple *SimpleCaller) GetBlockDifficulty(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Simple.contract.Call(opts, &out, "getBlockDifficulty")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetBlockDifficulty is a free data retrieval call binding the contract method 0x12e05dd1.
//
// Solidity: function getBlockDifficulty() view returns(uint256)
func (_Simple *SimpleSession) GetBlockDifficulty() (*big.Int, error) {
	return _Simple.Contract.GetBlockDifficulty(&_Simple.CallOpts)
}

// GetBlockDifficulty is a free data retrieval call binding the contract method 0x12e05dd1.
//
// Solidity: function getBlockDifficulty() view returns(uint256)
func (_Simple *SimpleCallerSession) GetBlockDifficulty() (*big.Int, error) {
	return _Simple.Contract.GetBlockDifficulty(&_Simple.CallOpts)
}

// Noop is a free data retrieval call binding the contract method 0x5dfc2e4a.
//
// Solidity: function noop() pure returns()
func (_Simple *SimpleCaller) Noop(opts *bind.CallOpts) error {
	var out []interface{}
	err := _Simple.contract.Call(opts, &out, "noop")

	if err != nil {
		return err
	}

	return err

}

// Noop is a free data retrieval call binding the contract method 0x5dfc2e4a.
//
// Solidity: function noop() pure returns()
func (_Simple *SimpleSession) Noop() error {
	return _Simple.Contract.Noop(&_Simple.CallOpts)
}

// Noop is a free data retrieval call binding the contract method 0x5dfc2e4a.
//
// Solidity: function noop() pure returns()
func (_Simple *SimpleCallerSession) Noop() error {
	return _Simple.Contract.Noop(&_Simple.CallOpts)
}

// PleaseRevert is a free data retrieval call binding the contract method 0x05795f73.
//
// Solidity: function pleaseRevert() pure returns()
func (_Simple *SimpleCaller) PleaseRevert(opts *bind.CallOpts) error {
	var out []interface{}
	err := _Simple.contract.Call(opts, &out, "pleaseRevert")

	if err != nil {
		return err
	}

	return err

}

// PleaseRevert is a free data retrieval call binding the contract method 0x05795f73.
//
// Solidity: function pleaseRevert() pure returns()
func (_Simple *SimpleSession) PleaseRevert() error {
	return _Simple.Contract.PleaseRevert(&_Simple.CallOpts)
}

// PleaseRevert is a free data retrieval call binding the contract method 0x05795f73.
//
// Solidity: function pleaseRevert() pure returns()
func (_Simple *SimpleCallerSession) PleaseRevert() error {
	return _Simple.Contract.PleaseRevert(&_Simple.CallOpts)
}

// CheckCalls is a paid mutator transaction binding the contract method 0x44c25fba.
//
// Solidity: function checkCalls(bool useTopLevel, bool directCase, bool staticCase, bool delegateCase, bool callcodeCase, bool callCase) returns()
func (_Simple *SimpleTransactor) CheckCalls(opts *bind.TransactOpts, useTopLevel bool, directCase bool, staticCase bool, delegateCase bool, callcodeCase bool, callCase bool) (*types.Transaction, error) {
	return _Simple.contract.Transact(opts, "checkCalls", useTopLevel, directCase, staticCase, delegateCase, callcodeCase, callCase)
}

// CheckCalls is a paid mutator transaction binding the contract method 0x44c25fba.
//
// Solidity: function checkCalls(bool useTopLevel, bool directCase, bool staticCase, bool delegateCase, bool callcodeCase, bool callCase) returns()
func (_Simple *SimpleSession) CheckCalls(useTopLevel bool, directCase bool, staticCase bool, delegateCase bool, callcodeCase bool, callCase bool) (*types.Transaction, error) {
	return _Simple.Contract.CheckCalls(&_Simple.TransactOpts, useTopLevel, directCase, staticCase, delegateCase, callcodeCase, callCase)
}

// CheckCalls is a paid mutator transaction binding the contract method 0x44c25fba.
//
// Solidity: function checkCalls(bool useTopLevel, bool directCase, bool staticCase, bool delegateCase, bool callcodeCase, bool callCase) returns()
func (_Simple *SimpleTransactorSession) CheckCalls(useTopLevel bool, directCase bool, staticCase bool, delegateCase bool, callcodeCase bool, callCase bool) (*types.Transaction, error) {
	return _Simple.Contract.CheckCalls(&_Simple.TransactOpts, useTopLevel, directCase, staticCase, delegateCase, callcodeCase, callCase)
}

// EmitNullEvent is a paid mutator transaction binding the contract method 0xb226a964.
//
// Solidity: function emitNullEvent() returns()
func (_Simple *SimpleTransactor) EmitNullEvent(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Simple.contract.Transact(opts, "emitNullEvent")
}

// EmitNullEvent is a paid mutator transaction binding the contract method 0xb226a964.
//
// Solidity: function emitNullEvent() returns()
func (_Simple *SimpleSession) EmitNullEvent() (*types.Transaction, error) {
	return _Simple.Contract.EmitNullEvent(&_Simple.TransactOpts)
}

// EmitNullEvent is a paid mutator transaction binding the contract method 0xb226a964.
//
// Solidity: function emitNullEvent() returns()
func (_Simple *SimpleTransactorSession) EmitNullEvent() (*types.Transaction, error) {
	return _Simple.Contract.EmitNullEvent(&_Simple.TransactOpts)
}

// Increment is a paid mutator transaction binding the contract method 0xd09de08a.
//
// Solidity: function increment() returns()
func (_Simple *SimpleTransactor) Increment(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Simple.contract.Transact(opts, "increment")
}

// Increment is a paid mutator transaction binding the contract method 0xd09de08a.
//
// Solidity: function increment() returns()
func (_Simple *SimpleSession) Increment() (*types.Transaction, error) {
	return _Simple.Contract.Increment(&_Simple.TransactOpts)
}

// Increment is a paid mutator transaction binding the contract method 0xd09de08a.
//
// Solidity: function increment() returns()
func (_Simple *SimpleTransactorSession) Increment() (*types.Transaction, error) {
	return _Simple.Contract.Increment(&_Simple.TransactOpts)
}

// IncrementEmit is a paid mutator transaction binding the contract method 0x9ff5ccac.
//
// Solidity: function incrementEmit() returns()
func (_Simple *SimpleTransactor) IncrementEmit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Simple.contract.Transact(opts, "incrementEmit")
}

// IncrementEmit is a paid mutator transaction binding the contract method 0x9ff5ccac.
//
// Solidity: function incrementEmit() returns()
func (_Simple *SimpleSession) IncrementEmit() (*types.Transaction, error) {
	return _Simple.Contract.IncrementEmit(&_Simple.TransactOpts)
}

// IncrementEmit is a paid mutator transaction binding the contract method 0x9ff5ccac.
//
// Solidity: function incrementEmit() returns()
func (_Simple *SimpleTransactorSession) IncrementEmit() (*types.Transaction, error) {
	return _Simple.Contract.IncrementEmit(&_Simple.TransactOpts)
}

// IncrementRedeem is a paid mutator transaction binding the contract method 0x0e8c389f.
//
// Solidity: function incrementRedeem() returns()
func (_Simple *SimpleTransactor) IncrementRedeem(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Simple.contract.Transact(opts, "incrementRedeem")
}

// IncrementRedeem is a paid mutator transaction binding the contract method 0x0e8c389f.
//
// Solidity: function incrementRedeem() returns()
func (_Simple *SimpleSession) IncrementRedeem() (*types.Transaction, error) {
	return _Simple.Contract.IncrementRedeem(&_Simple.TransactOpts)
}

// IncrementRedeem is a paid mutator transaction binding the contract method 0x0e8c389f.
//
// Solidity: function incrementRedeem() returns()
func (_Simple *SimpleTransactorSession) IncrementRedeem() (*types.Transaction, error) {
	return _Simple.Contract.IncrementRedeem(&_Simple.TransactOpts)
}

// LogAndIncrement is a paid mutator transaction binding the contract method 0x8a390877.
//
// Solidity: function logAndIncrement(uint256 expected) returns()
func (_Simple *SimpleTransactor) LogAndIncrement(opts *bind.TransactOpts, expected *big.Int) (*types.Transaction, error) {
	return _Simple.contract.Transact(opts, "logAndIncrement", expected)
}

// LogAndIncrement is a paid mutator transaction binding the contract method 0x8a390877.
//
// Solidity: function logAndIncrement(uint256 expected) returns()
func (_Simple *SimpleSession) LogAndIncrement(expected *big.Int) (*types.Transaction, error) {
	return _Simple.Contract.LogAndIncrement(&_Simple.TransactOpts, expected)
}

// LogAndIncrement is a paid mutator transaction binding the contract method 0x8a390877.
//
// Solidity: function logAndIncrement(uint256 expected) returns()
func (_Simple *SimpleTransactorSession) LogAndIncrement(expected *big.Int) (*types.Transaction, error) {
	return _Simple.Contract.LogAndIncrement(&_Simple.TransactOpts, expected)
}

// PostManyBatches is a paid mutator transaction binding the contract method 0xb1948fc3.
//
// Solidity: function postManyBatches(address sequencerInbox, bytes batchData, uint256 numberToPost) returns()
func (_Simple *SimpleTransactor) PostManyBatches(opts *bind.TransactOpts, sequencerInbox common.Address, batchData []byte, numberToPost *big.Int) (*types.Transaction, error) {
	return _Simple.contract.Transact(opts, "postManyBatches", sequencerInbox, batchData, numberToPost)
}

// PostManyBatches is a paid mutator transaction binding the contract method 0xb1948fc3.
//
// Solidity: function postManyBatches(address sequencerInbox, bytes batchData, uint256 numberToPost) returns()
func (_Simple *SimpleSession) PostManyBatches(sequencerInbox common.Address, batchData []byte, numberToPost *big.Int) (*types.Transaction, error) {
	return _Simple.Contract.PostManyBatches(&_Simple.TransactOpts, sequencerInbox, batchData, numberToPost)
}

// PostManyBatches is a paid mutator transaction binding the contract method 0xb1948fc3.
//
// Solidity: function postManyBatches(address sequencerInbox, bytes batchData, uint256 numberToPost) returns()
func (_Simple *SimpleTransactorSession) PostManyBatches(sequencerInbox common.Address, batchData []byte, numberToPost *big.Int) (*types.Transaction, error) {
	return _Simple.Contract.PostManyBatches(&_Simple.TransactOpts, sequencerInbox, batchData, numberToPost)
}

// RedeemAllAndCreateAddresses is a paid mutator transaction binding the contract method 0xb2b6f090.
//
// Solidity: function redeemAllAndCreateAddresses(bytes32[] ticketIds, address[] addresses) payable returns()
func (_Simple *SimpleTransactor) RedeemAllAndCreateAddresses(opts *bind.TransactOpts, ticketIds [][32]byte, addresses []common.Address) (*types.Transaction, error) {
	return _Simple.contract.Transact(opts, "redeemAllAndCreateAddresses", ticketIds, addresses)
}

// RedeemAllAndCreateAddresses is a paid mutator transaction binding the contract method 0xb2b6f090.
//
// Solidity: function redeemAllAndCreateAddresses(bytes32[] ticketIds, address[] addresses) payable returns()
func (_Simple *SimpleSession) RedeemAllAndCreateAddresses(ticketIds [][32]byte, addresses []common.Address) (*types.Transaction, error) {
	return _Simple.Contract.RedeemAllAndCreateAddresses(&_Simple.TransactOpts, ticketIds, addresses)
}

// RedeemAllAndCreateAddresses is a paid mutator transaction binding the contract method 0xb2b6f090.
//
// Solidity: function redeemAllAndCreateAddresses(bytes32[] ticketIds, address[] addresses) payable returns()
func (_Simple *SimpleTransactorSession) RedeemAllAndCreateAddresses(ticketIds [][32]byte, addresses []common.Address) (*types.Transaction, error) {
	return _Simple.Contract.RedeemAllAndCreateAddresses(&_Simple.TransactOpts, ticketIds, addresses)
}

// StoreDifficulty is a paid mutator transaction binding the contract method 0xcff36f2d.
//
// Solidity: function storeDifficulty() returns()
func (_Simple *SimpleTransactor) StoreDifficulty(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Simple.contract.Transact(opts, "storeDifficulty")
}

// StoreDifficulty is a paid mutator transaction binding the contract method 0xcff36f2d.
//
// Solidity: function storeDifficulty() returns()
func (_Simple *SimpleSession) StoreDifficulty() (*types.Transaction, error) {
	return _Simple.Contract.StoreDifficulty(&_Simple.TransactOpts)
}

// StoreDifficulty is a paid mutator transaction binding the contract method 0xcff36f2d.
//
// Solidity: function storeDifficulty() returns()
func (_Simple *SimpleTransactorSession) StoreDifficulty() (*types.Transaction, error) {
	return _Simple.Contract.StoreDifficulty(&_Simple.TransactOpts)
}

// SimpleCounterEventIterator is returned from FilterCounterEvent and is used to iterate over the raw logs and unpacked data for CounterEvent events raised by the Simple contract.
type SimpleCounterEventIterator struct {
	Event *SimpleCounterEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SimpleCounterEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SimpleCounterEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SimpleCounterEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SimpleCounterEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SimpleCounterEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SimpleCounterEvent represents a CounterEvent event raised by the Simple contract.
type SimpleCounterEvent struct {
	Count uint64
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterCounterEvent is a free log retrieval operation binding the contract event 0xa45d7e79cb3c6044f30c8dd891e6571301d6b8b6618df519c987905ec70742e7.
//
// Solidity: event CounterEvent(uint64 count)
func (_Simple *SimpleFilterer) FilterCounterEvent(opts *bind.FilterOpts) (*SimpleCounterEventIterator, error) {

	logs, sub, err := _Simple.contract.FilterLogs(opts, "CounterEvent")
	if err != nil {
		return nil, err
	}
	return &SimpleCounterEventIterator{contract: _Simple.contract, event: "CounterEvent", logs: logs, sub: sub}, nil
}

// WatchCounterEvent is a free log subscription operation binding the contract event 0xa45d7e79cb3c6044f30c8dd891e6571301d6b8b6618df519c987905ec70742e7.
//
// Solidity: event CounterEvent(uint64 count)
func (_Simple *SimpleFilterer) WatchCounterEvent(opts *bind.WatchOpts, sink chan<- *SimpleCounterEvent) (event.Subscription, error) {

	logs, sub, err := _Simple.contract.WatchLogs(opts, "CounterEvent")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SimpleCounterEvent)
				if err := _Simple.contract.UnpackLog(event, "CounterEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCounterEvent is a log parse operation binding the contract event 0xa45d7e79cb3c6044f30c8dd891e6571301d6b8b6618df519c987905ec70742e7.
//
// Solidity: event CounterEvent(uint64 count)
func (_Simple *SimpleFilterer) ParseCounterEvent(log types.Log) (*SimpleCounterEvent, error) {
	event := new(SimpleCounterEvent)
	if err := _Simple.contract.UnpackLog(event, "CounterEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SimpleLogAndIncrementCalledIterator is returned from FilterLogAndIncrementCalled and is used to iterate over the raw logs and unpacked data for LogAndIncrementCalled events raised by the Simple contract.
type SimpleLogAndIncrementCalledIterator struct {
	Event *SimpleLogAndIncrementCalled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SimpleLogAndIncrementCalledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SimpleLogAndIncrementCalled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SimpleLogAndIncrementCalled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SimpleLogAndIncrementCalledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SimpleLogAndIncrementCalledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SimpleLogAndIncrementCalled represents a LogAndIncrementCalled event raised by the Simple contract.
type SimpleLogAndIncrementCalled struct {
	Expected *big.Int
	Have     *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterLogAndIncrementCalled is a free log retrieval operation binding the contract event 0x8df8e492f407b078593c5d8fd7e65ef68505999d911d5b99b017c0b7077398b9.
//
// Solidity: event LogAndIncrementCalled(uint256 expected, uint256 have)
func (_Simple *SimpleFilterer) FilterLogAndIncrementCalled(opts *bind.FilterOpts) (*SimpleLogAndIncrementCalledIterator, error) {

	logs, sub, err := _Simple.contract.FilterLogs(opts, "LogAndIncrementCalled")
	if err != nil {
		return nil, err
	}
	return &SimpleLogAndIncrementCalledIterator{contract: _Simple.contract, event: "LogAndIncrementCalled", logs: logs, sub: sub}, nil
}

// WatchLogAndIncrementCalled is a free log subscription operation binding the contract event 0x8df8e492f407b078593c5d8fd7e65ef68505999d911d5b99b017c0b7077398b9.
//
// Solidity: event LogAndIncrementCalled(uint256 expected, uint256 have)
func (_Simple *SimpleFilterer) WatchLogAndIncrementCalled(opts *bind.WatchOpts, sink chan<- *SimpleLogAndIncrementCalled) (event.Subscription, error) {

	logs, sub, err := _Simple.contract.WatchLogs(opts, "LogAndIncrementCalled")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SimpleLogAndIncrementCalled)
				if err := _Simple.contract.UnpackLog(event, "LogAndIncrementCalled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogAndIncrementCalled is a log parse operation binding the contract event 0x8df8e492f407b078593c5d8fd7e65ef68505999d911d5b99b017c0b7077398b9.
//
// Solidity: event LogAndIncrementCalled(uint256 expected, uint256 have)
func (_Simple *SimpleFilterer) ParseLogAndIncrementCalled(log types.Log) (*SimpleLogAndIncrementCalled, error) {
	event := new(SimpleLogAndIncrementCalled)
	if err := _Simple.contract.UnpackLog(event, "LogAndIncrementCalled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SimpleNullEventIterator is returned from FilterNullEvent and is used to iterate over the raw logs and unpacked data for NullEvent events raised by the Simple contract.
type SimpleNullEventIterator struct {
	Event *SimpleNullEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SimpleNullEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SimpleNullEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SimpleNullEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SimpleNullEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SimpleNullEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SimpleNullEvent represents a NullEvent event raised by the Simple contract.
type SimpleNullEvent struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterNullEvent is a free log retrieval operation binding the contract event 0x6f59c82101949290205a9ae9d0c657e6dae1a71c301ae76d385c2792294585fe.
//
// Solidity: event NullEvent()
func (_Simple *SimpleFilterer) FilterNullEvent(opts *bind.FilterOpts) (*SimpleNullEventIterator, error) {

	logs, sub, err := _Simple.contract.FilterLogs(opts, "NullEvent")
	if err != nil {
		return nil, err
	}
	return &SimpleNullEventIterator{contract: _Simple.contract, event: "NullEvent", logs: logs, sub: sub}, nil
}

// WatchNullEvent is a free log subscription operation binding the contract event 0x6f59c82101949290205a9ae9d0c657e6dae1a71c301ae76d385c2792294585fe.
//
// Solidity: event NullEvent()
func (_Simple *SimpleFilterer) WatchNullEvent(opts *bind.WatchOpts, sink chan<- *SimpleNullEvent) (event.Subscription, error) {

	logs, sub, err := _Simple.contract.WatchLogs(opts, "NullEvent")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SimpleNullEvent)
				if err := _Simple.contract.UnpackLog(event, "NullEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNullEvent is a log parse operation binding the contract event 0x6f59c82101949290205a9ae9d0c657e6dae1a71c301ae76d385c2792294585fe.
//
// Solidity: event NullEvent()
func (_Simple *SimpleFilterer) ParseNullEvent(log types.Log) (*SimpleNullEvent, error) {
	event := new(SimpleNullEvent)
	if err := _Simple.contract.UnpackLog(event, "NullEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SimpleRedeemedEventIterator is returned from FilterRedeemedEvent and is used to iterate over the raw logs and unpacked data for RedeemedEvent events raised by the Simple contract.
type SimpleRedeemedEventIterator struct {
	Event *SimpleRedeemedEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SimpleRedeemedEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SimpleRedeemedEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SimpleRedeemedEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SimpleRedeemedEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SimpleRedeemedEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SimpleRedeemedEvent represents a RedeemedEvent event raised by the Simple contract.
type SimpleRedeemedEvent struct {
	Caller   common.Address
	Redeemer common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterRedeemedEvent is a free log retrieval operation binding the contract event 0x773c78bf96e65f61c1a2622b47d76e78bfe70dd59cf4f11470c4c121c3159413.
//
// Solidity: event RedeemedEvent(address caller, address redeemer)
func (_Simple *SimpleFilterer) FilterRedeemedEvent(opts *bind.FilterOpts) (*SimpleRedeemedEventIterator, error) {

	logs, sub, err := _Simple.contract.FilterLogs(opts, "RedeemedEvent")
	if err != nil {
		return nil, err
	}
	return &SimpleRedeemedEventIterator{contract: _Simple.contract, event: "RedeemedEvent", logs: logs, sub: sub}, nil
}

// WatchRedeemedEvent is a free log subscription operation binding the contract event 0x773c78bf96e65f61c1a2622b47d76e78bfe70dd59cf4f11470c4c121c3159413.
//
// Solidity: event RedeemedEvent(address caller, address redeemer)
func (_Simple *SimpleFilterer) WatchRedeemedEvent(opts *bind.WatchOpts, sink chan<- *SimpleRedeemedEvent) (event.Subscription, error) {

	logs, sub, err := _Simple.contract.WatchLogs(opts, "RedeemedEvent")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SimpleRedeemedEvent)
				if err := _Simple.contract.UnpackLog(event, "RedeemedEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRedeemedEvent is a log parse operation binding the contract event 0x773c78bf96e65f61c1a2622b47d76e78bfe70dd59cf4f11470c4c121c3159413.
//
// Solidity: event RedeemedEvent(address caller, address redeemer)
func (_Simple *SimpleFilterer) ParseRedeemedEvent(log types.Log) (*SimpleRedeemedEvent, error) {
	event := new(SimpleRedeemedEvent)
	if err := _Simple.contract.UnpackLog(event, "RedeemedEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SimpleCacheManagerMetaData contains all meta data concerning the SimpleCacheManager contract.
var SimpleCacheManagerMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"program\",\"type\":\"address\"}],\"name\":\"cacheProgram\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"program\",\"type\":\"address\"}],\"name\":\"evictProgram\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50610198806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80636c769c091461003b578063e73ac9f214610050575b600080fd5b61004e610049366004610125565b610063565b005b61004e61005e366004610125565b6100d2565b6040517fce972013000000000000000000000000000000000000000000000000000000008152813f600482015260729063ce972013906024015b600060405180830381600087803b1580156100b757600080fd5b505af11580156100cb573d6000803e3d6000fd5b5050505050565b6040517fe73ac9f200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8216600482015260729063e73ac9f29060240161009d565b60006020828403121561013757600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461015b57600080fd5b939250505056fea2646970667358221220902c535ef20f5589eb87318b87ddf764de18da09e757b8c1be5f53540844514764736f6c63430008110033",
}

// SimpleCacheManagerABI is the input ABI used to generate the binding from.
// Deprecated: Use SimpleCacheManagerMetaData.ABI instead.
var SimpleCacheManagerABI = SimpleCacheManagerMetaData.ABI

// SimpleCacheManagerBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use SimpleCacheManagerMetaData.Bin instead.
var SimpleCacheManagerBin = SimpleCacheManagerMetaData.Bin

// DeploySimpleCacheManager deploys a new Ethereum contract, binding an instance of SimpleCacheManager to it.
func DeploySimpleCacheManager(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *SimpleCacheManager, error) {
	parsed, err := SimpleCacheManagerMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(SimpleCacheManagerBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &SimpleCacheManager{SimpleCacheManagerCaller: SimpleCacheManagerCaller{contract: contract}, SimpleCacheManagerTransactor: SimpleCacheManagerTransactor{contract: contract}, SimpleCacheManagerFilterer: SimpleCacheManagerFilterer{contract: contract}}, nil
}

// SimpleCacheManager is an auto generated Go binding around an Ethereum contract.
type SimpleCacheManager struct {
	SimpleCacheManagerCaller     // Read-only binding to the contract
	SimpleCacheManagerTransactor // Write-only binding to the contract
	SimpleCacheManagerFilterer   // Log filterer for contract events
}

// SimpleCacheManagerCaller is an auto generated read-only Go binding around an Ethereum contract.
type SimpleCacheManagerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SimpleCacheManagerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SimpleCacheManagerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SimpleCacheManagerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SimpleCacheManagerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SimpleCacheManagerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SimpleCacheManagerSession struct {
	Contract     *SimpleCacheManager // Generic contract binding to set the session for
	CallOpts     bind.CallOpts       // Call options to use throughout this session
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// SimpleCacheManagerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SimpleCacheManagerCallerSession struct {
	Contract *SimpleCacheManagerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts             // Call options to use throughout this session
}

// SimpleCacheManagerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SimpleCacheManagerTransactorSession struct {
	Contract     *SimpleCacheManagerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// SimpleCacheManagerRaw is an auto generated low-level Go binding around an Ethereum contract.
type SimpleCacheManagerRaw struct {
	Contract *SimpleCacheManager // Generic contract binding to access the raw methods on
}

// SimpleCacheManagerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SimpleCacheManagerCallerRaw struct {
	Contract *SimpleCacheManagerCaller // Generic read-only contract binding to access the raw methods on
}

// SimpleCacheManagerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SimpleCacheManagerTransactorRaw struct {
	Contract *SimpleCacheManagerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSimpleCacheManager creates a new instance of SimpleCacheManager, bound to a specific deployed contract.
func NewSimpleCacheManager(address common.Address, backend bind.ContractBackend) (*SimpleCacheManager, error) {
	contract, err := bindSimpleCacheManager(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &SimpleCacheManager{SimpleCacheManagerCaller: SimpleCacheManagerCaller{contract: contract}, SimpleCacheManagerTransactor: SimpleCacheManagerTransactor{contract: contract}, SimpleCacheManagerFilterer: SimpleCacheManagerFilterer{contract: contract}}, nil
}

// NewSimpleCacheManagerCaller creates a new read-only instance of SimpleCacheManager, bound to a specific deployed contract.
func NewSimpleCacheManagerCaller(address common.Address, caller bind.ContractCaller) (*SimpleCacheManagerCaller, error) {
	contract, err := bindSimpleCacheManager(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SimpleCacheManagerCaller{contract: contract}, nil
}

// NewSimpleCacheManagerTransactor creates a new write-only instance of SimpleCacheManager, bound to a specific deployed contract.
func NewSimpleCacheManagerTransactor(address common.Address, transactor bind.ContractTransactor) (*SimpleCacheManagerTransactor, error) {
	contract, err := bindSimpleCacheManager(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SimpleCacheManagerTransactor{contract: contract}, nil
}

// NewSimpleCacheManagerFilterer creates a new log filterer instance of SimpleCacheManager, bound to a specific deployed contract.
func NewSimpleCacheManagerFilterer(address common.Address, filterer bind.ContractFilterer) (*SimpleCacheManagerFilterer, error) {
	contract, err := bindSimpleCacheManager(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SimpleCacheManagerFilterer{contract: contract}, nil
}

// bindSimpleCacheManager binds a generic wrapper to an already deployed contract.
func bindSimpleCacheManager(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := SimpleCacheManagerMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SimpleCacheManager *SimpleCacheManagerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SimpleCacheManager.Contract.SimpleCacheManagerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SimpleCacheManager *SimpleCacheManagerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SimpleCacheManager.Contract.SimpleCacheManagerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SimpleCacheManager *SimpleCacheManagerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SimpleCacheManager.Contract.SimpleCacheManagerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SimpleCacheManager *SimpleCacheManagerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SimpleCacheManager.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SimpleCacheManager *SimpleCacheManagerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SimpleCacheManager.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SimpleCacheManager *SimpleCacheManagerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SimpleCacheManager.Contract.contract.Transact(opts, method, params...)
}

// CacheProgram is a paid mutator transaction binding the contract method 0xe73ac9f2.
//
// Solidity: function cacheProgram(address program) returns()
func (_SimpleCacheManager *SimpleCacheManagerTransactor) CacheProgram(opts *bind.TransactOpts, program common.Address) (*types.Transaction, error) {
	return _SimpleCacheManager.contract.Transact(opts, "cacheProgram", program)
}

// CacheProgram is a paid mutator transaction binding the contract method 0xe73ac9f2.
//
// Solidity: function cacheProgram(address program) returns()
func (_SimpleCacheManager *SimpleCacheManagerSession) CacheProgram(program common.Address) (*types.Transaction, error) {
	return _SimpleCacheManager.Contract.CacheProgram(&_SimpleCacheManager.TransactOpts, program)
}

// CacheProgram is a paid mutator transaction binding the contract method 0xe73ac9f2.
//
// Solidity: function cacheProgram(address program) returns()
func (_SimpleCacheManager *SimpleCacheManagerTransactorSession) CacheProgram(program common.Address) (*types.Transaction, error) {
	return _SimpleCacheManager.Contract.CacheProgram(&_SimpleCacheManager.TransactOpts, program)
}

// EvictProgram is a paid mutator transaction binding the contract method 0x6c769c09.
//
// Solidity: function evictProgram(address program) returns()
func (_SimpleCacheManager *SimpleCacheManagerTransactor) EvictProgram(opts *bind.TransactOpts, program common.Address) (*types.Transaction, error) {
	return _SimpleCacheManager.contract.Transact(opts, "evictProgram", program)
}

// EvictProgram is a paid mutator transaction binding the contract method 0x6c769c09.
//
// Solidity: function evictProgram(address program) returns()
func (_SimpleCacheManager *SimpleCacheManagerSession) EvictProgram(program common.Address) (*types.Transaction, error) {
	return _SimpleCacheManager.Contract.EvictProgram(&_SimpleCacheManager.TransactOpts, program)
}

// EvictProgram is a paid mutator transaction binding the contract method 0x6c769c09.
//
// Solidity: function evictProgram(address program) returns()
func (_SimpleCacheManager *SimpleCacheManagerTransactorSession) EvictProgram(program common.Address) (*types.Transaction, error) {
	return _SimpleCacheManager.Contract.EvictProgram(&_SimpleCacheManager.TransactOpts, program)
}

// SimpleProxyMetaData contains all meta data concerning the SimpleProxy contract.
var SimpleProxyMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"impl_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Bin: "0x60a060405234801561001057600080fd5b5060405161011d38038061011d83398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b608051609561008860003960006017015260956000f3fe608060405236601057600e6013565b005b600e5b603a7f0000000000000000000000000000000000000000000000000000000000000000603c565b565b3660008037600080366000845af43d6000803e808015605a573d6000f35b3d6000fdfea2646970667358221220531fff8a958102f0c057f016aebd9b9cfa37dcfeaf73b5ff9bbd72c1de9e446164736f6c63430008110033",
}

// SimpleProxyABI is the input ABI used to generate the binding from.
// Deprecated: Use SimpleProxyMetaData.ABI instead.
var SimpleProxyABI = SimpleProxyMetaData.ABI

// SimpleProxyBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use SimpleProxyMetaData.Bin instead.
var SimpleProxyBin = SimpleProxyMetaData.Bin

// DeploySimpleProxy deploys a new Ethereum contract, binding an instance of SimpleProxy to it.
func DeploySimpleProxy(auth *bind.TransactOpts, backend bind.ContractBackend, impl_ common.Address) (common.Address, *types.Transaction, *SimpleProxy, error) {
	parsed, err := SimpleProxyMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(SimpleProxyBin), backend, impl_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &SimpleProxy{SimpleProxyCaller: SimpleProxyCaller{contract: contract}, SimpleProxyTransactor: SimpleProxyTransactor{contract: contract}, SimpleProxyFilterer: SimpleProxyFilterer{contract: contract}}, nil
}

// SimpleProxy is an auto generated Go binding around an Ethereum contract.
type SimpleProxy struct {
	SimpleProxyCaller     // Read-only binding to the contract
	SimpleProxyTransactor // Write-only binding to the contract
	SimpleProxyFilterer   // Log filterer for contract events
}

// SimpleProxyCaller is an auto generated read-only Go binding around an Ethereum contract.
type SimpleProxyCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SimpleProxyTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SimpleProxyTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SimpleProxyFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SimpleProxyFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SimpleProxySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SimpleProxySession struct {
	Contract     *SimpleProxy      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SimpleProxyCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SimpleProxyCallerSession struct {
	Contract *SimpleProxyCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// SimpleProxyTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SimpleProxyTransactorSession struct {
	Contract     *SimpleProxyTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// SimpleProxyRaw is an auto generated low-level Go binding around an Ethereum contract.
type SimpleProxyRaw struct {
	Contract *SimpleProxy // Generic contract binding to access the raw methods on
}

// SimpleProxyCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SimpleProxyCallerRaw struct {
	Contract *SimpleProxyCaller // Generic read-only contract binding to access the raw methods on
}

// SimpleProxyTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SimpleProxyTransactorRaw struct {
	Contract *SimpleProxyTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSimpleProxy creates a new instance of SimpleProxy, bound to a specific deployed contract.
func NewSimpleProxy(address common.Address, backend bind.ContractBackend) (*SimpleProxy, error) {
	contract, err := bindSimpleProxy(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &SimpleProxy{SimpleProxyCaller: SimpleProxyCaller{contract: contract}, SimpleProxyTransactor: SimpleProxyTransactor{contract: contract}, SimpleProxyFilterer: SimpleProxyFilterer{contract: contract}}, nil
}

// NewSimpleProxyCaller creates a new read-only instance of SimpleProxy, bound to a specific deployed contract.
func NewSimpleProxyCaller(address common.Address, caller bind.ContractCaller) (*SimpleProxyCaller, error) {
	contract, err := bindSimpleProxy(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SimpleProxyCaller{contract: contract}, nil
}

// NewSimpleProxyTransactor creates a new write-only instance of SimpleProxy, bound to a specific deployed contract.
func NewSimpleProxyTransactor(address common.Address, transactor bind.ContractTransactor) (*SimpleProxyTransactor, error) {
	contract, err := bindSimpleProxy(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SimpleProxyTransactor{contract: contract}, nil
}

// NewSimpleProxyFilterer creates a new log filterer instance of SimpleProxy, bound to a specific deployed contract.
func NewSimpleProxyFilterer(address common.Address, filterer bind.ContractFilterer) (*SimpleProxyFilterer, error) {
	contract, err := bindSimpleProxy(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SimpleProxyFilterer{contract: contract}, nil
}

// bindSimpleProxy binds a generic wrapper to an already deployed contract.
func bindSimpleProxy(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := SimpleProxyMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SimpleProxy *SimpleProxyRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SimpleProxy.Contract.SimpleProxyCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SimpleProxy *SimpleProxyRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SimpleProxy.Contract.SimpleProxyTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SimpleProxy *SimpleProxyRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SimpleProxy.Contract.SimpleProxyTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SimpleProxy *SimpleProxyCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SimpleProxy.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SimpleProxy *SimpleProxyTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SimpleProxy.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SimpleProxy *SimpleProxyTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SimpleProxy.Contract.contract.Transact(opts, method, params...)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_SimpleProxy *SimpleProxyTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _SimpleProxy.contract.RawTransact(opts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_SimpleProxy *SimpleProxySession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _SimpleProxy.Contract.Fallback(&_SimpleProxy.TransactOpts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_SimpleProxy *SimpleProxyTransactorSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _SimpleProxy.Contract.Fallback(&_SimpleProxy.TransactOpts, calldata)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_SimpleProxy *SimpleProxyTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SimpleProxy.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_SimpleProxy *SimpleProxySession) Receive() (*types.Transaction, error) {
	return _SimpleProxy.Contract.Receive(&_SimpleProxy.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_SimpleProxy *SimpleProxyTransactorSession) Receive() (*types.Transaction, error) {
	return _SimpleProxy.Contract.Receive(&_SimpleProxy.TransactOpts)
}

// StorageSlotMetaData contains all meta data concerning the StorageSlot contract.
var StorageSlotMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122038d4c626f3a14db7c8c369db2a08234adfa917d94ccdd6c560416d27ae0eebd964736f6c63430008110033",
}

// StorageSlotABI is the input ABI used to generate the binding from.
// Deprecated: Use StorageSlotMetaData.ABI instead.
var StorageSlotABI = StorageSlotMetaData.ABI

// StorageSlotBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use StorageSlotMetaData.Bin instead.
var StorageSlotBin = StorageSlotMetaData.Bin

// DeployStorageSlot deploys a new Ethereum contract, binding an instance of StorageSlot to it.
func DeployStorageSlot(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *StorageSlot, error) {
	parsed, err := StorageSlotMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(StorageSlotBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &StorageSlot{StorageSlotCaller: StorageSlotCaller{contract: contract}, StorageSlotTransactor: StorageSlotTransactor{contract: contract}, StorageSlotFilterer: StorageSlotFilterer{contract: contract}}, nil
}

// StorageSlot is an auto generated Go binding around an Ethereum contract.
type StorageSlot struct {
	StorageSlotCaller     // Read-only binding to the contract
	StorageSlotTransactor // Write-only binding to the contract
	StorageSlotFilterer   // Log filterer for contract events
}

// StorageSlotCaller is an auto generated read-only Go binding around an Ethereum contract.
type StorageSlotCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StorageSlotTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StorageSlotTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StorageSlotFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StorageSlotFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StorageSlotSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StorageSlotSession struct {
	Contract     *StorageSlot      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StorageSlotCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StorageSlotCallerSession struct {
	Contract *StorageSlotCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// StorageSlotTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StorageSlotTransactorSession struct {
	Contract     *StorageSlotTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// StorageSlotRaw is an auto generated low-level Go binding around an Ethereum contract.
type StorageSlotRaw struct {
	Contract *StorageSlot // Generic contract binding to access the raw methods on
}

// StorageSlotCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StorageSlotCallerRaw struct {
	Contract *StorageSlotCaller // Generic read-only contract binding to access the raw methods on
}

// StorageSlotTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StorageSlotTransactorRaw struct {
	Contract *StorageSlotTransactor // Generic write-only contract binding to access the raw methods on
}

// NewStorageSlot creates a new instance of StorageSlot, bound to a specific deployed contract.
func NewStorageSlot(address common.Address, backend bind.ContractBackend) (*StorageSlot, error) {
	contract, err := bindStorageSlot(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &StorageSlot{StorageSlotCaller: StorageSlotCaller{contract: contract}, StorageSlotTransactor: StorageSlotTransactor{contract: contract}, StorageSlotFilterer: StorageSlotFilterer{contract: contract}}, nil
}

// NewStorageSlotCaller creates a new read-only instance of StorageSlot, bound to a specific deployed contract.
func NewStorageSlotCaller(address common.Address, caller bind.ContractCaller) (*StorageSlotCaller, error) {
	contract, err := bindStorageSlot(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StorageSlotCaller{contract: contract}, nil
}

// NewStorageSlotTransactor creates a new write-only instance of StorageSlot, bound to a specific deployed contract.
func NewStorageSlotTransactor(address common.Address, transactor bind.ContractTransactor) (*StorageSlotTransactor, error) {
	contract, err := bindStorageSlot(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StorageSlotTransactor{contract: contract}, nil
}

// NewStorageSlotFilterer creates a new log filterer instance of StorageSlot, bound to a specific deployed contract.
func NewStorageSlotFilterer(address common.Address, filterer bind.ContractFilterer) (*StorageSlotFilterer, error) {
	contract, err := bindStorageSlot(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StorageSlotFilterer{contract: contract}, nil
}

// bindStorageSlot binds a generic wrapper to an already deployed contract.
func bindStorageSlot(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := StorageSlotMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StorageSlot *StorageSlotRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StorageSlot.Contract.StorageSlotCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StorageSlot *StorageSlotRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StorageSlot.Contract.StorageSlotTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StorageSlot *StorageSlotRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StorageSlot.Contract.StorageSlotTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StorageSlot *StorageSlotCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StorageSlot.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StorageSlot *StorageSlotTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StorageSlot.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StorageSlot *StorageSlotTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StorageSlot.Contract.contract.Transact(opts, method, params...)
}

// TestWETH9MetaData contains all meta data concerning the TestWETH9 contract.
var TestWETH9MetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
	Bin: "0x60806040523480156200001157600080fd5b506040516200107838038062001078833981016040819052620000349162000123565b818160036200004483826200021c565b5060046200005382826200021c565b5050505050620002e8565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200008657600080fd5b81516001600160401b0380821115620000a357620000a36200005e565b604051601f8301601f19908116603f01168101908282118183101715620000ce57620000ce6200005e565b81604052838152602092508683858801011115620000eb57600080fd5b600091505b838210156200010f5785820183015181830184015290820190620000f0565b600093810190920192909252949350505050565b600080604083850312156200013757600080fd5b82516001600160401b03808211156200014f57600080fd5b6200015d8683870162000074565b935060208501519150808211156200017457600080fd5b50620001838582860162000074565b9150509250929050565b600181811c90821680620001a257607f821691505b602082108103620001c357634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200021757600081815260208120601f850160051c81016020861015620001f25750805b601f850160051c820191505b818110156200021357828155600101620001fe565b5050505b505050565b81516001600160401b038111156200023857620002386200005e565b62000250816200024984546200018d565b84620001c9565b602080601f8311600181146200028857600084156200026f5750858301515b600019600386901b1c1916600185901b17855562000213565b600085815260208120601f198616915b82811015620002b95788860151825594840194600190910190840162000298565b5085821015620002d85787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b610d8080620002f86000396000f3fe6080604052600436106100d25760003560e01c8063395093511161007f578063a457c2d711610059578063a457c2d71461021a578063a9059cbb1461023a578063d0e30db01461025a578063dd62ed3e1461026257600080fd5b806339509351146101af57806370a08231146101cf57806395d89b411461020557600080fd5b806323b872dd116100b057806323b872dd146101515780632e1a7d4d14610171578063313ce5671461019357600080fd5b806306fdde03146100d7578063095ea7b31461010257806318160ddd14610132575b600080fd5b3480156100e357600080fd5b506100ec6102a8565b6040516100f99190610b46565b60405180910390f35b34801561010e57600080fd5b5061012261011d366004610bce565b61033a565b60405190151581526020016100f9565b34801561013e57600080fd5b506002545b6040519081526020016100f9565b34801561015d57600080fd5b5061012261016c366004610bf8565b610354565b34801561017d57600080fd5b5061019161018c366004610c34565b610378565b005b34801561019f57600080fd5b50604051601281526020016100f9565b3480156101bb57600080fd5b506101226101ca366004610bce565b6103b3565b3480156101db57600080fd5b506101436101ea366004610c4d565b6001600160a01b031660009081526020819052604090205490565b34801561021157600080fd5b506100ec6103f2565b34801561022657600080fd5b50610122610235366004610bce565b610401565b34801561024657600080fd5b50610122610255366004610bce565b6104b0565b6101916104be565b34801561026e57600080fd5b5061014361027d366004610c6f565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6060600380546102b790610ca2565b80601f01602080910402602001604051908101604052809291908181526020018280546102e390610ca2565b80156103305780601f1061030557610100808354040283529160200191610330565b820191906000526020600020905b81548152906001019060200180831161031357829003601f168201915b5050505050905090565b6000336103488185856104ca565b60019150505b92915050565b600033610362858285610623565b61036d8585856106d3565b506001949350505050565b61038233826108ea565b604051339082156108fc029083906000818181858888f193505050501580156103af573d6000803e3d6000fd5b5050565b3360008181526001602090815260408083206001600160a01b038716845290915281205490919061034890829086906103ed908790610d24565b6104ca565b6060600480546102b790610ca2565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909190838110156104a35760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f00000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b61036d82868684036104ca565b6000336103488185856106d3565b6104c83334610a67565b565b6001600160a01b0383166105455760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f7265737300000000000000000000000000000000000000000000000000000000606482015260840161049a565b6001600160a01b0382166105c15760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f7373000000000000000000000000000000000000000000000000000000000000606482015260840161049a565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b038381166000908152600160209081526040808320938616835292905220547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146106cd57818110156106c05760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640161049a565b6106cd84848484036104ca565b50505050565b6001600160a01b03831661074f5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f6472657373000000000000000000000000000000000000000000000000000000606482015260840161049a565b6001600160a01b0382166107cb5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f6573730000000000000000000000000000000000000000000000000000000000606482015260840161049a565b6001600160a01b0383166000908152602081905260409020548181101561085a5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e63650000000000000000000000000000000000000000000000000000606482015260840161049a565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290610891908490610d24565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516108dd91815260200190565b60405180910390a36106cd565b6001600160a01b0382166109665760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f7300000000000000000000000000000000000000000000000000000000000000606482015260840161049a565b6001600160a01b038216600090815260208190526040902054818110156109f55760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f6365000000000000000000000000000000000000000000000000000000000000606482015260840161049a565b6001600160a01b0383166000908152602081905260408120838303905560028054849290610a24908490610d37565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001610616565b6001600160a01b038216610abd5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161049a565b8060026000828254610acf9190610d24565b90915550506001600160a01b03821660009081526020819052604081208054839290610afc908490610d24565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b600060208083528351808285015260005b81811015610b7357858101830151858201604001528201610b57565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168501019250505092915050565b80356001600160a01b0381168114610bc957600080fd5b919050565b60008060408385031215610be157600080fd5b610bea83610bb2565b946020939093013593505050565b600080600060608486031215610c0d57600080fd5b610c1684610bb2565b9250610c2460208501610bb2565b9150604084013590509250925092565b600060208284031215610c4657600080fd5b5035919050565b600060208284031215610c5f57600080fd5b610c6882610bb2565b9392505050565b60008060408385031215610c8257600080fd5b610c8b83610bb2565b9150610c9960208401610bb2565b90509250929050565b600181811c90821680610cb657607f821691505b602082108103610cef577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8082018082111561034e5761034e610cf5565b8181038181111561034e5761034e610cf556fea264697066735822122081f938c0f852371a2cc5c9d8e7f5a4c148d4c4546692e458969a8c402cb803be64736f6c63430008110033",
}

// TestWETH9ABI is the input ABI used to generate the binding from.
// Deprecated: Use TestWETH9MetaData.ABI instead.
var TestWETH9ABI = TestWETH9MetaData.ABI

// TestWETH9Bin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use TestWETH9MetaData.Bin instead.
var TestWETH9Bin = TestWETH9MetaData.Bin

// DeployTestWETH9 deploys a new Ethereum contract, binding an instance of TestWETH9 to it.
func DeployTestWETH9(auth *bind.TransactOpts, backend bind.ContractBackend, name_ string, symbol_ string) (common.Address, *types.Transaction, *TestWETH9, error) {
	parsed, err := TestWETH9MetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(TestWETH9Bin), backend, name_, symbol_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &TestWETH9{TestWETH9Caller: TestWETH9Caller{contract: contract}, TestWETH9Transactor: TestWETH9Transactor{contract: contract}, TestWETH9Filterer: TestWETH9Filterer{contract: contract}}, nil
}

// TestWETH9 is an auto generated Go binding around an Ethereum contract.
type TestWETH9 struct {
	TestWETH9Caller     // Read-only binding to the contract
	TestWETH9Transactor // Write-only binding to the contract
	TestWETH9Filterer   // Log filterer for contract events
}

// TestWETH9Caller is an auto generated read-only Go binding around an Ethereum contract.
type TestWETH9Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TestWETH9Transactor is an auto generated write-only Go binding around an Ethereum contract.
type TestWETH9Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TestWETH9Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TestWETH9Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TestWETH9Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TestWETH9Session struct {
	Contract     *TestWETH9        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// TestWETH9CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TestWETH9CallerSession struct {
	Contract *TestWETH9Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// TestWETH9TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TestWETH9TransactorSession struct {
	Contract     *TestWETH9Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// TestWETH9Raw is an auto generated low-level Go binding around an Ethereum contract.
type TestWETH9Raw struct {
	Contract *TestWETH9 // Generic contract binding to access the raw methods on
}

// TestWETH9CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TestWETH9CallerRaw struct {
	Contract *TestWETH9Caller // Generic read-only contract binding to access the raw methods on
}

// TestWETH9TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TestWETH9TransactorRaw struct {
	Contract *TestWETH9Transactor // Generic write-only contract binding to access the raw methods on
}

// NewTestWETH9 creates a new instance of TestWETH9, bound to a specific deployed contract.
func NewTestWETH9(address common.Address, backend bind.ContractBackend) (*TestWETH9, error) {
	contract, err := bindTestWETH9(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &TestWETH9{TestWETH9Caller: TestWETH9Caller{contract: contract}, TestWETH9Transactor: TestWETH9Transactor{contract: contract}, TestWETH9Filterer: TestWETH9Filterer{contract: contract}}, nil
}

// NewTestWETH9Caller creates a new read-only instance of TestWETH9, bound to a specific deployed contract.
func NewTestWETH9Caller(address common.Address, caller bind.ContractCaller) (*TestWETH9Caller, error) {
	contract, err := bindTestWETH9(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TestWETH9Caller{contract: contract}, nil
}

// NewTestWETH9Transactor creates a new write-only instance of TestWETH9, bound to a specific deployed contract.
func NewTestWETH9Transactor(address common.Address, transactor bind.ContractTransactor) (*TestWETH9Transactor, error) {
	contract, err := bindTestWETH9(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TestWETH9Transactor{contract: contract}, nil
}

// NewTestWETH9Filterer creates a new log filterer instance of TestWETH9, bound to a specific deployed contract.
func NewTestWETH9Filterer(address common.Address, filterer bind.ContractFilterer) (*TestWETH9Filterer, error) {
	contract, err := bindTestWETH9(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TestWETH9Filterer{contract: contract}, nil
}

// bindTestWETH9 binds a generic wrapper to an already deployed contract.
func bindTestWETH9(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := TestWETH9MetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TestWETH9 *TestWETH9Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TestWETH9.Contract.TestWETH9Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TestWETH9 *TestWETH9Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TestWETH9.Contract.TestWETH9Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TestWETH9 *TestWETH9Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TestWETH9.Contract.TestWETH9Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TestWETH9 *TestWETH9CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TestWETH9.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TestWETH9 *TestWETH9TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TestWETH9.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TestWETH9 *TestWETH9TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TestWETH9.Contract.contract.Transact(opts, method, params...)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_TestWETH9 *TestWETH9Caller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _TestWETH9.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_TestWETH9 *TestWETH9Session) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _TestWETH9.Contract.Allowance(&_TestWETH9.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_TestWETH9 *TestWETH9CallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _TestWETH9.Contract.Allowance(&_TestWETH9.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_TestWETH9 *TestWETH9Caller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _TestWETH9.contract.Call(opts, &out, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_TestWETH9 *TestWETH9Session) BalanceOf(account common.Address) (*big.Int, error) {
	return _TestWETH9.Contract.BalanceOf(&_TestWETH9.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_TestWETH9 *TestWETH9CallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _TestWETH9.Contract.BalanceOf(&_TestWETH9.CallOpts, account)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_TestWETH9 *TestWETH9Caller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _TestWETH9.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_TestWETH9 *TestWETH9Session) Decimals() (uint8, error) {
	return _TestWETH9.Contract.Decimals(&_TestWETH9.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_TestWETH9 *TestWETH9CallerSession) Decimals() (uint8, error) {
	return _TestWETH9.Contract.Decimals(&_TestWETH9.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_TestWETH9 *TestWETH9Caller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _TestWETH9.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_TestWETH9 *TestWETH9Session) Name() (string, error) {
	return _TestWETH9.Contract.Name(&_TestWETH9.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_TestWETH9 *TestWETH9CallerSession) Name() (string, error) {
	return _TestWETH9.Contract.Name(&_TestWETH9.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_TestWETH9 *TestWETH9Caller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _TestWETH9.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_TestWETH9 *TestWETH9Session) Symbol() (string, error) {
	return _TestWETH9.Contract.Symbol(&_TestWETH9.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_TestWETH9 *TestWETH9CallerSession) Symbol() (string, error) {
	return _TestWETH9.Contract.Symbol(&_TestWETH9.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_TestWETH9 *TestWETH9Caller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _TestWETH9.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_TestWETH9 *TestWETH9Session) TotalSupply() (*big.Int, error) {
	return _TestWETH9.Contract.TotalSupply(&_TestWETH9.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_TestWETH9 *TestWETH9CallerSession) TotalSupply() (*big.Int, error) {
	return _TestWETH9.Contract.TotalSupply(&_TestWETH9.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_TestWETH9 *TestWETH9Transactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _TestWETH9.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_TestWETH9 *TestWETH9Session) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _TestWETH9.Contract.Approve(&_TestWETH9.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_TestWETH9 *TestWETH9TransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _TestWETH9.Contract.Approve(&_TestWETH9.TransactOpts, spender, amount)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_TestWETH9 *TestWETH9Transactor) DecreaseAllowance(opts *bind.TransactOpts, spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _TestWETH9.contract.Transact(opts, "decreaseAllowance", spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_TestWETH9 *TestWETH9Session) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _TestWETH9.Contract.DecreaseAllowance(&_TestWETH9.TransactOpts, spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_TestWETH9 *TestWETH9TransactorSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _TestWETH9.Contract.DecreaseAllowance(&_TestWETH9.TransactOpts, spender, subtractedValue)
}

// Deposit is a paid mutator transaction binding the contract method 0xd0e30db0.
//
// Solidity: function deposit() payable returns()
func (_TestWETH9 *TestWETH9Transactor) Deposit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TestWETH9.contract.Transact(opts, "deposit")
}

// Deposit is a paid mutator transaction binding the contract method 0xd0e30db0.
//
// Solidity: function deposit() payable returns()
func (_TestWETH9 *TestWETH9Session) Deposit() (*types.Transaction, error) {
	return _TestWETH9.Contract.Deposit(&_TestWETH9.TransactOpts)
}

// Deposit is a paid mutator transaction binding the contract method 0xd0e30db0.
//
// Solidity: function deposit() payable returns()
func (_TestWETH9 *TestWETH9TransactorSession) Deposit() (*types.Transaction, error) {
	return _TestWETH9.Contract.Deposit(&_TestWETH9.TransactOpts)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_TestWETH9 *TestWETH9Transactor) IncreaseAllowance(opts *bind.TransactOpts, spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _TestWETH9.contract.Transact(opts, "increaseAllowance", spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_TestWETH9 *TestWETH9Session) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _TestWETH9.Contract.IncreaseAllowance(&_TestWETH9.TransactOpts, spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_TestWETH9 *TestWETH9TransactorSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _TestWETH9.Contract.IncreaseAllowance(&_TestWETH9.TransactOpts, spender, addedValue)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_TestWETH9 *TestWETH9Transactor) Transfer(opts *bind.TransactOpts, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _TestWETH9.contract.Transact(opts, "transfer", to, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_TestWETH9 *TestWETH9Session) Transfer(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _TestWETH9.Contract.Transfer(&_TestWETH9.TransactOpts, to, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_TestWETH9 *TestWETH9TransactorSession) Transfer(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _TestWETH9.Contract.Transfer(&_TestWETH9.TransactOpts, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_TestWETH9 *TestWETH9Transactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _TestWETH9.contract.Transact(opts, "transferFrom", from, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_TestWETH9 *TestWETH9Session) TransferFrom(from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _TestWETH9.Contract.TransferFrom(&_TestWETH9.TransactOpts, from, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_TestWETH9 *TestWETH9TransactorSession) TransferFrom(from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _TestWETH9.Contract.TransferFrom(&_TestWETH9.TransactOpts, from, to, amount)
}

// Withdraw is a paid mutator transaction binding the contract method 0x2e1a7d4d.
//
// Solidity: function withdraw(uint256 _amount) returns()
func (_TestWETH9 *TestWETH9Transactor) Withdraw(opts *bind.TransactOpts, _amount *big.Int) (*types.Transaction, error) {
	return _TestWETH9.contract.Transact(opts, "withdraw", _amount)
}

// Withdraw is a paid mutator transaction binding the contract method 0x2e1a7d4d.
//
// Solidity: function withdraw(uint256 _amount) returns()
func (_TestWETH9 *TestWETH9Session) Withdraw(_amount *big.Int) (*types.Transaction, error) {
	return _TestWETH9.Contract.Withdraw(&_TestWETH9.TransactOpts, _amount)
}

// Withdraw is a paid mutator transaction binding the contract method 0x2e1a7d4d.
//
// Solidity: function withdraw(uint256 _amount) returns()
func (_TestWETH9 *TestWETH9TransactorSession) Withdraw(_amount *big.Int) (*types.Transaction, error) {
	return _TestWETH9.Contract.Withdraw(&_TestWETH9.TransactOpts, _amount)
}

// TestWETH9ApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the TestWETH9 contract.
type TestWETH9ApprovalIterator struct {
	Event *TestWETH9Approval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TestWETH9ApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestWETH9Approval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TestWETH9Approval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TestWETH9ApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TestWETH9ApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TestWETH9Approval represents a Approval event raised by the TestWETH9 contract.
type TestWETH9Approval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_TestWETH9 *TestWETH9Filterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*TestWETH9ApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _TestWETH9.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &TestWETH9ApprovalIterator{contract: _TestWETH9.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_TestWETH9 *TestWETH9Filterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *TestWETH9Approval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _TestWETH9.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TestWETH9Approval)
				if err := _TestWETH9.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_TestWETH9 *TestWETH9Filterer) ParseApproval(log types.Log) (*TestWETH9Approval, error) {
	event := new(TestWETH9Approval)
	if err := _TestWETH9.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TestWETH9TransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the TestWETH9 contract.
type TestWETH9TransferIterator struct {
	Event *TestWETH9Transfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TestWETH9TransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestWETH9Transfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TestWETH9Transfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TestWETH9TransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TestWETH9TransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TestWETH9Transfer represents a Transfer event raised by the TestWETH9 contract.
type TestWETH9Transfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_TestWETH9 *TestWETH9Filterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*TestWETH9TransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _TestWETH9.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &TestWETH9TransferIterator{contract: _TestWETH9.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_TestWETH9 *TestWETH9Filterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *TestWETH9Transfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _TestWETH9.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TestWETH9Transfer)
				if err := _TestWETH9.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_TestWETH9 *TestWETH9Filterer) ParseTransfer(log types.Log) (*TestWETH9Transfer, error) {
	event := new(TestWETH9Transfer)
	if err := _TestWETH9.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TransparentUpgradeableProxyMetaData contains all meta data concerning the TransparentUpgradeableProxy contract.
var TransparentUpgradeableProxyMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_logic\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"implementation_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"}]",
	Bin: "0x608060405260405162000ed338038062000ed3833981016040819052620000269162000487565b828162000036828260006200004d565b50620000449050826200008a565b505050620005ba565b6200005883620000e5565b600082511180620000665750805b1562000085576200008383836200012760201b6200023e1760201c565b505b505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f620000b562000156565b604080516001600160a01b03928316815291841660208301520160405180910390a1620000e2816200018f565b50565b620000f08162000244565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606200014f838360405180606001604052806027815260200162000eac60279139620002f8565b9392505050565b60006200018060008051602062000e8c83398151915260001b620003de60201b620001fa1760201c565b546001600160a01b0316919050565b6001600160a01b038116620001fa5760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b806200022360008051602062000e8c83398151915260001b620003de60201b620001fa1760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b6200025a81620003e160201b6200026a1760201c565b620002be5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401620001f1565b80620002237f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b620003de60201b620001fa1760201c565b60606001600160a01b0384163b620003625760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401620001f1565b600080856001600160a01b0316856040516200037f919062000567565b600060405180830381855af49150503d8060008114620003bc576040519150601f19603f3d011682016040523d82523d6000602084013e620003c1565b606091505b509092509050620003d4828286620003f0565b9695505050505050565b90565b6001600160a01b03163b151590565b60608315620004015750816200014f565b825115620004125782518084602001fd5b8160405162461bcd60e51b8152600401620001f1919062000585565b80516001600160a01b03811681146200044657600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60005b838110156200047e57818101518382015260200162000464565b50506000910152565b6000806000606084860312156200049d57600080fd5b620004a8846200042e565b9250620004b8602085016200042e565b60408501519092506001600160401b0380821115620004d657600080fd5b818601915086601f830112620004eb57600080fd5b8151818111156200050057620005006200044b565b604051601f8201601f19908116603f011681019083821181831017156200052b576200052b6200044b565b816040528281528960208487010111156200054557600080fd5b6200055883602083016020880162000461565b80955050505050509250925092565b600082516200057b81846020870162000461565b9190910192915050565b6020815260008251806020840152620005a681604085016020870162000461565b601f01601f19169190910160400192915050565b6108c280620005ca6000396000f3fe60806040526004361061005e5760003560e01c80635c60da1b116100435780635c60da1b146100a85780638f283970146100d9578063f851a440146100f95761006d565b80633659cfe6146100755780634f1ef286146100955761006d565b3661006d5761006b61010e565b005b61006b61010e565b34801561008157600080fd5b5061006b610090366004610736565b610128565b61006b6100a3366004610751565b610165565b3480156100b457600080fd5b506100bd6101cc565b6040516001600160a01b03909116815260200160405180910390f35b3480156100e557600080fd5b5061006b6100f4366004610736565b6101fd565b34801561010557600080fd5b506100bd61021d565b610116610279565b610126610121610329565b610333565b565b610130610357565b6001600160a01b0316330361015d5761015a8160405180602001604052806000815250600061038a565b50565b61015a61010e565b61016d610357565b6001600160a01b031633036101c4576101bf8383838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506001925061038a915050565b505050565b6101bf61010e565b60006101d6610357565b6001600160a01b031633036101f2576101ed610329565b905090565b6101fa61010e565b90565b610205610357565b6001600160a01b0316330361015d5761015a816103b5565b6000610227610357565b6001600160a01b031633036101f2576101ed610357565b6060610263838360405180606001604052806027815260200161086660279139610409565b9392505050565b6001600160a01b03163b151590565b610281610357565b6001600160a01b031633036101265760405162461bcd60e51b815260206004820152604260248201527f5472616e73706172656e745570677261646561626c6550726f78793a2061646d60448201527f696e2063616e6e6f742066616c6c6261636b20746f2070726f7879207461726760648201527f6574000000000000000000000000000000000000000000000000000000000000608482015260a4015b60405180910390fd5b60006101ed6104fd565b3660008037600080366000845af43d6000803e808015610352573d6000f35b3d6000fd5b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b546001600160a01b0316919050565b61039383610525565b6000825111806103a05750805b156101bf576103af838361023e565b50505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6103de610357565b604080516001600160a01b03928316815291841660208301520160405180910390a161015a81610565565b60606001600160a01b0384163b6104885760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152608401610320565b600080856001600160a01b0316856040516104a391906107f8565b600060405180830381855af49150503d80600081146104de576040519150601f19603f3d011682016040523d82523d6000602084013e6104e3565b606091505b50915091506104f382828661063d565b9695505050505050565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc61037b565b61052e81610676565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6001600160a01b0381166105e15760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610320565b807fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b039290921691909117905550565b6060831561064c575081610263565b82511561065c5782518084602001fd5b8160405162461bcd60e51b81526004016103209190610814565b6001600160a01b0381163b6106f35760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152608401610320565b807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610604565b80356001600160a01b038116811461073157600080fd5b919050565b60006020828403121561074857600080fd5b6102638261071a565b60008060006040848603121561076657600080fd5b61076f8461071a565b9250602084013567ffffffffffffffff8082111561078c57600080fd5b818601915086601f8301126107a057600080fd5b8135818111156107af57600080fd5b8760208285010111156107c157600080fd5b6020830194508093505050509250925092565b60005b838110156107ef5781810151838201526020016107d7565b50506000910152565b6000825161080a8184602087016107d4565b9190910192915050565b60208152600082518060208401526108338160408501602087016107d4565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212205cd6b2241de392748e5d7da0c651ed01ad96377531dcb31d239fc52936d5641164736f6c63430008110033b53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564",
}

// TransparentUpgradeableProxyABI is the input ABI used to generate the binding from.
// Deprecated: Use TransparentUpgradeableProxyMetaData.ABI instead.
var TransparentUpgradeableProxyABI = TransparentUpgradeableProxyMetaData.ABI

// TransparentUpgradeableProxyBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use TransparentUpgradeableProxyMetaData.Bin instead.
var TransparentUpgradeableProxyBin = TransparentUpgradeableProxyMetaData.Bin

// DeployTransparentUpgradeableProxy deploys a new Ethereum contract, binding an instance of TransparentUpgradeableProxy to it.
func DeployTransparentUpgradeableProxy(auth *bind.TransactOpts, backend bind.ContractBackend, _logic common.Address, admin_ common.Address, _data []byte) (common.Address, *types.Transaction, *TransparentUpgradeableProxy, error) {
	parsed, err := TransparentUpgradeableProxyMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(TransparentUpgradeableProxyBin), backend, _logic, admin_, _data)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &TransparentUpgradeableProxy{TransparentUpgradeableProxyCaller: TransparentUpgradeableProxyCaller{contract: contract}, TransparentUpgradeableProxyTransactor: TransparentUpgradeableProxyTransactor{contract: contract}, TransparentUpgradeableProxyFilterer: TransparentUpgradeableProxyFilterer{contract: contract}}, nil
}

// TransparentUpgradeableProxy is an auto generated Go binding around an Ethereum contract.
type TransparentUpgradeableProxy struct {
	TransparentUpgradeableProxyCaller     // Read-only binding to the contract
	TransparentUpgradeableProxyTransactor // Write-only binding to the contract
	TransparentUpgradeableProxyFilterer   // Log filterer for contract events
}

// TransparentUpgradeableProxyCaller is an auto generated read-only Go binding around an Ethereum contract.
type TransparentUpgradeableProxyCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TransparentUpgradeableProxyTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TransparentUpgradeableProxyTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TransparentUpgradeableProxyFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TransparentUpgradeableProxyFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TransparentUpgradeableProxySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TransparentUpgradeableProxySession struct {
	Contract     *TransparentUpgradeableProxy // Generic contract binding to set the session for
	CallOpts     bind.CallOpts                // Call options to use throughout this session
	TransactOpts bind.TransactOpts            // Transaction auth options to use throughout this session
}

// TransparentUpgradeableProxyCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TransparentUpgradeableProxyCallerSession struct {
	Contract *TransparentUpgradeableProxyCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                      // Call options to use throughout this session
}

// TransparentUpgradeableProxyTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TransparentUpgradeableProxyTransactorSession struct {
	Contract     *TransparentUpgradeableProxyTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                      // Transaction auth options to use throughout this session
}

// TransparentUpgradeableProxyRaw is an auto generated low-level Go binding around an Ethereum contract.
type TransparentUpgradeableProxyRaw struct {
	Contract *TransparentUpgradeableProxy // Generic contract binding to access the raw methods on
}

// TransparentUpgradeableProxyCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TransparentUpgradeableProxyCallerRaw struct {
	Contract *TransparentUpgradeableProxyCaller // Generic read-only contract binding to access the raw methods on
}

// TransparentUpgradeableProxyTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TransparentUpgradeableProxyTransactorRaw struct {
	Contract *TransparentUpgradeableProxyTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTransparentUpgradeableProxy creates a new instance of TransparentUpgradeableProxy, bound to a specific deployed contract.
func NewTransparentUpgradeableProxy(address common.Address, backend bind.ContractBackend) (*TransparentUpgradeableProxy, error) {
	contract, err := bindTransparentUpgradeableProxy(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &TransparentUpgradeableProxy{TransparentUpgradeableProxyCaller: TransparentUpgradeableProxyCaller{contract: contract}, TransparentUpgradeableProxyTransactor: TransparentUpgradeableProxyTransactor{contract: contract}, TransparentUpgradeableProxyFilterer: TransparentUpgradeableProxyFilterer{contract: contract}}, nil
}

// NewTransparentUpgradeableProxyCaller creates a new read-only instance of TransparentUpgradeableProxy, bound to a specific deployed contract.
func NewTransparentUpgradeableProxyCaller(address common.Address, caller bind.ContractCaller) (*TransparentUpgradeableProxyCaller, error) {
	contract, err := bindTransparentUpgradeableProxy(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TransparentUpgradeableProxyCaller{contract: contract}, nil
}

// NewTransparentUpgradeableProxyTransactor creates a new write-only instance of TransparentUpgradeableProxy, bound to a specific deployed contract.
func NewTransparentUpgradeableProxyTransactor(address common.Address, transactor bind.ContractTransactor) (*TransparentUpgradeableProxyTransactor, error) {
	contract, err := bindTransparentUpgradeableProxy(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TransparentUpgradeableProxyTransactor{contract: contract}, nil
}

// NewTransparentUpgradeableProxyFilterer creates a new log filterer instance of TransparentUpgradeableProxy, bound to a specific deployed contract.
func NewTransparentUpgradeableProxyFilterer(address common.Address, filterer bind.ContractFilterer) (*TransparentUpgradeableProxyFilterer, error) {
	contract, err := bindTransparentUpgradeableProxy(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TransparentUpgradeableProxyFilterer{contract: contract}, nil
}

// bindTransparentUpgradeableProxy binds a generic wrapper to an already deployed contract.
func bindTransparentUpgradeableProxy(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := TransparentUpgradeableProxyMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TransparentUpgradeableProxy *TransparentUpgradeableProxyRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TransparentUpgradeableProxy.Contract.TransparentUpgradeableProxyCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TransparentUpgradeableProxy *TransparentUpgradeableProxyRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TransparentUpgradeableProxy.Contract.TransparentUpgradeableProxyTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TransparentUpgradeableProxy *TransparentUpgradeableProxyRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TransparentUpgradeableProxy.Contract.TransparentUpgradeableProxyTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TransparentUpgradeableProxy *TransparentUpgradeableProxyCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TransparentUpgradeableProxy.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TransparentUpgradeableProxy *TransparentUpgradeableProxyTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TransparentUpgradeableProxy.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TransparentUpgradeableProxy *TransparentUpgradeableProxyTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TransparentUpgradeableProxy.Contract.contract.Transact(opts, method, params...)
}

// Admin is a paid mutator transaction binding the contract method 0xf851a440.
//
// Solidity: function admin() returns(address admin_)
func (_TransparentUpgradeableProxy *TransparentUpgradeableProxyTransactor) Admin(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TransparentUpgradeableProxy.contract.Transact(opts, "admin")
}

// Admin is a paid mutator transaction binding the contract method 0xf851a440.
//
// Solidity: function admin() returns(address admin_)
func (_TransparentUpgradeableProxy *TransparentUpgradeableProxySession) Admin() (*types.Transaction, error) {
	return _TransparentUpgradeableProxy.Contract.Admin(&_TransparentUpgradeableProxy.TransactOpts)
}

// Admin is a paid mutator transaction binding the contract method 0xf851a440.
//
// Solidity: function admin() returns(address admin_)
func (_TransparentUpgradeableProxy *TransparentUpgradeableProxyTransactorSession) Admin() (*types.Transaction, error) {
	return _TransparentUpgradeableProxy.Contract.Admin(&_TransparentUpgradeableProxy.TransactOpts)
}

// ChangeAdmin is a paid mutator transaction binding the contract method 0x8f283970.
//
// Solidity: function changeAdmin(address newAdmin) returns()
func (_TransparentUpgradeableProxy *TransparentUpgradeableProxyTransactor) ChangeAdmin(opts *bind.TransactOpts, newAdmin common.Address) (*types.Transaction, error) {
	return _TransparentUpgradeableProxy.contract.Transact(opts, "changeAdmin", newAdmin)
}

// ChangeAdmin is a paid mutator transaction binding the contract method 0x8f283970.
//
// Solidity: function changeAdmin(address newAdmin) returns()
func (_TransparentUpgradeableProxy *TransparentUpgradeableProxySession) ChangeAdmin(newAdmin common.Address) (*types.Transaction, error) {
	return _TransparentUpgradeableProxy.Contract.ChangeAdmin(&_TransparentUpgradeableProxy.TransactOpts, newAdmin)
}

// ChangeAdmin is a paid mutator transaction binding the contract method 0x8f283970.
//
// Solidity: function changeAdmin(address newAdmin) returns()
func (_TransparentUpgradeableProxy *TransparentUpgradeableProxyTransactorSession) ChangeAdmin(newAdmin common.Address) (*types.Transaction, error) {
	return _TransparentUpgradeableProxy.Contract.ChangeAdmin(&_TransparentUpgradeableProxy.TransactOpts, newAdmin)
}

// Implementation is a paid mutator transaction binding the contract method 0x5c60da1b.
//
// Solidity: function implementation() returns(address implementation_)
func (_TransparentUpgradeableProxy *TransparentUpgradeableProxyTransactor) Implementation(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TransparentUpgradeableProxy.contract.Transact(opts, "implementation")
}

// Implementation is a paid mutator transaction binding the contract method 0x5c60da1b.
//
// Solidity: function implementation() returns(address implementation_)
func (_TransparentUpgradeableProxy *TransparentUpgradeableProxySession) Implementation() (*types.Transaction, error) {
	return _TransparentUpgradeableProxy.Contract.Implementation(&_TransparentUpgradeableProxy.TransactOpts)
}

// Implementation is a paid mutator transaction binding the contract method 0x5c60da1b.
//
// Solidity: function implementation() returns(address implementation_)
func (_TransparentUpgradeableProxy *TransparentUpgradeableProxyTransactorSession) Implementation() (*types.Transaction, error) {
	return _TransparentUpgradeableProxy.Contract.Implementation(&_TransparentUpgradeableProxy.TransactOpts)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_TransparentUpgradeableProxy *TransparentUpgradeableProxyTransactor) UpgradeTo(opts *bind.TransactOpts, newImplementation common.Address) (*types.Transaction, error) {
	return _TransparentUpgradeableProxy.contract.Transact(opts, "upgradeTo", newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_TransparentUpgradeableProxy *TransparentUpgradeableProxySession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _TransparentUpgradeableProxy.Contract.UpgradeTo(&_TransparentUpgradeableProxy.TransactOpts, newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_TransparentUpgradeableProxy *TransparentUpgradeableProxyTransactorSession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _TransparentUpgradeableProxy.Contract.UpgradeTo(&_TransparentUpgradeableProxy.TransactOpts, newImplementation)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_TransparentUpgradeableProxy *TransparentUpgradeableProxyTransactor) UpgradeToAndCall(opts *bind.TransactOpts, newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _TransparentUpgradeableProxy.contract.Transact(opts, "upgradeToAndCall", newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_TransparentUpgradeableProxy *TransparentUpgradeableProxySession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _TransparentUpgradeableProxy.Contract.UpgradeToAndCall(&_TransparentUpgradeableProxy.TransactOpts, newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_TransparentUpgradeableProxy *TransparentUpgradeableProxyTransactorSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _TransparentUpgradeableProxy.Contract.UpgradeToAndCall(&_TransparentUpgradeableProxy.TransactOpts, newImplementation, data)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_TransparentUpgradeableProxy *TransparentUpgradeableProxyTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _TransparentUpgradeableProxy.contract.RawTransact(opts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_TransparentUpgradeableProxy *TransparentUpgradeableProxySession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _TransparentUpgradeableProxy.Contract.Fallback(&_TransparentUpgradeableProxy.TransactOpts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_TransparentUpgradeableProxy *TransparentUpgradeableProxyTransactorSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _TransparentUpgradeableProxy.Contract.Fallback(&_TransparentUpgradeableProxy.TransactOpts, calldata)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_TransparentUpgradeableProxy *TransparentUpgradeableProxyTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TransparentUpgradeableProxy.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_TransparentUpgradeableProxy *TransparentUpgradeableProxySession) Receive() (*types.Transaction, error) {
	return _TransparentUpgradeableProxy.Contract.Receive(&_TransparentUpgradeableProxy.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_TransparentUpgradeableProxy *TransparentUpgradeableProxyTransactorSession) Receive() (*types.Transaction, error) {
	return _TransparentUpgradeableProxy.Contract.Receive(&_TransparentUpgradeableProxy.TransactOpts)
}

// TransparentUpgradeableProxyAdminChangedIterator is returned from FilterAdminChanged and is used to iterate over the raw logs and unpacked data for AdminChanged events raised by the TransparentUpgradeableProxy contract.
type TransparentUpgradeableProxyAdminChangedIterator struct {
	Event *TransparentUpgradeableProxyAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TransparentUpgradeableProxyAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TransparentUpgradeableProxyAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TransparentUpgradeableProxyAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TransparentUpgradeableProxyAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TransparentUpgradeableProxyAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TransparentUpgradeableProxyAdminChanged represents a AdminChanged event raised by the TransparentUpgradeableProxy contract.
type TransparentUpgradeableProxyAdminChanged struct {
	PreviousAdmin common.Address
	NewAdmin      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAdminChanged is a free log retrieval operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_TransparentUpgradeableProxy *TransparentUpgradeableProxyFilterer) FilterAdminChanged(opts *bind.FilterOpts) (*TransparentUpgradeableProxyAdminChangedIterator, error) {

	logs, sub, err := _TransparentUpgradeableProxy.contract.FilterLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return &TransparentUpgradeableProxyAdminChangedIterator{contract: _TransparentUpgradeableProxy.contract, event: "AdminChanged", logs: logs, sub: sub}, nil
}

// WatchAdminChanged is a free log subscription operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_TransparentUpgradeableProxy *TransparentUpgradeableProxyFilterer) WatchAdminChanged(opts *bind.WatchOpts, sink chan<- *TransparentUpgradeableProxyAdminChanged) (event.Subscription, error) {

	logs, sub, err := _TransparentUpgradeableProxy.contract.WatchLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TransparentUpgradeableProxyAdminChanged)
				if err := _TransparentUpgradeableProxy.contract.UnpackLog(event, "AdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAdminChanged is a log parse operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_TransparentUpgradeableProxy *TransparentUpgradeableProxyFilterer) ParseAdminChanged(log types.Log) (*TransparentUpgradeableProxyAdminChanged, error) {
	event := new(TransparentUpgradeableProxyAdminChanged)
	if err := _TransparentUpgradeableProxy.contract.UnpackLog(event, "AdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TransparentUpgradeableProxyBeaconUpgradedIterator is returned from FilterBeaconUpgraded and is used to iterate over the raw logs and unpacked data for BeaconUpgraded events raised by the TransparentUpgradeableProxy contract.
type TransparentUpgradeableProxyBeaconUpgradedIterator struct {
	Event *TransparentUpgradeableProxyBeaconUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TransparentUpgradeableProxyBeaconUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TransparentUpgradeableProxyBeaconUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TransparentUpgradeableProxyBeaconUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TransparentUpgradeableProxyBeaconUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TransparentUpgradeableProxyBeaconUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TransparentUpgradeableProxyBeaconUpgraded represents a BeaconUpgraded event raised by the TransparentUpgradeableProxy contract.
type TransparentUpgradeableProxyBeaconUpgraded struct {
	Beacon common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBeaconUpgraded is a free log retrieval operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_TransparentUpgradeableProxy *TransparentUpgradeableProxyFilterer) FilterBeaconUpgraded(opts *bind.FilterOpts, beacon []common.Address) (*TransparentUpgradeableProxyBeaconUpgradedIterator, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _TransparentUpgradeableProxy.contract.FilterLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return &TransparentUpgradeableProxyBeaconUpgradedIterator{contract: _TransparentUpgradeableProxy.contract, event: "BeaconUpgraded", logs: logs, sub: sub}, nil
}

// WatchBeaconUpgraded is a free log subscription operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_TransparentUpgradeableProxy *TransparentUpgradeableProxyFilterer) WatchBeaconUpgraded(opts *bind.WatchOpts, sink chan<- *TransparentUpgradeableProxyBeaconUpgraded, beacon []common.Address) (event.Subscription, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _TransparentUpgradeableProxy.contract.WatchLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TransparentUpgradeableProxyBeaconUpgraded)
				if err := _TransparentUpgradeableProxy.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBeaconUpgraded is a log parse operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_TransparentUpgradeableProxy *TransparentUpgradeableProxyFilterer) ParseBeaconUpgraded(log types.Log) (*TransparentUpgradeableProxyBeaconUpgraded, error) {
	event := new(TransparentUpgradeableProxyBeaconUpgraded)
	if err := _TransparentUpgradeableProxy.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TransparentUpgradeableProxyUpgradedIterator is returned from FilterUpgraded and is used to iterate over the raw logs and unpacked data for Upgraded events raised by the TransparentUpgradeableProxy contract.
type TransparentUpgradeableProxyUpgradedIterator struct {
	Event *TransparentUpgradeableProxyUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TransparentUpgradeableProxyUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TransparentUpgradeableProxyUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TransparentUpgradeableProxyUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TransparentUpgradeableProxyUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TransparentUpgradeableProxyUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TransparentUpgradeableProxyUpgraded represents a Upgraded event raised by the TransparentUpgradeableProxy contract.
type TransparentUpgradeableProxyUpgraded struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgraded is a free log retrieval operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_TransparentUpgradeableProxy *TransparentUpgradeableProxyFilterer) FilterUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*TransparentUpgradeableProxyUpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _TransparentUpgradeableProxy.contract.FilterLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &TransparentUpgradeableProxyUpgradedIterator{contract: _TransparentUpgradeableProxy.contract, event: "Upgraded", logs: logs, sub: sub}, nil
}

// WatchUpgraded is a free log subscription operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_TransparentUpgradeableProxy *TransparentUpgradeableProxyFilterer) WatchUpgraded(opts *bind.WatchOpts, sink chan<- *TransparentUpgradeableProxyUpgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _TransparentUpgradeableProxy.contract.WatchLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TransparentUpgradeableProxyUpgraded)
				if err := _TransparentUpgradeableProxy.contract.UnpackLog(event, "Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgraded is a log parse operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_TransparentUpgradeableProxy *TransparentUpgradeableProxyFilterer) ParseUpgraded(log types.Log) (*TransparentUpgradeableProxyUpgraded, error) {
	event := new(TransparentUpgradeableProxyUpgraded)
	if err := _TransparentUpgradeableProxy.contract.UnpackLog(event, "Upgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
